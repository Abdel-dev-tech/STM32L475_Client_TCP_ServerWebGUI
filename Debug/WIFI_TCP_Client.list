
WIFI_TCP_Client.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a48  08007d18  08007d18  00017d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008760  08008760  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08008760  08008760  00018760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008768  08008768  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008768  08008768  00018768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08008770  08008770  00018770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08008778  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c70  20000088  08008800  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00017000  20000cf8  08008800  00020cf8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016adf  00000000  00000000  000200b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bb0  00000000  00000000  00036b91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001550  00000000  00000000  00039748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001438  00000000  00000000  0003ac98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028929  00000000  00000000  0003c0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000188f6  00000000  00000000  000649f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7707  00000000  00000000  0007d2ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001749f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006740  00000000  00000000  00174a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007d00 	.word	0x08007d00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08007d00 	.word	0x08007d00

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14d      	bne.n	800035c <__udivmoddi4+0xac>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d968      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b152      	cbz	r2, 80002e2 <__udivmoddi4+0x32>
 80002cc:	fa01 f302 	lsl.w	r3, r1, r2
 80002d0:	f1c2 0120 	rsb	r1, r2, #32
 80002d4:	fa20 f101 	lsr.w	r1, r0, r1
 80002d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002dc:	ea41 0803 	orr.w	r8, r1, r3
 80002e0:	4094      	lsls	r4, r2
 80002e2:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80002e6:	0c21      	lsrs	r1, r4, #16
 80002e8:	fbb8 fef5 	udiv	lr, r8, r5
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	fb05 831e 	mls	r3, r5, lr, r8
 80002f4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f8:	fb0e f107 	mul.w	r1, lr, r7
 80002fc:	4299      	cmp	r1, r3
 80002fe:	d90b      	bls.n	8000318 <__udivmoddi4+0x68>
 8000300:	eb1c 0303 	adds.w	r3, ip, r3
 8000304:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000308:	f080 811e 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030c:	4299      	cmp	r1, r3
 800030e:	f240 811b 	bls.w	8000548 <__udivmoddi4+0x298>
 8000312:	f1ae 0e02 	sub.w	lr, lr, #2
 8000316:	4463      	add	r3, ip
 8000318:	1a5b      	subs	r3, r3, r1
 800031a:	b2a4      	uxth	r4, r4
 800031c:	fbb3 f0f5 	udiv	r0, r3, r5
 8000320:	fb05 3310 	mls	r3, r5, r0, r3
 8000324:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000328:	fb00 f707 	mul.w	r7, r0, r7
 800032c:	42a7      	cmp	r7, r4
 800032e:	d90a      	bls.n	8000346 <__udivmoddi4+0x96>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	f080 8108 	bcs.w	800054c <__udivmoddi4+0x29c>
 800033c:	42a7      	cmp	r7, r4
 800033e:	f240 8105 	bls.w	800054c <__udivmoddi4+0x29c>
 8000342:	4464      	add	r4, ip
 8000344:	3802      	subs	r0, #2
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800034c:	2100      	movs	r1, #0
 800034e:	b11e      	cbz	r6, 8000358 <__udivmoddi4+0xa8>
 8000350:	40d4      	lsrs	r4, r2
 8000352:	2300      	movs	r3, #0
 8000354:	e9c6 4300 	strd	r4, r3, [r6]
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	428b      	cmp	r3, r1
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0xc2>
 8000360:	2e00      	cmp	r6, #0
 8000362:	f000 80ee 	beq.w	8000542 <__udivmoddi4+0x292>
 8000366:	2100      	movs	r1, #0
 8000368:	e9c6 0500 	strd	r0, r5, [r6]
 800036c:	4608      	mov	r0, r1
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f183 	clz	r1, r3
 8000376:	2900      	cmp	r1, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	42ab      	cmp	r3, r5
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb65 0303 	sbc.w	r3, r5, r3
 800038a:	2001      	movs	r0, #1
 800038c:	4698      	mov	r8, r3
 800038e:	2e00      	cmp	r6, #0
 8000390:	d0e2      	beq.n	8000358 <__udivmoddi4+0xa8>
 8000392:	e9c6 4800 	strd	r4, r8, [r6]
 8000396:	e7df      	b.n	8000358 <__udivmoddi4+0xa8>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8091 	bne.w	80004c8 <__udivmoddi4+0x218>
 80003a6:	eba1 050c 	sub.w	r5, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2101      	movs	r1, #1
 80003b4:	fbb5 f3f7 	udiv	r3, r5, r7
 80003b8:	fb07 5013 	mls	r0, r7, r3, r5
 80003bc:	0c25      	lsrs	r5, r4, #16
 80003be:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	42a8      	cmp	r0, r5
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0505 	adds.w	r5, ip, r5
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	42a8      	cmp	r0, r5
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a2d      	subs	r5, r5, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb5 f0f7 	udiv	r0, r5, r7
 80003e4:	fb07 5510 	mls	r5, r7, r0, r5
 80003e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4628      	mov	r0, r5
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79e      	b.n	800034e <__udivmoddi4+0x9e>
 8000410:	f1c1 0720 	rsb	r7, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa05 f301 	lsl.w	r3, r5, r1
 8000426:	431c      	orrs	r4, r3
 8000428:	40fd      	lsrs	r5, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f301 	lsl.w	r3, r0, r1
 8000432:	fbb5 f8f9 	udiv	r8, r5, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 5518 	mls	r5, r9, r8, r5
 8000440:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	42a8      	cmp	r0, r5
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0505 	adds.w	r5, ip, r5
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	42a8      	cmp	r0, r5
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4465      	add	r5, ip
 8000468:	1a2d      	subs	r5, r5, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000470:	fb09 5510 	mls	r5, r9, r0, r5
 8000474:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	45ae      	cmp	lr, r5
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0505 	adds.w	r5, ip, r5
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	45ae      	cmp	lr, r5
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4465      	add	r5, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba5 050e 	sub.w	r5, r5, lr
 800049e:	42a5      	cmp	r5, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15e      	cbz	r6, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb65 050e 	sbc.w	r5, r5, lr
 80004b2:	fa05 f707 	lsl.w	r7, r5, r7
 80004b6:	fa22 f301 	lsr.w	r3, r2, r1
 80004ba:	40cd      	lsrs	r5, r1
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c6 7500 	strd	r7, r5, [r6]
 80004c2:	2100      	movs	r1, #0
 80004c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c8:	f1c2 0320 	rsb	r3, r2, #32
 80004cc:	fa20 f103 	lsr.w	r1, r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa25 f303 	lsr.w	r3, r5, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	430d      	orrs	r5, r1
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f1f7 	udiv	r1, r3, r7
 80004e8:	fb07 3011 	mls	r0, r7, r1, r3
 80004ec:	0c2b      	lsrs	r3, r5, #16
 80004ee:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80004f2:	fb01 f00e 	mul.w	r0, r1, lr
 80004f6:	4298      	cmp	r0, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f101 38ff 	add.w	r8, r1, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	4298      	cmp	r0, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3902      	subs	r1, #2
 800050e:	4463      	add	r3, ip
 8000510:	1a1b      	subs	r3, r3, r0
 8000512:	b2ad      	uxth	r5, r5
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3310 	mls	r3, r7, r0, r3
 800051c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000520:	fb00 f30e 	mul.w	r3, r0, lr
 8000524:	42ab      	cmp	r3, r5
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0505 	adds.w	r5, ip, r5
 800052c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3802      	subs	r0, #2
 8000538:	4465      	add	r5, ip
 800053a:	1aed      	subs	r5, r5, r3
 800053c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	4631      	mov	r1, r6
 8000544:	4630      	mov	r0, r6
 8000546:	e707      	b.n	8000358 <__udivmoddi4+0xa8>
 8000548:	4686      	mov	lr, r0
 800054a:	e6e5      	b.n	8000318 <__udivmoddi4+0x68>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fa      	b.n	8000346 <__udivmoddi4+0x96>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4640      	mov	r0, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4641      	mov	r1, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4465      	add	r5, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4608      	mov	r0, r1
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	2b2f      	cmp	r3, #47	; 0x2f
 8000592:	d906      	bls.n	80005a2 <Hex2Num+0x1e>
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	2b39      	cmp	r3, #57	; 0x39
 8000598:	d803      	bhi.n	80005a2 <Hex2Num+0x1e>
        return a - '0';
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	3b30      	subs	r3, #48	; 0x30
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	e014      	b.n	80005cc <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	2b60      	cmp	r3, #96	; 0x60
 80005a6:	d906      	bls.n	80005b6 <Hex2Num+0x32>
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	2b66      	cmp	r3, #102	; 0x66
 80005ac:	d803      	bhi.n	80005b6 <Hex2Num+0x32>
        return (a - 'a') + 10;
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	3b57      	subs	r3, #87	; 0x57
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	e00a      	b.n	80005cc <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	2b40      	cmp	r3, #64	; 0x40
 80005ba:	d906      	bls.n	80005ca <Hex2Num+0x46>
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	2b46      	cmp	r3, #70	; 0x46
 80005c0:	d803      	bhi.n	80005ca <Hex2Num+0x46>
        return (a - 'A') + 10;
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	3b37      	subs	r3, #55	; 0x37
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	e000      	b.n	80005cc <Hex2Num+0x48>
    }

    return 0;
 80005ca:	2300      	movs	r3, #0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc80      	pop	{r7}
 80005d4:	4770      	bx	lr

080005d6 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b084      	sub	sp, #16
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
 80005de:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 80005e8:	e012      	b.n	8000610 <ParseHexNumber+0x3a>
        sum <<= 4;
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	011b      	lsls	r3, r3, #4
 80005ee:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff ffc5 	bl	8000584 <Hex2Num>
 80005fa:	4603      	mov	r3, r0
 80005fc:	461a      	mov	r2, r3
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	4413      	add	r3, r2
 8000602:	60fb      	str	r3, [r7, #12]
        ptr++;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	3301      	adds	r3, #1
 8000608:	607b      	str	r3, [r7, #4]
        i++;
 800060a:	7afb      	ldrb	r3, [r7, #11]
 800060c:	3301      	adds	r3, #1
 800060e:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b2f      	cmp	r3, #47	; 0x2f
 8000616:	d903      	bls.n	8000620 <ParseHexNumber+0x4a>
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b39      	cmp	r3, #57	; 0x39
 800061e:	d9e4      	bls.n	80005ea <ParseHexNumber+0x14>
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b60      	cmp	r3, #96	; 0x60
 8000626:	d903      	bls.n	8000630 <ParseHexNumber+0x5a>
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b66      	cmp	r3, #102	; 0x66
 800062e:	d9dc      	bls.n	80005ea <ParseHexNumber+0x14>
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b40      	cmp	r3, #64	; 0x40
 8000636:	d903      	bls.n	8000640 <ParseHexNumber+0x6a>
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b46      	cmp	r3, #70	; 0x46
 800063e:	d9d4      	bls.n	80005ea <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d002      	beq.n	800064c <ParseHexNumber+0x76>
        *cnt = i;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	7afa      	ldrb	r2, [r7, #11]
 800064a:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 800064c:	68fb      	ldr	r3, [r7, #12]
}
 800064e:	4618      	mov	r0, r3
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}

08000656 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8000656:	b480      	push	{r7}
 8000658:	b085      	sub	sp, #20
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
 800065e:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	73fb      	strb	r3, [r7, #15]
 8000664:	2300      	movs	r3, #0
 8000666:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b2d      	cmp	r3, #45	; 0x2d
 8000672:	d119      	bne.n	80006a8 <ParseNumber+0x52>
        minus = 1;
 8000674:	2301      	movs	r3, #1
 8000676:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	3301      	adds	r3, #1
 800067c:	607b      	str	r3, [r7, #4]
        i++;
 800067e:	7bbb      	ldrb	r3, [r7, #14]
 8000680:	3301      	adds	r3, #1
 8000682:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8000684:	e010      	b.n	80006a8 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8000686:	68ba      	ldr	r2, [r7, #8]
 8000688:	4613      	mov	r3, r2
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	4413      	add	r3, r2
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	461a      	mov	r2, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	3b30      	subs	r3, #48	; 0x30
 8000698:	4413      	add	r3, r2
 800069a:	60bb      	str	r3, [r7, #8]
        ptr++;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	3301      	adds	r3, #1
 80006a0:	607b      	str	r3, [r7, #4]
        i++;
 80006a2:	7bbb      	ldrb	r3, [r7, #14]
 80006a4:	3301      	adds	r3, #1
 80006a6:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b2f      	cmp	r3, #47	; 0x2f
 80006ae:	d903      	bls.n	80006b8 <ParseNumber+0x62>
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b39      	cmp	r3, #57	; 0x39
 80006b6:	d9e6      	bls.n	8000686 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d002      	beq.n	80006c4 <ParseNumber+0x6e>
        *cnt = i;
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	7bba      	ldrb	r2, [r7, #14]
 80006c2:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d002      	beq.n	80006d0 <ParseNumber+0x7a>
        return 0 - sum;
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	425b      	negs	r3, r3
 80006ce:	e000      	b.n	80006d2 <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 80006d0:	68bb      	ldr	r3, [r7, #8]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3714      	adds	r7, #20
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr

080006dc <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 80006e6:	2300      	movs	r3, #0
 80006e8:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 80006ea:	e019      	b.n	8000720 <ParseMAC+0x44>
    hexcnt = 1;
 80006ec:	2301      	movs	r3, #1
 80006ee:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b3a      	cmp	r3, #58	; 0x3a
 80006f6:	d00e      	beq.n	8000716 <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 80006f8:	f107 030e 	add.w	r3, r7, #14
 80006fc:	4619      	mov	r1, r3
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f7ff ff69 	bl	80005d6 <ParseHexNumber>
 8000704:	4601      	mov	r1, r0
 8000706:	7bfb      	ldrb	r3, [r7, #15]
 8000708:	1c5a      	adds	r2, r3, #1
 800070a:	73fa      	strb	r2, [r7, #15]
 800070c:	461a      	mov	r2, r3
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	4413      	add	r3, r2
 8000712:	b2ca      	uxtb	r2, r1
 8000714:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8000716:	7bbb      	ldrb	r3, [r7, #14]
 8000718:	461a      	mov	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4413      	add	r3, r2
 800071e:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d1e1      	bne.n	80006ec <ParseMAC+0x10>
  }
}
 8000728:	bf00      	nop
 800072a:	bf00      	nop
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	b084      	sub	sp, #16
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
 800073a:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 800073c:	2300      	movs	r3, #0
 800073e:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8000740:	e019      	b.n	8000776 <ParseIP+0x44>
    hexcnt = 1;
 8000742:	2301      	movs	r3, #1
 8000744:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b2e      	cmp	r3, #46	; 0x2e
 800074c:	d00e      	beq.n	800076c <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 800074e:	f107 030e 	add.w	r3, r7, #14
 8000752:	4619      	mov	r1, r3
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f7ff ff7e 	bl	8000656 <ParseNumber>
 800075a:	4601      	mov	r1, r0
 800075c:	7bfb      	ldrb	r3, [r7, #15]
 800075e:	1c5a      	adds	r2, r3, #1
 8000760:	73fa      	strb	r2, [r7, #15]
 8000762:	461a      	mov	r2, r3
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	4413      	add	r3, r2
 8000768:	b2ca      	uxtb	r2, r1
 800076a:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 800076c:	7bbb      	ldrb	r3, [r7, #14]
 800076e:	461a      	mov	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	4413      	add	r3, r2
 8000774:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d1e1      	bne.n	8000742 <ParseIP+0x10>
  }
}
 800077e:	bf00      	nop
 8000780:	bf00      	nop
 8000782:	3710      	adds	r7, #16
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	3302      	adds	r3, #2
 800079a:	4934      	ldr	r1, [pc, #208]	; (800086c <AT_ParseInfo+0xe4>)
 800079c:	4618      	mov	r0, r3
 800079e:	f006 f8b3 	bl	8006908 <strtok>
 80007a2:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 80007a4:	e05a      	b.n	800085c <AT_ParseInfo+0xd4>
    switch (num++) {
 80007a6:	7afb      	ldrb	r3, [r7, #11]
 80007a8:	1c5a      	adds	r2, r3, #1
 80007aa:	72fa      	strb	r2, [r7, #11]
 80007ac:	2b06      	cmp	r3, #6
 80007ae:	d84f      	bhi.n	8000850 <AT_ParseInfo+0xc8>
 80007b0:	a201      	add	r2, pc, #4	; (adr r2, 80007b8 <AT_ParseInfo+0x30>)
 80007b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b6:	bf00      	nop
 80007b8:	080007d5 	.word	0x080007d5
 80007bc:	080007e3 	.word	0x080007e3
 80007c0:	080007f3 	.word	0x080007f3
 80007c4:	08000803 	.word	0x08000803
 80007c8:	08000813 	.word	0x08000813
 80007cc:	08000823 	.word	0x08000823
 80007d0:	08000837 	.word	0x08000837
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2220      	movs	r2, #32
 80007d8:	68f9      	ldr	r1, [r7, #12]
 80007da:	4618      	mov	r0, r3
 80007dc:	f006 f86a 	bl	80068b4 <strncpy>
      break;
 80007e0:	e037      	b.n	8000852 <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	3320      	adds	r3, #32
 80007e6:	2218      	movs	r2, #24
 80007e8:	68f9      	ldr	r1, [r7, #12]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f006 f862 	bl	80068b4 <strncpy>
      break;
 80007f0:	e02f      	b.n	8000852 <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	3338      	adds	r3, #56	; 0x38
 80007f6:	2210      	movs	r2, #16
 80007f8:	68f9      	ldr	r1, [r7, #12]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f006 f85a 	bl	80068b4 <strncpy>
      break;
 8000800:	e027      	b.n	8000852 <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	3348      	adds	r3, #72	; 0x48
 8000806:	2210      	movs	r2, #16
 8000808:	68f9      	ldr	r1, [r7, #12]
 800080a:	4618      	mov	r0, r3
 800080c:	f006 f852 	bl	80068b4 <strncpy>
      break;
 8000810:	e01f      	b.n	8000852 <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	3358      	adds	r3, #88	; 0x58
 8000816:	2210      	movs	r2, #16
 8000818:	68f9      	ldr	r1, [r7, #12]
 800081a:	4618      	mov	r0, r3
 800081c:	f006 f84a 	bl	80068b4 <strncpy>
      break;
 8000820:	e017      	b.n	8000852 <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8000822:	2100      	movs	r1, #0
 8000824:	68f8      	ldr	r0, [r7, #12]
 8000826:	f7ff ff16 	bl	8000656 <ParseNumber>
 800082a:	4603      	mov	r3, r0
 800082c:	461a      	mov	r2, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 8000834:	e00d      	b.n	8000852 <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 8000836:	490e      	ldr	r1, [pc, #56]	; (8000870 <AT_ParseInfo+0xe8>)
 8000838:	68f8      	ldr	r0, [r7, #12]
 800083a:	f006 f865 	bl	8006908 <strtok>
 800083e:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3368      	adds	r3, #104	; 0x68
 8000844:	2220      	movs	r2, #32
 8000846:	68f9      	ldr	r1, [r7, #12]
 8000848:	4618      	mov	r0, r3
 800084a:	f006 f833 	bl	80068b4 <strncpy>
      break;
 800084e:	e000      	b.n	8000852 <AT_ParseInfo+0xca>

    default: break;
 8000850:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8000852:	4906      	ldr	r1, [pc, #24]	; (800086c <AT_ParseInfo+0xe4>)
 8000854:	2000      	movs	r0, #0
 8000856:	f006 f857 	bl	8006908 <strtok>
 800085a:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d1a1      	bne.n	80007a6 <AT_ParseInfo+0x1e>
  }
}
 8000862:	bf00      	nop
 8000864:	bf00      	nop
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	08007d48 	.word	0x08007d48
 8000870:	08007d4c 	.word	0x08007d4c

08000874 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	3302      	adds	r3, #2
 8000886:	4952      	ldr	r1, [pc, #328]	; (80009d0 <AT_ParseConnSettings+0x15c>)
 8000888:	4618      	mov	r0, r3
 800088a:	f006 f83d 	bl	8006908 <strtok>
 800088e:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8000890:	e095      	b.n	80009be <AT_ParseConnSettings+0x14a>
    switch (num++) {
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	1c5a      	adds	r2, r3, #1
 8000896:	73fa      	strb	r2, [r7, #15]
 8000898:	2b0b      	cmp	r3, #11
 800089a:	d87f      	bhi.n	800099c <AT_ParseConnSettings+0x128>
 800089c:	a201      	add	r2, pc, #4	; (adr r2, 80008a4 <AT_ParseConnSettings+0x30>)
 800089e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a2:	bf00      	nop
 80008a4:	080008d5 	.word	0x080008d5
 80008a8:	080008e3 	.word	0x080008e3
 80008ac:	080008f3 	.word	0x080008f3
 80008b0:	08000907 	.word	0x08000907
 80008b4:	0800091b 	.word	0x0800091b
 80008b8:	0800092f 	.word	0x0800092f
 80008bc:	0800093d 	.word	0x0800093d
 80008c0:	0800094b 	.word	0x0800094b
 80008c4:	08000959 	.word	0x08000959
 80008c8:	08000967 	.word	0x08000967
 80008cc:	08000975 	.word	0x08000975
 80008d0:	08000989 	.word	0x08000989
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	2221      	movs	r2, #33	; 0x21
 80008d8:	68b9      	ldr	r1, [r7, #8]
 80008da:	4618      	mov	r0, r3
 80008dc:	f005 ffea 	bl	80068b4 <strncpy>
      break;
 80008e0:	e05d      	b.n	800099e <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	3321      	adds	r3, #33	; 0x21
 80008e6:	2221      	movs	r2, #33	; 0x21
 80008e8:	68b9      	ldr	r1, [r7, #8]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f005 ffe2 	bl	80068b4 <strncpy>
      break;
 80008f0:	e055      	b.n	800099e <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 80008f2:	2100      	movs	r1, #0
 80008f4:	68b8      	ldr	r0, [r7, #8]
 80008f6:	f7ff feae 	bl	8000656 <ParseNumber>
 80008fa:	4603      	mov	r3, r0
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 8000904:	e04b      	b.n	800099e <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8000906:	2100      	movs	r1, #0
 8000908:	68b8      	ldr	r0, [r7, #8]
 800090a:	f7ff fea4 	bl	8000656 <ParseNumber>
 800090e:	4603      	mov	r3, r0
 8000910:	b2da      	uxtb	r2, r3
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 8000918:	e041      	b.n	800099e <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 800091a:	2100      	movs	r1, #0
 800091c:	68b8      	ldr	r0, [r7, #8]
 800091e:	f7ff fe9a 	bl	8000656 <ParseNumber>
 8000922:	4603      	mov	r3, r0
 8000924:	b2da      	uxtb	r2, r3
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 800092c:	e037      	b.n	800099e <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	3348      	adds	r3, #72	; 0x48
 8000932:	4619      	mov	r1, r3
 8000934:	68b8      	ldr	r0, [r7, #8]
 8000936:	f7ff fefc 	bl	8000732 <ParseIP>
      break;
 800093a:	e030      	b.n	800099e <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	334c      	adds	r3, #76	; 0x4c
 8000940:	4619      	mov	r1, r3
 8000942:	68b8      	ldr	r0, [r7, #8]
 8000944:	f7ff fef5 	bl	8000732 <ParseIP>
      break;
 8000948:	e029      	b.n	800099e <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	3350      	adds	r3, #80	; 0x50
 800094e:	4619      	mov	r1, r3
 8000950:	68b8      	ldr	r0, [r7, #8]
 8000952:	f7ff feee 	bl	8000732 <ParseIP>
      break;
 8000956:	e022      	b.n	800099e <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	3354      	adds	r3, #84	; 0x54
 800095c:	4619      	mov	r1, r3
 800095e:	68b8      	ldr	r0, [r7, #8]
 8000960:	f7ff fee7 	bl	8000732 <ParseIP>
      break;
 8000964:	e01b      	b.n	800099e <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	3358      	adds	r3, #88	; 0x58
 800096a:	4619      	mov	r1, r3
 800096c:	68b8      	ldr	r0, [r7, #8]
 800096e:	f7ff fee0 	bl	8000732 <ParseIP>
      break;
 8000972:	e014      	b.n	800099e <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8000974:	2100      	movs	r1, #0
 8000976:	68b8      	ldr	r0, [r7, #8]
 8000978:	f7ff fe6d 	bl	8000656 <ParseNumber>
 800097c:	4603      	mov	r3, r0
 800097e:	b2da      	uxtb	r2, r3
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 8000986:	e00a      	b.n	800099e <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8000988:	2100      	movs	r1, #0
 800098a:	68b8      	ldr	r0, [r7, #8]
 800098c:	f7ff fe63 	bl	8000656 <ParseNumber>
 8000990:	4603      	mov	r3, r0
 8000992:	b2da      	uxtb	r2, r3
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 800099a:	e000      	b.n	800099e <AT_ParseConnSettings+0x12a>

    default:
      break;
 800099c:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 800099e:	490c      	ldr	r1, [pc, #48]	; (80009d0 <AT_ParseConnSettings+0x15c>)
 80009a0:	2000      	movs	r0, #0
 80009a2:	f005 ffb1 	bl	8006908 <strtok>
 80009a6:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d007      	beq.n	80009be <AT_ParseConnSettings+0x14a>
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	3b01      	subs	r3, #1
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b2c      	cmp	r3, #44	; 0x2c
 80009b6:	d102      	bne.n	80009be <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	3301      	adds	r3, #1
 80009bc:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	f47f af66 	bne.w	8000892 <AT_ParseConnSettings+0x1e>
    }
  }
}
 80009c6:	bf00      	nop
 80009c8:	bf00      	nop
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	08007d48 	.word	0x08007d48

080009d4 <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	3302      	adds	r3, #2
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b31      	cmp	r3, #49	; 0x31
 80009e6:	bf0c      	ite	eq
 80009e8:	2301      	moveq	r3, #1
 80009ea:	2300      	movne	r3, #0
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	461a      	mov	r2, r3
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	701a      	strb	r2, [r3, #0]
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bc80      	pop	{r7}
 80009fc:	4770      	bx	lr
	...

08000a00 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b087      	sub	sp, #28
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	82fb      	strh	r3, [r7, #22]
  LOCK_WIFI();

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8000a1a:	68b8      	ldr	r0, [r7, #8]
 8000a1c:	f7ff fbd8 	bl	80001d0 <strlen>
 8000a20:	4603      	mov	r3, r0
 8000a22:	b299      	uxth	r1, r3
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	68b8      	ldr	r0, [r7, #8]
 8000a2e:	47a0      	blx	r4
 8000a30:	4603      	mov	r3, r0
 8000a32:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	dd3e      	ble.n	8000ab8 <AT_ExecuteCommand+0xb8>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000a40:	68fa      	ldr	r2, [r7, #12]
 8000a42:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8000a46:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	4798      	blx	r3
 8000a4e:	4603      	mov	r3, r0
 8000a50:	82fb      	strh	r3, [r7, #22]
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8000a52:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	dd27      	ble.n	8000aaa <AT_ExecuteCommand+0xaa>
 8000a5a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a5e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000a62:	dc22      	bgt.n	8000aaa <AT_ExecuteCommand+0xaa>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8000a64:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a68:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000a6c:	d105      	bne.n	8000a7a <AT_ExecuteCommand+0x7a>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 8000a6e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	3b01      	subs	r3, #1
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 8000a7a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	4413      	add	r3, r2
 8000a82:	2200      	movs	r2, #0
 8000a84:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 8000a86:	490f      	ldr	r1, [pc, #60]	; (8000ac4 <AT_ExecuteCommand+0xc4>)
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f005 ff26 	bl	80068da <strstr>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <AT_ExecuteCommand+0x98>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8000a94:	2300      	movs	r3, #0
 8000a96:	e010      	b.n	8000aba <AT_ExecuteCommand+0xba>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8000a98:	490b      	ldr	r1, [pc, #44]	; (8000ac8 <AT_ExecuteCommand+0xc8>)
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f005 ff1d 	bl	80068da <strstr>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <AT_ExecuteCommand+0xaa>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8000aa6:	2305      	movs	r3, #5
 8000aa8:	e007      	b.n	8000aba <AT_ExecuteCommand+0xba>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8000aaa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000aae:	f113 0f04 	cmn.w	r3, #4
 8000ab2:	d101      	bne.n	8000ab8 <AT_ExecuteCommand+0xb8>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8000ab4:	2306      	movs	r3, #6
 8000ab6:	e000      	b.n	8000aba <AT_ExecuteCommand+0xba>
    }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8000ab8:	2304      	movs	r3, #4
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	371c      	adds	r7, #28
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd90      	pop	{r4, r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	08007d5c 	.word	0x08007d5c
 8000ac8:	08007d68 	.word	0x08007d68

08000acc <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
 8000ad8:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  LOCK_WIFI();
  cmd_len = strlen((char*)cmd);
 8000ae6:	68b8      	ldr	r0, [r7, #8]
 8000ae8:	f7ff fb72 	bl	80001d0 <strlen>
 8000aec:	4603      	mov	r3, r0
 8000aee:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8000af0:	8a7b      	ldrh	r3, [r7, #18]
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <AT_RequestSendData+0x32>
 8000afa:	2302      	movs	r3, #2
 8000afc:	e053      	b.n	8000ba6 <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8000b04:	68fa      	ldr	r2, [r7, #12]
 8000b06:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8000b0a:	8a79      	ldrh	r1, [r7, #18]
 8000b0c:	68b8      	ldr	r0, [r7, #8]
 8000b0e:	4798      	blx	r3
 8000b10:	4603      	mov	r3, r0
 8000b12:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8000b14:	8a3a      	ldrh	r2, [r7, #16]
 8000b16:	8a7b      	ldrh	r3, [r7, #18]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d143      	bne.n	8000ba4 <AT_RequestSendData+0xd8>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8000b28:	8879      	ldrh	r1, [r7, #2]
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	4798      	blx	r3
 8000b2e:	4603      	mov	r3, r0
 8000b30:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8000b32:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000b36:	887b      	ldrh	r3, [r7, #2]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d131      	bne.n	8000ba0 <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000b42:	68fa      	ldr	r2, [r7, #12]
 8000b44:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8000b48:	2100      	movs	r1, #0
 8000b4a:	6a38      	ldr	r0, [r7, #32]
 8000b4c:	4798      	blx	r3
 8000b4e:	4603      	mov	r3, r0
 8000b50:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8000b52:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	dd19      	ble.n	8000b8e <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 8000b5a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000b5e:	6a3a      	ldr	r2, [r7, #32]
 8000b60:	4413      	add	r3, r2
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8000b66:	4912      	ldr	r1, [pc, #72]	; (8000bb0 <AT_RequestSendData+0xe4>)
 8000b68:	6a38      	ldr	r0, [r7, #32]
 8000b6a:	f005 feb6 	bl	80068da <strstr>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <AT_RequestSendData+0xac>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8000b74:	2300      	movs	r3, #0
 8000b76:	e016      	b.n	8000ba6 <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8000b78:	490e      	ldr	r1, [pc, #56]	; (8000bb4 <AT_RequestSendData+0xe8>)
 8000b7a:	6a38      	ldr	r0, [r7, #32]
 8000b7c:	f005 fead 	bl	80068da <strstr>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <AT_RequestSendData+0xbe>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8000b86:	2305      	movs	r3, #5
 8000b88:	e00d      	b.n	8000ba6 <AT_RequestSendData+0xda>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	e00b      	b.n	8000ba6 <AT_RequestSendData+0xda>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8000b8e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000b92:	f113 0f04 	cmn.w	r3, #4
 8000b96:	d101      	bne.n	8000b9c <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 8000b98:	2306      	movs	r3, #6
 8000b9a:	e004      	b.n	8000ba6 <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	e002      	b.n	8000ba6 <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	e000      	b.n	8000ba6 <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8000ba4:	2304      	movs	r3, #4
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3718      	adds	r7, #24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	08007d5c 	.word	0x08007d5c
 8000bb4:	08007d68 	.word	0x08007d68

08000bb8 <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b087      	sub	sp, #28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
 8000bc4:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000bcc:	613b      	str	r3, [r7, #16]

  LOCK_WIFI();
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8000bd4:	68b8      	ldr	r0, [r7, #8]
 8000bd6:	f7ff fafb 	bl	80001d0 <strlen>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	b299      	uxth	r1, r3
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8000be4:	461a      	mov	r2, r3
 8000be6:	68b8      	ldr	r0, [r7, #8]
 8000be8:	47a0      	blx	r4
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	dd6f      	ble.n	8000cd0 <AT_RequestReceiveData+0x118>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	6938      	ldr	r0, [r7, #16]
 8000c00:	4798      	blx	r3
 8000c02:	4603      	mov	r3, r0
 8000c04:	617b      	str	r3, [r7, #20]
    if ((p[0]!='\r') || (p[1]!='\n'))
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b0d      	cmp	r3, #13
 8000c0c:	d104      	bne.n	8000c18 <AT_RequestReceiveData+0x60>
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	3301      	adds	r3, #1
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b0a      	cmp	r3, #10
 8000c16:	d001      	beq.n	8000c1c <AT_RequestReceiveData+0x64>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
 8000c18:	2304      	movs	r3, #4
 8000c1a:	e05a      	b.n	8000cd2 <AT_RequestReceiveData+0x11a>
    }
    len-=2;
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	3b02      	subs	r3, #2
 8000c20:	617b      	str	r3, [r7, #20]
    p+=2;
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	3302      	adds	r3, #2
 8000c26:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	2b07      	cmp	r3, #7
 8000c2c:	d94a      	bls.n	8000cc4 <AT_RequestReceiveData+0x10c>
    {
     while(len && (p[len-1]==0x15)) len--;
 8000c2e:	e002      	b.n	8000c36 <AT_RequestReceiveData+0x7e>
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	617b      	str	r3, [r7, #20]
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d006      	beq.n	8000c4a <AT_RequestReceiveData+0x92>
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	4413      	add	r3, r2
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b15      	cmp	r3, #21
 8000c48:	d0f2      	beq.n	8000c30 <AT_RequestReceiveData+0x78>
     p[len] = '\0';
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	4413      	add	r3, r2
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	3b08      	subs	r3, #8
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	491f      	ldr	r1, [pc, #124]	; (8000cdc <AT_RequestReceiveData+0x124>)
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f005 fe3b 	bl	80068da <strstr>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d016      	beq.n	8000c98 <AT_RequestReceiveData+0xe0>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	3b08      	subs	r3, #8
 8000c70:	b29a      	uxth	r2, r3
 8000c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c74:	801a      	strh	r2, [r3, #0]
	   if (*ReadData > Reqlen)
 8000c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c78:	881b      	ldrh	r3, [r3, #0]
 8000c7a:	887a      	ldrh	r2, [r7, #2]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d202      	bcs.n	8000c86 <AT_RequestReceiveData+0xce>
       {
         *ReadData = Reqlen;
 8000c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c82:	887a      	ldrh	r2, [r7, #2]
 8000c84:	801a      	strh	r2, [r3, #0]
       }
       memcpy(pdata, p, *ReadData);
 8000c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c88:	881b      	ldrh	r3, [r3, #0]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	6939      	ldr	r1, [r7, #16]
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f005 fd4c 	bl	800672c <memcpy>
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_OK;
 8000c94:	2300      	movs	r3, #0
 8000c96:	e01c      	b.n	8000cd2 <AT_RequestReceiveData+0x11a>
     }
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	3b04      	subs	r3, #4
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	2204      	movs	r2, #4
 8000ca2:	490f      	ldr	r1, [pc, #60]	; (8000ce0 <AT_RequestReceiveData+0x128>)
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f005 fd31 	bl	800670c <memcmp>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d104      	bne.n	8000cba <AT_RequestReceiveData+0x102>
     {
       *ReadData = 0;
 8000cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	801a      	strh	r2, [r3, #0]
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8000cb6:	2305      	movs	r3, #5
 8000cb8:	e00b      	b.n	8000cd2 <AT_RequestReceiveData+0x11a>
     }

     UNLOCK_WIFI();
     *ReadData = 0;
 8000cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8000cc0:	2305      	movs	r3, #5
 8000cc2:	e006      	b.n	8000cd2 <AT_RequestReceiveData+0x11a>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	f113 0f04 	cmn.w	r3, #4
 8000cca:	d101      	bne.n	8000cd0 <AT_RequestReceiveData+0x118>
   {
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
 8000ccc:	2306      	movs	r3, #6
 8000cce:	e000      	b.n	8000cd2 <AT_RequestReceiveData+0x11a>
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8000cd0:	2304      	movs	r3, #4
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	371c      	adds	r7, #28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd90      	pop	{r4, r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	08007d5c 	.word	0x08007d5c
 8000ce0:	08007d70 	.word	0x08007d70

08000ce4 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8000cec:	2302      	movs	r3, #2
 8000cee:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f247 5230 	movw	r2, #30000	; 0x7530
 8000cf6:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8000d00:	2000      	movs	r0, #0
 8000d02:	4798      	blx	r3
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d113      	bne.n	8000d32 <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000d10:	461a      	mov	r2, r3
 8000d12:	490a      	ldr	r1, [pc, #40]	; (8000d3c <ES_WIFI_Init+0x58>)
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f7ff fe73 	bl	8000a00 <AT_ExecuteCommand>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8000d1e:	7bfb      	ldrb	r3, [r7, #15]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d106      	bne.n	8000d32 <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f7ff fd2b 	bl	8000788 <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
  return ret;
 8000d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	08007d78 	.word	0x08007d78

08000d40 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
 8000d4c:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d00b      	beq.n	8000d6c <ES_WIFI_RegisterBusIO+0x2c>
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d008      	beq.n	8000d6c <ES_WIFI_RegisterBusIO+0x2c>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d005      	beq.n	8000d6c <ES_WIFI_RegisterBusIO+0x2c>
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d002      	beq.n	8000d6c <ES_WIFI_RegisterBusIO+0x2c>
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d101      	bne.n	8000d70 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	e014      	b.n	8000d9a <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	69fa      	ldr	r2, [r7, #28]
 8000d8c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	683a      	ldr	r2, [r7, #0]
 8000d94:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr

08000da4 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
 8000db0:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000db8:	68ba      	ldr	r2, [r7, #8]
 8000dba:	4932      	ldr	r1, [pc, #200]	; (8000e84 <ES_WIFI_Connect+0xe0>)
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f005 fd59 	bl	8006874 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000dce:	461a      	mov	r2, r3
 8000dd0:	68f8      	ldr	r0, [r7, #12]
 8000dd2:	f7ff fe15 	bl	8000a00 <AT_ExecuteCommand>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8000dda:	7dfb      	ldrb	r3, [r7, #23]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d14b      	bne.n	8000e78 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	4927      	ldr	r1, [pc, #156]	; (8000e88 <ES_WIFI_Connect+0xe4>)
 8000dea:	4618      	mov	r0, r3
 8000dec:	f005 fd42 	bl	8006874 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	68f8      	ldr	r0, [r7, #12]
 8000e00:	f7ff fdfe 	bl	8000a00 <AT_ExecuteCommand>
 8000e04:	4603      	mov	r3, r0
 8000e06:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8000e08:	7dfb      	ldrb	r3, [r7, #23]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d134      	bne.n	8000e78 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	78fa      	ldrb	r2, [r7, #3]
 8000e12:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000e1c:	78fa      	ldrb	r2, [r7, #3]
 8000e1e:	491b      	ldr	r1, [pc, #108]	; (8000e8c <ES_WIFI_Connect+0xe8>)
 8000e20:	4618      	mov	r0, r3
 8000e22:	f005 fd27 	bl	8006874 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000e32:	461a      	mov	r2, r3
 8000e34:	68f8      	ldr	r0, [r7, #12]
 8000e36:	f7ff fde3 	bl	8000a00 <AT_ExecuteCommand>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8000e3e:	7dfb      	ldrb	r3, [r7, #23]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d119      	bne.n	8000e78 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000e4a:	4911      	ldr	r1, [pc, #68]	; (8000e90 <ES_WIFI_Connect+0xec>)
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f005 fd11 	bl	8006874 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000e5e:	461a      	mov	r2, r3
 8000e60:	68f8      	ldr	r0, [r7, #12]
 8000e62:	f7ff fdcd 	bl	8000a00 <AT_ExecuteCommand>
 8000e66:	4603      	mov	r3, r0
 8000e68:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8000e6a:	7dfb      	ldrb	r3, [r7, #23]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d103      	bne.n	8000e78 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	2201      	movs	r2, #1
 8000e74:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 8000e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	08007d90 	.word	0x08007d90
 8000e88:	08007d98 	.word	0x08007d98
 8000e8c:	08007da0 	.word	0x08007da0
 8000e90:	08007da8 	.word	0x08007da8

08000e94 <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000ea2:	4911      	ldr	r1, [pc, #68]	; (8000ee8 <ES_WIFI_IsConnected+0x54>)
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f005 fce5 	bl	8006874 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff fda1 	bl	8000a00 <AT_ExecuteCommand>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d108      	bne.n	8000eda <ES_WIFI_IsConnected+0x46>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	33d2      	adds	r3, #210	; 0xd2
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4610      	mov	r0, r2
 8000ed6:	f7ff fd7d 	bl	80009d4 <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	08007dac 	.word	0x08007dac

08000eec <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000efa:	4910      	ldr	r1, [pc, #64]	; (8000f3c <ES_WIFI_GetNetworkSettings+0x50>)
 8000efc:	4618      	mov	r0, r3
 8000efe:	f005 fcb9 	bl	8006874 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000f0e:	461a      	mov	r2, r3
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff fd75 	bl	8000a00 <AT_ExecuteCommand>
 8000f16:	4603      	mov	r3, r0
 8000f18:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d108      	bne.n	8000f32 <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	338d      	adds	r3, #141	; 0x8d
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	f7ff fca1 	bl	8000874 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();
  return ret;
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	08007db4 	.word	0x08007db4

08000f40 <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000f50:	4912      	ldr	r1, [pc, #72]	; (8000f9c <ES_WIFI_GetMACAddress+0x5c>)
 8000f52:	4618      	mov	r0, r3
 8000f54:	f005 fc8e 	bl	8006874 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000f64:	461a      	mov	r2, r3
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff fd4a 	bl	8000a00 <AT_ExecuteCommand>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d10c      	bne.n	8000f90 <ES_WIFI_GetMACAddress+0x50>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000f7c:	3302      	adds	r3, #2
 8000f7e:	4908      	ldr	r1, [pc, #32]	; (8000fa0 <ES_WIFI_GetMACAddress+0x60>)
 8000f80:	4618      	mov	r0, r3
 8000f82:	f005 fcc1 	bl	8006908 <strtok>
 8000f86:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 8000f88:	6839      	ldr	r1, [r7, #0]
 8000f8a:	68b8      	ldr	r0, [r7, #8]
 8000f8c:	f7ff fba6 	bl	80006dc <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	08007e04 	.word	0x08007e04
 8000fa0:	08007e08 	.word	0x08007e08

08000fa4 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8000fa4:	b590      	push	{r4, r7, lr}
 8000fa6:	b087      	sub	sp, #28
 8000fa8:	af02      	add	r7, sp, #8
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	73fb      	strb	r3, [r7, #15]

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <ES_WIFI_StartClientConnection+0x1e>
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b03      	cmp	r3, #3
 8000fc0:	d105      	bne.n	8000fce <ES_WIFI_StartClientConnection+0x2a>
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	885b      	ldrh	r3, [r3, #2]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d101      	bne.n	8000fce <ES_WIFI_StartClientConnection+0x2a>
 8000fca:	2302      	movs	r3, #2
 8000fcc:	e0c1      	b.n	8001152 <ES_WIFI_StartClientConnection+0x1ae>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	785b      	ldrb	r3, [r3, #1]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4960      	ldr	r1, [pc, #384]	; (800115c <ES_WIFI_StartClientConnection+0x1b8>)
 8000fdc:	f005 fc4a 	bl	8006874 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000fec:	461a      	mov	r2, r3
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff fd06 	bl	8000a00 <AT_ExecuteCommand>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d114      	bne.n	8001028 <ES_WIFI_StartClientConnection+0x84>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	4955      	ldr	r1, [pc, #340]	; (8001160 <ES_WIFI_StartClientConnection+0x1bc>)
 800100c:	f005 fc32 	bl	8006874 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800101c:	461a      	mov	r2, r3
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff fcee 	bl	8000a00 <AT_ExecuteCommand>
 8001024:	4603      	mov	r3, r0
 8001026:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d114      	bne.n	8001058 <ES_WIFI_StartClientConnection+0xb4>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	889b      	ldrh	r3, [r3, #4]
 8001038:	461a      	mov	r2, r3
 800103a:	494a      	ldr	r1, [pc, #296]	; (8001164 <ES_WIFI_StartClientConnection+0x1c0>)
 800103c:	f005 fc1a 	bl	8006874 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800104c:	461a      	mov	r2, r3
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff fcd6 	bl	8000a00 <AT_ExecuteCommand>
 8001054:	4603      	mov	r3, r0
 8001056:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d11c      	bne.n	8001098 <ES_WIFI_StartClientConnection+0xf4>
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <ES_WIFI_StartClientConnection+0xca>
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b03      	cmp	r3, #3
 800106c:	d114      	bne.n	8001098 <ES_WIFI_StartClientConnection+0xf4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	885b      	ldrh	r3, [r3, #2]
 8001078:	461a      	mov	r2, r3
 800107a:	493b      	ldr	r1, [pc, #236]	; (8001168 <ES_WIFI_StartClientConnection+0x1c4>)
 800107c:	f005 fbfa 	bl	8006874 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800108c:	461a      	mov	r2, r3
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff fcb6 	bl	8000a00 <AT_ExecuteCommand>
 8001094:	4603      	mov	r3, r0
 8001096:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d128      	bne.n	80010f0 <ES_WIFI_StartClientConnection+0x14c>
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <ES_WIFI_StartClientConnection+0x10a>
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b03      	cmp	r3, #3
 80010ac:	d120      	bne.n	80010f0 <ES_WIFI_StartClientConnection+0x14c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	799b      	ldrb	r3, [r3, #6]
 80010b8:	4619      	mov	r1, r3
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	79db      	ldrb	r3, [r3, #7]
 80010be:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80010c4:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80010ca:	9301      	str	r3, [sp, #4]
 80010cc:	9200      	str	r2, [sp, #0]
 80010ce:	4623      	mov	r3, r4
 80010d0:	460a      	mov	r2, r1
 80010d2:	4926      	ldr	r1, [pc, #152]	; (800116c <ES_WIFI_StartClientConnection+0x1c8>)
 80010d4:	f005 fbce 	bl	8006874 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80010e4:	461a      	mov	r2, r3
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff fc8a 	bl	8000a00 <AT_ExecuteCommand>
 80010ec:	4603      	mov	r3, r0
 80010ee:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d116      	bne.n	8001124 <ES_WIFI_StartClientConnection+0x180>
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b03      	cmp	r3, #3
 80010fc:	d112      	bne.n	8001124 <ES_WIFI_StartClientConnection+0x180>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001104:	491a      	ldr	r1, [pc, #104]	; (8001170 <ES_WIFI_StartClientConnection+0x1cc>)
 8001106:	4618      	mov	r0, r3
 8001108:	f005 fbb4 	bl	8006874 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001118:	461a      	mov	r2, r3
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff fc70 	bl	8000a00 <AT_ExecuteCommand>
 8001120:	4603      	mov	r3, r0
 8001122:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d112      	bne.n	8001150 <ES_WIFI_StartClientConnection+0x1ac>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001130:	4910      	ldr	r1, [pc, #64]	; (8001174 <ES_WIFI_StartClientConnection+0x1d0>)
 8001132:	4618      	mov	r0, r3
 8001134:	f005 fb9e 	bl	8006874 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001144:	461a      	mov	r2, r3
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff fc5a 	bl	8000a00 <AT_ExecuteCommand>
 800114c:	4603      	mov	r3, r0
 800114e:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();
  return ret;
 8001150:	7bfb      	ldrb	r3, [r7, #15]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	bd90      	pop	{r4, r7, pc}
 800115a:	bf00      	nop
 800115c:	08007e6c 	.word	0x08007e6c
 8001160:	08007e74 	.word	0x08007e74
 8001164:	08007e7c 	.word	0x08007e7c
 8001168:	08007e84 	.word	0x08007e84
 800116c:	08007e8c 	.word	0x08007e8c
 8001170:	08007e9c 	.word	0x08007e9c
 8001174:	08007ea4 	.word	0x08007ea4

08001178 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af02      	add	r7, sp, #8
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	607a      	str	r2, [r7, #4]
 8001182:	461a      	mov	r2, r3
 8001184:	460b      	mov	r3, r1
 8001186:	72fb      	strb	r3, [r7, #11]
 8001188:	4613      	mov	r3, r2
 800118a:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800118c:	2302      	movs	r3, #2
 800118e:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8001190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001192:	2b00      	cmp	r3, #0
 8001194:	d102      	bne.n	800119c <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 8001196:	2301      	movs	r3, #1
 8001198:	617b      	str	r3, [r7, #20]
 800119a:	e001      	b.n	80011a0 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 800119c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119e:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 80011a0:	893b      	ldrh	r3, [r7, #8]
 80011a2:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80011a6:	d302      	bcc.n	80011ae <ES_WIFI_SendData+0x36>
 80011a8:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80011ac:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 80011ae:	6a3b      	ldr	r3, [r7, #32]
 80011b0:	893a      	ldrh	r2, [r7, #8]
 80011b2:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80011ba:	7afa      	ldrb	r2, [r7, #11]
 80011bc:	4942      	ldr	r1, [pc, #264]	; (80012c8 <ES_WIFI_SendData+0x150>)
 80011be:	4618      	mov	r0, r3
 80011c0:	f005 fb58 	bl	8006874 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80011d0:	461a      	mov	r2, r3
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	f7ff fc14 	bl	8000a00 <AT_ExecuteCommand>
 80011d8:	4603      	mov	r3, r0
 80011da:	74fb      	strb	r3, [r7, #19]
  if(ret == ES_WIFI_STATUS_OK)
 80011dc:	7cfb      	ldrb	r3, [r7, #19]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d15e      	bne.n	80012a0 <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80011e8:	697a      	ldr	r2, [r7, #20]
 80011ea:	4938      	ldr	r1, [pc, #224]	; (80012cc <ES_WIFI_SendData+0x154>)
 80011ec:	4618      	mov	r0, r3
 80011ee:	f005 fb41 	bl	8006874 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80011fe:	461a      	mov	r2, r3
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f7ff fbfd 	bl	8000a00 <AT_ExecuteCommand>
 8001206:	4603      	mov	r3, r0
 8001208:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 800120a:	7cfb      	ldrb	r3, [r7, #19]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d13d      	bne.n	800128c <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001216:	893a      	ldrh	r2, [r7, #8]
 8001218:	492d      	ldr	r1, [pc, #180]	; (80012d0 <ES_WIFI_SendData+0x158>)
 800121a:	4618      	mov	r0, r3
 800121c:	f005 fb2a 	bl	8006874 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800122c:	893a      	ldrh	r2, [r7, #8]
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	4613      	mov	r3, r2
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	68f8      	ldr	r0, [r7, #12]
 8001236:	f7ff fc49 	bl	8000acc <AT_RequestSendData>
 800123a:	4603      	mov	r3, r0
 800123c:	74fb      	strb	r3, [r7, #19]

      if(ret == ES_WIFI_STATUS_OK)
 800123e:	7cfb      	ldrb	r3, [r7, #19]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d119      	bne.n	8001278 <ES_WIFI_SendData+0x100>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800124a:	4922      	ldr	r1, [pc, #136]	; (80012d4 <ES_WIFI_SendData+0x15c>)
 800124c:	4618      	mov	r0, r3
 800124e:	f005 fb44 	bl	80068da <strstr>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d02c      	beq.n	80012b2 <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 8001258:	f640 024c 	movw	r2, #2124	; 0x84c
 800125c:	491e      	ldr	r1, [pc, #120]	; (80012d8 <ES_WIFI_SendData+0x160>)
 800125e:	481f      	ldr	r0, [pc, #124]	; (80012dc <ES_WIFI_SendData+0x164>)
 8001260:	f005 fa7a 	bl	8006758 <iprintf>
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800126a:	4619      	mov	r1, r3
 800126c:	481c      	ldr	r0, [pc, #112]	; (80012e0 <ES_WIFI_SendData+0x168>)
 800126e:	f005 fa73 	bl	8006758 <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 8001272:	2302      	movs	r3, #2
 8001274:	74fb      	strb	r3, [r7, #19]
 8001276:	e01c      	b.n	80012b2 <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 8001278:	f640 0252 	movw	r2, #2130	; 0x852
 800127c:	4916      	ldr	r1, [pc, #88]	; (80012d8 <ES_WIFI_SendData+0x160>)
 800127e:	4817      	ldr	r0, [pc, #92]	; (80012dc <ES_WIFI_SendData+0x164>)
 8001280:	f005 fa6a 	bl	8006758 <iprintf>
 8001284:	4817      	ldr	r0, [pc, #92]	; (80012e4 <ES_WIFI_SendData+0x16c>)
 8001286:	f005 faed 	bl	8006864 <puts>
 800128a:	e012      	b.n	80012b2 <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 800128c:	f640 0257 	movw	r2, #2135	; 0x857
 8001290:	4911      	ldr	r1, [pc, #68]	; (80012d8 <ES_WIFI_SendData+0x160>)
 8001292:	4812      	ldr	r0, [pc, #72]	; (80012dc <ES_WIFI_SendData+0x164>)
 8001294:	f005 fa60 	bl	8006758 <iprintf>
 8001298:	4813      	ldr	r0, [pc, #76]	; (80012e8 <ES_WIFI_SendData+0x170>)
 800129a:	f005 fae3 	bl	8006864 <puts>
 800129e:	e008      	b.n	80012b2 <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 80012a0:	f640 025c 	movw	r2, #2140	; 0x85c
 80012a4:	490c      	ldr	r1, [pc, #48]	; (80012d8 <ES_WIFI_SendData+0x160>)
 80012a6:	480d      	ldr	r0, [pc, #52]	; (80012dc <ES_WIFI_SendData+0x164>)
 80012a8:	f005 fa56 	bl	8006758 <iprintf>
 80012ac:	480f      	ldr	r0, [pc, #60]	; (80012ec <ES_WIFI_SendData+0x174>)
 80012ae:	f005 fad9 	bl	8006864 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 80012b2:	7cfb      	ldrb	r3, [r7, #19]
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d102      	bne.n	80012be <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 80012b8:	6a3b      	ldr	r3, [r7, #32]
 80012ba:	2200      	movs	r2, #0
 80012bc:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 80012be:	7cfb      	ldrb	r3, [r7, #19]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	08007e6c 	.word	0x08007e6c
 80012cc:	08008020 	.word	0x08008020
 80012d0:	08008028 	.word	0x08008028
 80012d4:	08008034 	.word	0x08008034
 80012d8:	08007efc 	.word	0x08007efc
 80012dc:	08007f14 	.word	0x08007f14
 80012e0:	0800803c 	.word	0x0800803c
 80012e4:	08008058 	.word	0x08008058
 80012e8:	08008074 	.word	0x08008074
 80012ec:	08008088 	.word	0x08008088

080012f0 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af02      	add	r7, sp, #8
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	461a      	mov	r2, r3
 80012fc:	460b      	mov	r3, r1
 80012fe:	72fb      	strb	r3, [r7, #11]
 8001300:	4613      	mov	r3, r2
 8001302:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001304:	2302      	movs	r3, #2
 8001306:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8001308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130a:	2b00      	cmp	r3, #0
 800130c:	d102      	bne.n	8001314 <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 800130e:	2301      	movs	r3, #1
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	e001      	b.n	8001318 <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8001314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001316:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 8001318:	893b      	ldrh	r3, [r7, #8]
 800131a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800131e:	f200 808b 	bhi.w	8001438 <ES_WIFI_ReceiveData+0x148>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001328:	7afa      	ldrb	r2, [r7, #11]
 800132a:	4946      	ldr	r1, [pc, #280]	; (8001444 <ES_WIFI_ReceiveData+0x154>)
 800132c:	4618      	mov	r0, r3
 800132e:	f005 faa1 	bl	8006874 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800133e:	461a      	mov	r2, r3
 8001340:	68f8      	ldr	r0, [r7, #12]
 8001342:	f7ff fb5d 	bl	8000a00 <AT_ExecuteCommand>
 8001346:	4603      	mov	r3, r0
 8001348:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 800134a:	7cfb      	ldrb	r3, [r7, #19]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d165      	bne.n	800141c <ES_WIFI_ReceiveData+0x12c>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001356:	893a      	ldrh	r2, [r7, #8]
 8001358:	493b      	ldr	r1, [pc, #236]	; (8001448 <ES_WIFI_ReceiveData+0x158>)
 800135a:	4618      	mov	r0, r3
 800135c:	f005 fa8a 	bl	8006874 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800136c:	461a      	mov	r2, r3
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f7ff fb46 	bl	8000a00 <AT_ExecuteCommand>
 8001374:	4603      	mov	r3, r0
 8001376:	74fb      	strb	r3, [r7, #19]
      if(ret == ES_WIFI_STATUS_OK)
 8001378:	7cfb      	ldrb	r3, [r7, #19]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d141      	bne.n	8001402 <ES_WIFI_ReceiveData+0x112>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	4931      	ldr	r1, [pc, #196]	; (800144c <ES_WIFI_ReceiveData+0x15c>)
 8001388:	4618      	mov	r0, r3
 800138a:	f005 fa73 	bl	8006874 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800139a:	461a      	mov	r2, r3
 800139c:	68f8      	ldr	r0, [r7, #12]
 800139e:	f7ff fb2f 	bl	8000a00 <AT_ExecuteCommand>
 80013a2:	4603      	mov	r3, r0
 80013a4:	74fb      	strb	r3, [r7, #19]
        if(ret == ES_WIFI_STATUS_OK)
 80013a6:	7cfb      	ldrb	r3, [r7, #19]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d120      	bne.n	80013ee <ES_WIFI_ReceiveData+0xfe>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013b2:	4927      	ldr	r1, [pc, #156]	; (8001450 <ES_WIFI_ReceiveData+0x160>)
 80013b4:	4618      	mov	r0, r3
 80013b6:	f005 fa5d 	bl	8006874 <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80013c0:	893a      	ldrh	r2, [r7, #8]
 80013c2:	6a3b      	ldr	r3, [r7, #32]
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	4613      	mov	r3, r2
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	68f8      	ldr	r0, [r7, #12]
 80013cc:	f7ff fbf4 	bl	8000bb8 <AT_RequestReceiveData>
 80013d0:	4603      	mov	r3, r0
 80013d2:	74fb      	strb	r3, [r7, #19]
          if (ret != ES_WIFI_STATUS_OK)
 80013d4:	7cfb      	ldrb	r3, [r7, #19]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d02e      	beq.n	8001438 <ES_WIFI_ReceiveData+0x148>
          {
            DEBUG("AT_RequestReceiveData  failed\n");
 80013da:	f640 02ed 	movw	r2, #2285	; 0x8ed
 80013de:	491d      	ldr	r1, [pc, #116]	; (8001454 <ES_WIFI_ReceiveData+0x164>)
 80013e0:	481d      	ldr	r0, [pc, #116]	; (8001458 <ES_WIFI_ReceiveData+0x168>)
 80013e2:	f005 f9b9 	bl	8006758 <iprintf>
 80013e6:	481d      	ldr	r0, [pc, #116]	; (800145c <ES_WIFI_ReceiveData+0x16c>)
 80013e8:	f005 fa3c 	bl	8006864 <puts>
 80013ec:	e024      	b.n	8001438 <ES_WIFI_ReceiveData+0x148>
          }
        }
        else
        {
         DEBUG("setting timeout failed\n");
 80013ee:	f640 02f2 	movw	r2, #2290	; 0x8f2
 80013f2:	4918      	ldr	r1, [pc, #96]	; (8001454 <ES_WIFI_ReceiveData+0x164>)
 80013f4:	4818      	ldr	r0, [pc, #96]	; (8001458 <ES_WIFI_ReceiveData+0x168>)
 80013f6:	f005 f9af 	bl	8006758 <iprintf>
 80013fa:	4819      	ldr	r0, [pc, #100]	; (8001460 <ES_WIFI_ReceiveData+0x170>)
 80013fc:	f005 fa32 	bl	8006864 <puts>
 8001400:	e01a      	b.n	8001438 <ES_WIFI_ReceiveData+0x148>
        }
      }
      else
      {
        DEBUG("setting requested len failed\n");
 8001402:	f640 02f7 	movw	r2, #2295	; 0x8f7
 8001406:	4913      	ldr	r1, [pc, #76]	; (8001454 <ES_WIFI_ReceiveData+0x164>)
 8001408:	4813      	ldr	r0, [pc, #76]	; (8001458 <ES_WIFI_ReceiveData+0x168>)
 800140a:	f005 f9a5 	bl	8006758 <iprintf>
 800140e:	4815      	ldr	r0, [pc, #84]	; (8001464 <ES_WIFI_ReceiveData+0x174>)
 8001410:	f005 fa28 	bl	8006864 <puts>
        *Receivedlen = 0;
 8001414:	6a3b      	ldr	r3, [r7, #32]
 8001416:	2200      	movs	r2, #0
 8001418:	801a      	strh	r2, [r3, #0]
 800141a:	e00d      	b.n	8001438 <ES_WIFI_ReceiveData+0x148>
      }
    }
    else
    {
      DEBUG("setting socket for read failed\n");
 800141c:	f640 02fd 	movw	r2, #2301	; 0x8fd
 8001420:	490c      	ldr	r1, [pc, #48]	; (8001454 <ES_WIFI_ReceiveData+0x164>)
 8001422:	480d      	ldr	r0, [pc, #52]	; (8001458 <ES_WIFI_ReceiveData+0x168>)
 8001424:	f005 f998 	bl	8006758 <iprintf>
 8001428:	480f      	ldr	r0, [pc, #60]	; (8001468 <ES_WIFI_ReceiveData+0x178>)
 800142a:	f005 fa1b 	bl	8006864 <puts>
      issue15++;
 800142e:	4b0f      	ldr	r3, [pc, #60]	; (800146c <ES_WIFI_ReceiveData+0x17c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	3301      	adds	r3, #1
 8001434:	4a0d      	ldr	r2, [pc, #52]	; (800146c <ES_WIFI_ReceiveData+0x17c>)
 8001436:	6013      	str	r3, [r2, #0]
    }
  }
  UNLOCK_WIFI();
  return ret;
 8001438:	7cfb      	ldrb	r3, [r7, #19]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	08007e6c 	.word	0x08007e6c
 8001448:	080080ac 	.word	0x080080ac
 800144c:	080080b4 	.word	0x080080b4
 8001450:	080080bc 	.word	0x080080bc
 8001454:	08007efc 	.word	0x08007efc
 8001458:	08007f14 	.word	0x08007f14
 800145c:	080080c0 	.word	0x080080c0
 8001460:	080080e0 	.word	0x080080e0
 8001464:	080080f8 	.word	0x080080f8
 8001468:	08008118 	.word	0x08008118
 800146c:	200000a4 	.word	0x200000a4

08001470 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08c      	sub	sp, #48	; 0x30
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 8001478:	4b57      	ldr	r3, [pc, #348]	; (80015d8 <SPI_WIFI_MspInit+0x168>)
 800147a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800147c:	4a56      	ldr	r2, [pc, #344]	; (80015d8 <SPI_WIFI_MspInit+0x168>)
 800147e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001482:	6593      	str	r3, [r2, #88]	; 0x58
 8001484:	4b54      	ldr	r3, [pc, #336]	; (80015d8 <SPI_WIFI_MspInit+0x168>)
 8001486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001488:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800148c:	61bb      	str	r3, [r7, #24]
 800148e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001490:	4b51      	ldr	r3, [pc, #324]	; (80015d8 <SPI_WIFI_MspInit+0x168>)
 8001492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001494:	4a50      	ldr	r2, [pc, #320]	; (80015d8 <SPI_WIFI_MspInit+0x168>)
 8001496:	f043 0302 	orr.w	r3, r3, #2
 800149a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800149c:	4b4e      	ldr	r3, [pc, #312]	; (80015d8 <SPI_WIFI_MspInit+0x168>)
 800149e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a8:	4b4b      	ldr	r3, [pc, #300]	; (80015d8 <SPI_WIFI_MspInit+0x168>)
 80014aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ac:	4a4a      	ldr	r2, [pc, #296]	; (80015d8 <SPI_WIFI_MspInit+0x168>)
 80014ae:	f043 0304 	orr.w	r3, r3, #4
 80014b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b4:	4b48      	ldr	r3, [pc, #288]	; (80015d8 <SPI_WIFI_MspInit+0x168>)
 80014b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014c0:	4b45      	ldr	r3, [pc, #276]	; (80015d8 <SPI_WIFI_MspInit+0x168>)
 80014c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c4:	4a44      	ldr	r2, [pc, #272]	; (80015d8 <SPI_WIFI_MspInit+0x168>)
 80014c6:	f043 0310 	orr.w	r3, r3, #16
 80014ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014cc:	4b42      	ldr	r3, [pc, #264]	; (80015d8 <SPI_WIFI_MspInit+0x168>)
 80014ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d0:	f003 0310 	and.w	r3, r3, #16
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 80014d8:	2200      	movs	r2, #0
 80014da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014de:	483f      	ldr	r0, [pc, #252]	; (80015dc <SPI_WIFI_MspInit+0x16c>)
 80014e0:	f001 f867 	bl	80025b2 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 80014e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014e8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80014ea:	2301      	movs	r3, #1
 80014ec:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80014f2:	2300      	movs	r3, #0
 80014f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 80014f6:	f107 031c 	add.w	r3, r7, #28
 80014fa:	4619      	mov	r1, r3
 80014fc:	4837      	ldr	r0, [pc, #220]	; (80015dc <SPI_WIFI_MspInit+0x16c>)
 80014fe:	f000 fe99 	bl	8002234 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 8001502:	2302      	movs	r3, #2
 8001504:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8001506:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800150a:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001510:	2300      	movs	r3, #0
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001514:	f107 031c 	add.w	r3, r7, #28
 8001518:	4619      	mov	r1, r3
 800151a:	4831      	ldr	r0, [pc, #196]	; (80015e0 <SPI_WIFI_MspInit+0x170>)
 800151c:	f000 fe8a 	bl	8002234 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 8001520:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001524:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001526:	2301      	movs	r3, #1
 8001528:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800152e:	2300      	movs	r3, #0
 8001530:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001536:	f107 031c 	add.w	r3, r7, #28
 800153a:	4619      	mov	r1, r3
 800153c:	4828      	ldr	r0, [pc, #160]	; (80015e0 <SPI_WIFI_MspInit+0x170>)
 800153e:	f000 fe79 	bl	8002234 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 8001542:	2201      	movs	r2, #1
 8001544:	2101      	movs	r1, #1
 8001546:	4826      	ldr	r0, [pc, #152]	; (80015e0 <SPI_WIFI_MspInit+0x170>)
 8001548:	f001 f833 	bl	80025b2 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 800154c:	2301      	movs	r3, #1
 800154e:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001550:	2301      	movs	r3, #1
 8001552:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001558:	2301      	movs	r3, #1
 800155a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 800155c:	f107 031c 	add.w	r3, r7, #28
 8001560:	4619      	mov	r1, r3
 8001562:	481f      	ldr	r0, [pc, #124]	; (80015e0 <SPI_WIFI_MspInit+0x170>)
 8001564:	f000 fe66 	bl	8002234 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8001568:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800156c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800156e:	2302      	movs	r3, #2
 8001570:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001576:	2301      	movs	r3, #1
 8001578:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800157a:	2306      	movs	r3, #6
 800157c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 800157e:	f107 031c 	add.w	r3, r7, #28
 8001582:	4619      	mov	r1, r3
 8001584:	4817      	ldr	r0, [pc, #92]	; (80015e4 <SPI_WIFI_MspInit+0x174>)
 8001586:	f000 fe55 	bl	8002234 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 800158a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800158e:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001598:	2301      	movs	r3, #1
 800159a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800159c:	2306      	movs	r3, #6
 800159e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 80015a0:	f107 031c 	add.w	r3, r7, #28
 80015a4:	4619      	mov	r1, r3
 80015a6:	480f      	ldr	r0, [pc, #60]	; (80015e4 <SPI_WIFI_MspInit+0x174>)
 80015a8:	f000 fe44 	bl	8002234 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 80015ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015b0:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80015b2:	2302      	movs	r3, #2
 80015b4:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 80015b6:	2301      	movs	r3, #1
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80015ba:	2301      	movs	r3, #1
 80015bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80015be:	2306      	movs	r3, #6
 80015c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 80015c2:	f107 031c 	add.w	r3, r7, #28
 80015c6:	4619      	mov	r1, r3
 80015c8:	4806      	ldr	r0, [pc, #24]	; (80015e4 <SPI_WIFI_MspInit+0x174>)
 80015ca:	f000 fe33 	bl	8002234 <HAL_GPIO_Init>
}
 80015ce:	bf00      	nop
 80015d0:	3730      	adds	r7, #48	; 0x30
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40021000 	.word	0x40021000
 80015dc:	48000400 	.word	0x48000400
 80015e0:	48001000 	.word	0x48001000
 80015e4:	48000800 	.word	0x48000800

080015e8 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 80015f6:	88fb      	ldrh	r3, [r7, #6]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d145      	bne.n	8001688 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 80015fc:	4b27      	ldr	r3, [pc, #156]	; (800169c <SPI_WIFI_Init+0xb4>)
 80015fe:	4a28      	ldr	r2, [pc, #160]	; (80016a0 <SPI_WIFI_Init+0xb8>)
 8001600:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 8001602:	4826      	ldr	r0, [pc, #152]	; (800169c <SPI_WIFI_Init+0xb4>)
 8001604:	f7ff ff34 	bl	8001470 <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 8001608:	4b24      	ldr	r3, [pc, #144]	; (800169c <SPI_WIFI_Init+0xb4>)
 800160a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800160e:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8001610:	4b22      	ldr	r3, [pc, #136]	; (800169c <SPI_WIFI_Init+0xb4>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8001616:	4b21      	ldr	r3, [pc, #132]	; (800169c <SPI_WIFI_Init+0xb4>)
 8001618:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800161c:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 800161e:	4b1f      	ldr	r3, [pc, #124]	; (800169c <SPI_WIFI_Init+0xb4>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8001624:	4b1d      	ldr	r3, [pc, #116]	; (800169c <SPI_WIFI_Init+0xb4>)
 8001626:	2200      	movs	r2, #0
 8001628:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 800162a:	4b1c      	ldr	r3, [pc, #112]	; (800169c <SPI_WIFI_Init+0xb4>)
 800162c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001630:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8001632:	4b1a      	ldr	r3, [pc, #104]	; (800169c <SPI_WIFI_Init+0xb4>)
 8001634:	2210      	movs	r2, #16
 8001636:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8001638:	4b18      	ldr	r3, [pc, #96]	; (800169c <SPI_WIFI_Init+0xb4>)
 800163a:	2200      	movs	r2, #0
 800163c:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 800163e:	4b17      	ldr	r3, [pc, #92]	; (800169c <SPI_WIFI_Init+0xb4>)
 8001640:	2200      	movs	r2, #0
 8001642:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8001644:	4b15      	ldr	r3, [pc, #84]	; (800169c <SPI_WIFI_Init+0xb4>)
 8001646:	2200      	movs	r2, #0
 8001648:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 800164a:	4b14      	ldr	r3, [pc, #80]	; (800169c <SPI_WIFI_Init+0xb4>)
 800164c:	2200      	movs	r2, #0
 800164e:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8001650:	4812      	ldr	r0, [pc, #72]	; (800169c <SPI_WIFI_Init+0xb4>)
 8001652:	f001 fe09 	bl	8003268 <HAL_SPI_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d002      	beq.n	8001662 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 800165c:	f04f 33ff 	mov.w	r3, #4294967295
 8001660:	e018      	b.n	8001694 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8001662:	2200      	movs	r2, #0
 8001664:	2100      	movs	r1, #0
 8001666:	2007      	movs	r0, #7
 8001668:	f000 fd79 	bl	800215e <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 800166c:	2007      	movs	r0, #7
 800166e:	f000 fd92 	bl	8002196 <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8001672:	2200      	movs	r2, #0
 8001674:	2100      	movs	r1, #0
 8001676:	2033      	movs	r0, #51	; 0x33
 8001678:	f000 fd71 	bl	800215e <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 800167c:	2033      	movs	r0, #51	; 0x33
 800167e:	f000 fd8a 	bl	8002196 <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 8001682:	200a      	movs	r0, #10
 8001684:	f000 f9fe 	bl	8001a84 <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 8001688:	f000 f80c 	bl	80016a4 <SPI_WIFI_ResetModule>
 800168c:	4603      	mov	r3, r0
 800168e:	73fb      	strb	r3, [r7, #15]

  return rc;
 8001690:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	200000a8 	.word	0x200000a8
 80016a0:	40003c00 	.word	0x40003c00

080016a4 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 80016aa:	f000 fc75 	bl	8001f98 <HAL_GetTick>
 80016ae:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 80016b4:	2200      	movs	r2, #0
 80016b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ba:	4830      	ldr	r0, [pc, #192]	; (800177c <SPI_WIFI_ResetModule+0xd8>)
 80016bc:	f000 ff79 	bl	80025b2 <HAL_GPIO_WritePin>
 80016c0:	200a      	movs	r0, #10
 80016c2:	f000 fc73 	bl	8001fac <HAL_Delay>
 80016c6:	2201      	movs	r2, #1
 80016c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016cc:	482b      	ldr	r0, [pc, #172]	; (800177c <SPI_WIFI_ResetModule+0xd8>)
 80016ce:	f000 ff70 	bl	80025b2 <HAL_GPIO_WritePin>
 80016d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016d6:	f000 fc69 	bl	8001fac <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 80016da:	2200      	movs	r2, #0
 80016dc:	2101      	movs	r1, #1
 80016de:	4827      	ldr	r0, [pc, #156]	; (800177c <SPI_WIFI_ResetModule+0xd8>)
 80016e0:	f000 ff67 	bl	80025b2 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80016e4:	200f      	movs	r0, #15
 80016e6:	f000 f9cd 	bl	8001a84 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 80016ea:	e020      	b.n	800172e <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
 80016ee:	463a      	mov	r2, r7
 80016f0:	18d1      	adds	r1, r2, r3
 80016f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016f6:	2201      	movs	r2, #1
 80016f8:	4821      	ldr	r0, [pc, #132]	; (8001780 <SPI_WIFI_ResetModule+0xdc>)
 80016fa:	f001 febb 	bl	8003474 <HAL_SPI_Receive>
 80016fe:	4603      	mov	r3, r0
 8001700:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8001702:	7bfb      	ldrb	r3, [r7, #15]
 8001704:	3302      	adds	r3, #2
 8001706:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8001708:	f000 fc46 	bl	8001f98 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001716:	d202      	bcs.n	800171e <SPI_WIFI_ResetModule+0x7a>
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d007      	beq.n	800172e <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 800171e:	2201      	movs	r2, #1
 8001720:	2101      	movs	r1, #1
 8001722:	4816      	ldr	r0, [pc, #88]	; (800177c <SPI_WIFI_ResetModule+0xd8>)
 8001724:	f000 ff45 	bl	80025b2 <HAL_GPIO_WritePin>
      return -1;
 8001728:	f04f 33ff 	mov.w	r3, #4294967295
 800172c:	e021      	b.n	8001772 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 800172e:	2102      	movs	r1, #2
 8001730:	4812      	ldr	r0, [pc, #72]	; (800177c <SPI_WIFI_ResetModule+0xd8>)
 8001732:	f000 ff27 	bl	8002584 <HAL_GPIO_ReadPin>
 8001736:	4603      	mov	r3, r0
 8001738:	2b01      	cmp	r3, #1
 800173a:	d0d7      	beq.n	80016ec <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 800173c:	2201      	movs	r2, #1
 800173e:	2101      	movs	r1, #1
 8001740:	480e      	ldr	r0, [pc, #56]	; (800177c <SPI_WIFI_ResetModule+0xd8>)
 8001742:	f000 ff36 	bl	80025b2 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8001746:	783b      	ldrb	r3, [r7, #0]
 8001748:	2b15      	cmp	r3, #21
 800174a:	d10e      	bne.n	800176a <SPI_WIFI_ResetModule+0xc6>
 800174c:	787b      	ldrb	r3, [r7, #1]
 800174e:	2b15      	cmp	r3, #21
 8001750:	d10b      	bne.n	800176a <SPI_WIFI_ResetModule+0xc6>
 8001752:	78bb      	ldrb	r3, [r7, #2]
 8001754:	2b0d      	cmp	r3, #13
 8001756:	d108      	bne.n	800176a <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8001758:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 800175a:	2b0a      	cmp	r3, #10
 800175c:	d105      	bne.n	800176a <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 800175e:	793b      	ldrb	r3, [r7, #4]
 8001760:	2b3e      	cmp	r3, #62	; 0x3e
 8001762:	d102      	bne.n	800176a <SPI_WIFI_ResetModule+0xc6>
 8001764:	797b      	ldrb	r3, [r7, #5]
 8001766:	2b20      	cmp	r3, #32
 8001768:	d002      	beq.n	8001770 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 800176a:	f04f 33ff 	mov.w	r3, #4294967295
 800176e:	e000      	b.n	8001772 <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	48001000 	.word	0x48001000
 8001780:	200000a8 	.word	0x200000a8

08001784 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8001788:	4802      	ldr	r0, [pc, #8]	; (8001794 <SPI_WIFI_DeInit+0x10>)
 800178a:	f001 fe39 	bl	8003400 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	bd80      	pop	{r7, pc}
 8001794:	200000a8 	.word	0x200000a8

08001798 <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 80017a0:	f000 fbfa 	bl	8001f98 <HAL_GetTick>
 80017a4:	4603      	mov	r3, r0
 80017a6:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 80017a8:	e00a      	b.n	80017c0 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80017aa:	f000 fbf5 	bl	8001f98 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	1ad2      	subs	r2, r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d902      	bls.n	80017c0 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295
 80017be:	e007      	b.n	80017d0 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 80017c0:	2102      	movs	r1, #2
 80017c2:	4805      	ldr	r0, [pc, #20]	; (80017d8 <wait_cmddata_rdy_high+0x40>)
 80017c4:	f000 fede 	bl	8002584 <HAL_GPIO_ReadPin>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d1ed      	bne.n	80017aa <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	48001000 	.word	0x48001000

080017dc <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 80017e4:	f000 fbd8 	bl	8001f98 <HAL_GetTick>
 80017e8:	4603      	mov	r3, r0
 80017ea:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 80017ec:	e00a      	b.n	8001804 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80017ee:	f000 fbd3 	bl	8001f98 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	1ad2      	subs	r2, r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d902      	bls.n	8001804 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001802:	e004      	b.n	800180e <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 8001804:	4b04      	ldr	r3, [pc, #16]	; (8001818 <wait_cmddata_rdy_rising_event+0x3c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d0f0      	beq.n	80017ee <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 800180c:	2300      	movs	r3, #0
#endif
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000114 	.word	0x20000114

0800181c <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001824:	f000 fbb8 	bl	8001f98 <HAL_GetTick>
 8001828:	4603      	mov	r3, r0
 800182a:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 800182c:	e00a      	b.n	8001844 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800182e:	f000 fbb3 	bl	8001f98 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	1ad2      	subs	r2, r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	429a      	cmp	r2, r3
 800183c:	d902      	bls.n	8001844 <wait_spi_rx_event+0x28>
    {
      return -1;
 800183e:	f04f 33ff 	mov.w	r3, #4294967295
 8001842:	e004      	b.n	800184e <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 8001844:	4b04      	ldr	r3, [pc, #16]	; (8001858 <wait_spi_rx_event+0x3c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d0f0      	beq.n	800182e <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 800184c:	2300      	movs	r3, #0
#endif
}
 800184e:	4618      	mov	r0, r3
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	2000010c 	.word	0x2000010c

0800185c <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001864:	f000 fb98 	bl	8001f98 <HAL_GetTick>
 8001868:	4603      	mov	r3, r0
 800186a:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 800186c:	e00a      	b.n	8001884 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800186e:	f000 fb93 	bl	8001f98 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	1ad2      	subs	r2, r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	429a      	cmp	r2, r3
 800187c:	d902      	bls.n	8001884 <wait_spi_tx_event+0x28>
    {
      return -1;
 800187e:	f04f 33ff 	mov.w	r3, #4294967295
 8001882:	e004      	b.n	800188e <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 8001884:	4b04      	ldr	r3, [pc, #16]	; (8001898 <wait_spi_tx_event+0x3c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d0f0      	beq.n	800186e <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 800188c:	2300      	movs	r3, #0
#endif
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000110 	.word	0x20000110

0800189c <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	460b      	mov	r3, r1
 80018a6:	607a      	str	r2, [r7, #4]
 80018a8:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 80018ae:	2201      	movs	r2, #1
 80018b0:	2101      	movs	r1, #1
 80018b2:	4834      	ldr	r0, [pc, #208]	; (8001984 <SPI_WIFI_ReceiveData+0xe8>)
 80018b4:	f000 fe7d 	bl	80025b2 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 80018b8:	2003      	movs	r0, #3
 80018ba:	f000 f8e3 	bl	8001a84 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff8b 	bl	80017dc <wait_cmddata_rdy_rising_event>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	da02      	bge.n	80018d2 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 80018cc:	f06f 0302 	mvn.w	r3, #2
 80018d0:	e054      	b.n	800197c <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 80018d2:	2200      	movs	r2, #0
 80018d4:	2101      	movs	r1, #1
 80018d6:	482b      	ldr	r0, [pc, #172]	; (8001984 <SPI_WIFI_ReceiveData+0xe8>)
 80018d8:	f000 fe6b 	bl	80025b2 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80018dc:	200f      	movs	r0, #15
 80018de:	f000 f8d1 	bl	8001a84 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 80018e2:	e03d      	b.n	8001960 <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 80018e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80018e8:	897b      	ldrh	r3, [r7, #10]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	db02      	blt.n	80018f4 <SPI_WIFI_ReceiveData+0x58>
 80018ee:	897b      	ldrh	r3, [r7, #10]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d13c      	bne.n	800196e <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 80018f4:	4b24      	ldr	r3, [pc, #144]	; (8001988 <SPI_WIFI_ReceiveData+0xec>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 80018fa:	f107 0314 	add.w	r3, r7, #20
 80018fe:	2201      	movs	r2, #1
 8001900:	4619      	mov	r1, r3
 8001902:	4822      	ldr	r0, [pc, #136]	; (800198c <SPI_WIFI_ReceiveData+0xf0>)
 8001904:	f002 fb26 	bl	8003f54 <HAL_SPI_Receive_IT>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d007      	beq.n	800191e <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 800190e:	2201      	movs	r2, #1
 8001910:	2101      	movs	r1, #1
 8001912:	481c      	ldr	r0, [pc, #112]	; (8001984 <SPI_WIFI_ReceiveData+0xe8>)
 8001914:	f000 fe4d 	bl	80025b2 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8001918:	f04f 33ff 	mov.w	r3, #4294967295
 800191c:	e02e      	b.n	800197c <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ff7b 	bl	800181c <wait_spi_rx_event>

      pData[0] = tmp[0];
 8001926:	7d3a      	ldrb	r2, [r7, #20]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	3301      	adds	r3, #1
 8001930:	7d7a      	ldrb	r2, [r7, #21]
 8001932:	701a      	strb	r2, [r3, #0]
      length += 2;
 8001934:	8afb      	ldrh	r3, [r7, #22]
 8001936:	3302      	adds	r3, #2
 8001938:	b29b      	uxth	r3, r3
 800193a:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	3302      	adds	r3, #2
 8001940:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 8001942:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001946:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800194a:	db09      	blt.n	8001960 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 800194c:	2201      	movs	r2, #1
 800194e:	2101      	movs	r1, #1
 8001950:	480c      	ldr	r0, [pc, #48]	; (8001984 <SPI_WIFI_ReceiveData+0xe8>)
 8001952:	f000 fe2e 	bl	80025b2 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 8001956:	f7ff fea5 	bl	80016a4 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 800195a:	f06f 0303 	mvn.w	r3, #3
 800195e:	e00d      	b.n	800197c <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 8001960:	2102      	movs	r1, #2
 8001962:	4808      	ldr	r0, [pc, #32]	; (8001984 <SPI_WIFI_ReceiveData+0xe8>)
 8001964:	f000 fe0e 	bl	8002584 <HAL_GPIO_ReadPin>
 8001968:	4603      	mov	r3, r0
 800196a:	2b01      	cmp	r3, #1
 800196c:	d0ba      	beq.n	80018e4 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 800196e:	2201      	movs	r2, #1
 8001970:	2101      	movs	r1, #1
 8001972:	4804      	ldr	r0, [pc, #16]	; (8001984 <SPI_WIFI_ReceiveData+0xe8>)
 8001974:	f000 fe1d 	bl	80025b2 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 8001978:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	48001000 	.word	0x48001000
 8001988:	2000010c 	.word	0x2000010c
 800198c:	200000a8 	.word	0x200000a8

08001990 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	460b      	mov	r3, r1
 800199a:	607a      	str	r2, [r7, #4]
 800199c:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff fef9 	bl	8001798 <wait_cmddata_rdy_high>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	da02      	bge.n	80019b2 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 80019ac:	f04f 33ff 	mov.w	r3, #4294967295
 80019b0:	e04f      	b.n	8001a52 <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 80019b2:	4b2a      	ldr	r3, [pc, #168]	; (8001a5c <SPI_WIFI_SendData+0xcc>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 80019b8:	2200      	movs	r2, #0
 80019ba:	2101      	movs	r1, #1
 80019bc:	4828      	ldr	r0, [pc, #160]	; (8001a60 <SPI_WIFI_SendData+0xd0>)
 80019be:	f000 fdf8 	bl	80025b2 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80019c2:	200f      	movs	r0, #15
 80019c4:	f000 f85e 	bl	8001a84 <SPI_WIFI_DelayUs>
  if (len > 1)
 80019c8:	897b      	ldrh	r3, [r7, #10]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d919      	bls.n	8001a02 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 80019ce:	4b25      	ldr	r3, [pc, #148]	; (8001a64 <SPI_WIFI_SendData+0xd4>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 80019d4:	897b      	ldrh	r3, [r7, #10]
 80019d6:	085b      	lsrs	r3, r3, #1
 80019d8:	b29b      	uxth	r3, r3
 80019da:	461a      	mov	r2, r3
 80019dc:	68f9      	ldr	r1, [r7, #12]
 80019de:	4822      	ldr	r0, [pc, #136]	; (8001a68 <SPI_WIFI_SendData+0xd8>)
 80019e0:	f002 fa16 	bl	8003e10 <HAL_SPI_Transmit_IT>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d007      	beq.n	80019fa <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 80019ea:	2201      	movs	r2, #1
 80019ec:	2101      	movs	r1, #1
 80019ee:	481c      	ldr	r0, [pc, #112]	; (8001a60 <SPI_WIFI_SendData+0xd0>)
 80019f0:	f000 fddf 	bl	80025b2 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 80019f4:	f04f 33ff 	mov.w	r3, #4294967295
 80019f8:	e02b      	b.n	8001a52 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff2d 	bl	800185c <wait_spi_tx_event>
  }
  
  if ( len & 1)
 8001a02:	897b      	ldrh	r3, [r7, #10]
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d020      	beq.n	8001a4e <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 8001a0c:	897b      	ldrh	r3, [r7, #10]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	4413      	add	r3, r2
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8001a18:	230a      	movs	r3, #10
 8001a1a:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 8001a1c:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <SPI_WIFI_SendData+0xd4>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8001a22:	f107 0314 	add.w	r3, r7, #20
 8001a26:	2201      	movs	r2, #1
 8001a28:	4619      	mov	r1, r3
 8001a2a:	480f      	ldr	r0, [pc, #60]	; (8001a68 <SPI_WIFI_SendData+0xd8>)
 8001a2c:	f002 f9f0 	bl	8003e10 <HAL_SPI_Transmit_IT>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d007      	beq.n	8001a46 <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 8001a36:	2201      	movs	r2, #1
 8001a38:	2101      	movs	r1, #1
 8001a3a:	4809      	ldr	r0, [pc, #36]	; (8001a60 <SPI_WIFI_SendData+0xd0>)
 8001a3c:	f000 fdb9 	bl	80025b2 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8001a40:	f04f 33ff 	mov.w	r3, #4294967295
 8001a44:	e005      	b.n	8001a52 <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff07 	bl	800185c <wait_spi_tx_event>
    
  }
  return len;
 8001a4e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000114 	.word	0x20000114
 8001a60:	48001000 	.word	0x48001000
 8001a64:	20000110 	.word	0x20000110
 8001a68:	200000a8 	.word	0x200000a8

08001a6c <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 fa99 	bl	8001fac <HAL_Delay>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 8001a94:	4b20      	ldr	r3, [pc, #128]	; (8001b18 <SPI_WIFI_DelayUs+0x94>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d122      	bne.n	8001ae2 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 8001a9c:	4b1f      	ldr	r3, [pc, #124]	; (8001b1c <SPI_WIFI_DelayUs+0x98>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a1f      	ldr	r2, [pc, #124]	; (8001b20 <SPI_WIFI_DelayUs+0x9c>)
 8001aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa6:	099b      	lsrs	r3, r3, #6
 8001aa8:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 8001ab2:	f000 fa71 	bl	8001f98 <HAL_GetTick>
 8001ab6:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 8001ab8:	e002      	b.n	8001ac0 <SPI_WIFI_DelayUs+0x3c>
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	3b01      	subs	r3, #1
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1f9      	bne.n	8001aba <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 8001ac6:	f000 fa67 	bl	8001f98 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	4a11      	ldr	r2, [pc, #68]	; (8001b18 <SPI_WIFI_DelayUs+0x94>)
 8001ad2:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8001ad4:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <SPI_WIFI_DelayUs+0x94>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d102      	bne.n	8001ae2 <SPI_WIFI_DelayUs+0x5e>
 8001adc:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <SPI_WIFI_DelayUs+0x94>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <SPI_WIFI_DelayUs+0x98>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a0f      	ldr	r2, [pc, #60]	; (8001b24 <SPI_WIFI_DelayUs+0xa0>)
 8001ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8001aec:	0c9a      	lsrs	r2, r3, #18
 8001aee:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <SPI_WIFI_DelayUs+0x94>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af6:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	fb02 f303 	mul.w	r3, r2, r3
 8001b00:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8001b02:	e002      	b.n	8001b0a <SPI_WIFI_DelayUs+0x86>
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1f9      	bne.n	8001b04 <SPI_WIFI_DelayUs+0x80>
  return;
 8001b10:	bf00      	nop
}
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000118 	.word	0x20000118
 8001b1c:	2000001c 	.word	0x2000001c
 8001b20:	10624dd3 	.word	0x10624dd3
 8001b24:	431bde83 	.word	0x431bde83

08001b28 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8001b30:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <HAL_SPI_RxCpltCallback+0x20>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d002      	beq.n	8001b3e <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8001b38:	4b03      	ldr	r3, [pc, #12]	; (8001b48 <HAL_SPI_RxCpltCallback+0x20>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
  }
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	2000010c 	.word	0x2000010c

08001b4c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8001b54:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <HAL_SPI_TxCpltCallback+0x20>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d002      	beq.n	8001b62 <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8001b5c:	4b03      	ldr	r3, [pc, #12]	; (8001b6c <HAL_SPI_TxCpltCallback+0x20>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
  }
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr
 8001b6c:	20000110 	.word	0x20000110

08001b70 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 8001b74:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <SPI_WIFI_ISR+0x1c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d102      	bne.n	8001b82 <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8001b7c:	4b03      	ldr	r3, [pc, #12]	; (8001b8c <SPI_WIFI_ISR+0x1c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
   }
}
 8001b82:	bf00      	nop
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	20000114 	.word	0x20000114

08001b90 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8001b9a:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <WIFI_Init+0x40>)
 8001b9c:	9301      	str	r3, [sp, #4]
 8001b9e:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <WIFI_Init+0x44>)
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <WIFI_Init+0x48>)
 8001ba4:	4a0d      	ldr	r2, [pc, #52]	; (8001bdc <WIFI_Init+0x4c>)
 8001ba6:	490e      	ldr	r1, [pc, #56]	; (8001be0 <WIFI_Init+0x50>)
 8001ba8:	480e      	ldr	r0, [pc, #56]	; (8001be4 <WIFI_Init+0x54>)
 8001baa:	f7ff f8c9 	bl	8000d40 <ES_WIFI_RegisterBusIO>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d107      	bne.n	8001bc4 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8001bb4:	480b      	ldr	r0, [pc, #44]	; (8001be4 <WIFI_Init+0x54>)
 8001bb6:	f7ff f895 	bl	8000ce4 <ES_WIFI_Init>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	0800189d 	.word	0x0800189d
 8001bd4:	08001991 	.word	0x08001991
 8001bd8:	08001a6d 	.word	0x08001a6d
 8001bdc:	08001785 	.word	0x08001785
 8001be0:	080015e9 	.word	0x080015e9
 8001be4:	2000011c 	.word	0x2000011c

08001be8 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	68ba      	ldr	r2, [r7, #8]
 8001bfe:	68f9      	ldr	r1, [r7, #12]
 8001c00:	4809      	ldr	r0, [pc, #36]	; (8001c28 <WIFI_Connect+0x40>)
 8001c02:	f7ff f8cf 	bl	8000da4 <ES_WIFI_Connect>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d107      	bne.n	8001c1c <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8001c0c:	4806      	ldr	r0, [pc, #24]	; (8001c28 <WIFI_Connect+0x40>)
 8001c0e:	f7ff f96d 	bl	8000eec <ES_WIFI_GetNetworkSettings>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8001c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	2000011c 	.word	0x2000011c

08001c2c <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 8001c38:	6879      	ldr	r1, [r7, #4]
 8001c3a:	4806      	ldr	r0, [pc, #24]	; (8001c54 <WIFI_GetMAC_Address+0x28>)
 8001c3c:	f7ff f980 	bl	8000f40 <ES_WIFI_GetMACAddress>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 8001c46:	2300      	movs	r3, #0
 8001c48:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8001c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3710      	adds	r7, #16
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	2000011c 	.word	0x2000011c

08001c58 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8001c64:	4809      	ldr	r0, [pc, #36]	; (8001c8c <WIFI_GetIP_Address+0x34>)
 8001c66:	f7ff f915 	bl	8000e94 <ES_WIFI_IsConnected>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d107      	bne.n	8001c80 <WIFI_GetIP_Address+0x28>
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <WIFI_GetIP_Address+0x34>)
 8001c72:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 8001c76:	461a      	mov	r2, r3
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	2000011c 	.word	0x2000011c

08001c90 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08a      	sub	sp, #40	; 0x28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	607a      	str	r2, [r7, #4]
 8001c9a:	603b      	str	r3, [r7, #0]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 8001cac:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001cae:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 8001cb0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001cb2:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8001cb4:	7afb      	ldrb	r3, [r7, #11]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	bf14      	ite	ne
 8001cba:	2301      	movne	r3, #1
 8001cbc:	2300      	moveq	r3, #0
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	785b      	ldrb	r3, [r3, #1]
 8001ccc:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	789b      	ldrb	r3, [r3, #2]
 8001cd2:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	78db      	ldrb	r3, [r3, #3]
 8001cd8:	767b      	strb	r3, [r7, #25]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8001cda:	f107 0310 	add.w	r3, r7, #16
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4807      	ldr	r0, [pc, #28]	; (8001d00 <WIFI_OpenClientConnection+0x70>)
 8001ce2:	f7ff f95f 	bl	8000fa4 <ES_WIFI_StartClientConnection>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d102      	bne.n	8001cf2 <WIFI_OpenClientConnection+0x62>
  {
    ret = WIFI_STATUS_OK;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8001cf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3728      	adds	r7, #40	; 0x28
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	2000011c 	.word	0x2000011c

08001d04 <WIFI_SendData>:
  * @param  SentDatalen : (OUT) length actually sent
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af02      	add	r7, sp, #8
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	607b      	str	r3, [r7, #4]
 8001d0e:	4603      	mov	r3, r0
 8001d10:	73fb      	strb	r3, [r7, #15]
 8001d12:	4613      	mov	r3, r2
 8001d14:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8001d1a:	89ba      	ldrh	r2, [r7, #12]
 8001d1c:	7bf9      	ldrb	r1, [r7, #15]
 8001d1e:	6a3b      	ldr	r3, [r7, #32]
 8001d20:	9301      	str	r3, [sp, #4]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	4613      	mov	r3, r2
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	4806      	ldr	r0, [pc, #24]	; (8001d44 <WIFI_SendData+0x40>)
 8001d2c:	f7ff fa24 	bl	8001178 <ES_WIFI_SendData>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 8001d36:	2300      	movs	r3, #0
 8001d38:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 8001d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	2000011c 	.word	0x2000011c

08001d48 <WIFI_ReceiveData>:
  * @param  RcvDatalen : (OUT) length of the data actually received
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af02      	add	r7, sp, #8
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607b      	str	r3, [r7, #4]
 8001d52:	4603      	mov	r3, r0
 8001d54:	73fb      	strb	r3, [r7, #15]
 8001d56:	4613      	mov	r3, r2
 8001d58:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8001d5e:	89ba      	ldrh	r2, [r7, #12]
 8001d60:	7bf9      	ldrb	r1, [r7, #15]
 8001d62:	6a3b      	ldr	r3, [r7, #32]
 8001d64:	9301      	str	r3, [sp, #4]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	68ba      	ldr	r2, [r7, #8]
 8001d6e:	4806      	ldr	r0, [pc, #24]	; (8001d88 <WIFI_ReceiveData+0x40>)
 8001d70:	f7ff fabe 	bl	80012f0 <ES_WIFI_ReceiveData>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 8001d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	2000011c 	.word	0x2000011c

08001d8c <BSP_LED_Init>:
  * @param  Led  LED to be initialized. 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d10b      	bne.n	8001db4 <BSP_LED_Init+0x28>
 8001d9c:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <BSP_LED_Init+0x58>)
 8001d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da0:	4a10      	ldr	r2, [pc, #64]	; (8001de4 <BSP_LED_Init+0x58>)
 8001da2:	f043 0302 	orr.w	r3, r3, #2
 8001da6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001da8:	4b0e      	ldr	r3, [pc, #56]	; (8001de4 <BSP_LED_Init+0x58>)
 8001daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8001db4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001db8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	4a07      	ldr	r2, [pc, #28]	; (8001de8 <BSP_LED_Init+0x5c>)
 8001dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dce:	f107 020c 	add.w	r2, r7, #12
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f000 fa2d 	bl	8002234 <HAL_GPIO_Init>
}
 8001dda:	bf00      	nop
 8001ddc:	3720      	adds	r7, #32
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40021000 	.word	0x40021000
 8001de8:	20000000 	.word	0x20000000

08001dec <BSP_LED_On>:
  * @param  Led  LED to be set on 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	4a06      	ldr	r2, [pc, #24]	; (8001e14 <BSP_LED_On+0x28>)
 8001dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e02:	b291      	uxth	r1, r2
 8001e04:	2201      	movs	r2, #1
 8001e06:	4618      	mov	r0, r3
 8001e08:	f000 fbd3 	bl	80025b2 <HAL_GPIO_WritePin>
}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20000000 	.word	0x20000000

08001e18 <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08a      	sub	sp, #40	; 0x28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	6039      	str	r1, [r7, #0]
 8001e22:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10b      	bne.n	8001e42 <BSP_COM_Init+0x2a>
 8001e2a:	4b2d      	ldr	r3, [pc, #180]	; (8001ee0 <BSP_COM_Init+0xc8>)
 8001e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2e:	4a2c      	ldr	r2, [pc, #176]	; (8001ee0 <BSP_COM_Init+0xc8>)
 8001e30:	f043 0302 	orr.w	r3, r3, #2
 8001e34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e36:	4b2a      	ldr	r3, [pc, #168]	; (8001ee0 <BSP_COM_Init+0xc8>)
 8001e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	613b      	str	r3, [r7, #16]
 8001e40:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d10b      	bne.n	8001e60 <BSP_COM_Init+0x48>
 8001e48:	4b25      	ldr	r3, [pc, #148]	; (8001ee0 <BSP_COM_Init+0xc8>)
 8001e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4c:	4a24      	ldr	r2, [pc, #144]	; (8001ee0 <BSP_COM_Init+0xc8>)
 8001e4e:	f043 0302 	orr.w	r3, r3, #2
 8001e52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e54:	4b22      	ldr	r3, [pc, #136]	; (8001ee0 <BSP_COM_Init+0xc8>)
 8001e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10b      	bne.n	8001e7e <BSP_COM_Init+0x66>
 8001e66:	4b1e      	ldr	r3, [pc, #120]	; (8001ee0 <BSP_COM_Init+0xc8>)
 8001e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e6a:	4a1d      	ldr	r2, [pc, #116]	; (8001ee0 <BSP_COM_Init+0xc8>)
 8001e6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e70:	6613      	str	r3, [r2, #96]	; 0x60
 8001e72:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <BSP_COM_Init+0xc8>)
 8001e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e7a:	60bb      	str	r3, [r7, #8]
 8001e7c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 8001e7e:	2340      	movs	r3, #64	; 0x40
 8001e80:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001e82:	2302      	movs	r3, #2
 8001e84:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e86:	2302      	movs	r3, #2
 8001e88:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8001e8e:	2307      	movs	r3, #7
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	4a13      	ldr	r2, [pc, #76]	; (8001ee4 <BSP_COM_Init+0xcc>)
 8001e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9a:	f107 0214 	add.w	r2, r7, #20
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f000 f9c7 	bl	8002234 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8001ea6:	2380      	movs	r3, #128	; 0x80
 8001ea8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 8001eae:	2307      	movs	r3, #7
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	4a0c      	ldr	r2, [pc, #48]	; (8001ee8 <BSP_COM_Init+0xd0>)
 8001eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eba:	f107 0214 	add.w	r2, r7, #20
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f000 f9b7 	bl	8002234 <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 8001ec6:	79fb      	ldrb	r3, [r7, #7]
 8001ec8:	4a08      	ldr	r2, [pc, #32]	; (8001eec <BSP_COM_Init+0xd4>)
 8001eca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 8001ed2:	6838      	ldr	r0, [r7, #0]
 8001ed4:	f003 fbd0 	bl	8005678 <HAL_UART_Init>
}
 8001ed8:	bf00      	nop
 8001eda:	3728      	adds	r7, #40	; 0x28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	20000008 	.word	0x20000008
 8001ee8:	2000000c 	.word	0x2000000c
 8001eec:	20000004 	.word	0x20000004

08001ef0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ef0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f28 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ef4:	f004 fbb4 	bl	8006660 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001ef8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001efa:	e003      	b.n	8001f04 <LoopCopyDataInit>

08001efc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001efc:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001efe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001f00:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001f02:	3104      	adds	r1, #4

08001f04 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001f04:	480a      	ldr	r0, [pc, #40]	; (8001f30 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001f06:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001f08:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001f0a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001f0c:	d3f6      	bcc.n	8001efc <CopyDataInit>
	ldr	r2, =_sbss
 8001f0e:	4a0a      	ldr	r2, [pc, #40]	; (8001f38 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001f10:	e002      	b.n	8001f18 <LoopFillZerobss>

08001f12 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001f12:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001f14:	f842 3b04 	str.w	r3, [r2], #4

08001f18 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001f18:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <LoopForever+0x16>)
	cmp	r2, r3
 8001f1a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001f1c:	d3f9      	bcc.n	8001f12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f1e:	f004 fbd1 	bl	80066c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f22:	f004 f8fb 	bl	800611c <main>

08001f26 <LoopForever>:

LoopForever:
    b LoopForever
 8001f26:	e7fe      	b.n	8001f26 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f28:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001f2c:	08008778 	.word	0x08008778
	ldr	r0, =_sdata
 8001f30:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001f34:	20000088 	.word	0x20000088
	ldr	r2, =_sbss
 8001f38:	20000088 	.word	0x20000088
	ldr	r3, = _ebss
 8001f3c:	20000cf8 	.word	0x20000cf8

08001f40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f40:	e7fe      	b.n	8001f40 <ADC1_2_IRQHandler>

08001f42 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b082      	sub	sp, #8
 8001f46:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f4c:	2003      	movs	r0, #3
 8001f4e:	f000 f8fb 	bl	8002148 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f52:	200f      	movs	r0, #15
 8001f54:	f003 faf8 	bl	8005548 <HAL_InitTick>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	71fb      	strb	r3, [r7, #7]
 8001f62:	e001      	b.n	8001f68 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f64:	f000 fb54 	bl	8002610 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f68:	79fb      	ldrb	r3, [r7, #7]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f78:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <HAL_IncTick+0x1c>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <HAL_IncTick+0x20>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4413      	add	r3, r2
 8001f84:	4a03      	ldr	r2, [pc, #12]	; (8001f94 <HAL_IncTick+0x20>)
 8001f86:	6013      	str	r3, [r2, #0]
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr
 8001f90:	20000014 	.word	0x20000014
 8001f94:	20000aa0 	.word	0x20000aa0

08001f98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f9c:	4b02      	ldr	r3, [pc, #8]	; (8001fa8 <HAL_GetTick+0x10>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr
 8001fa8:	20000aa0 	.word	0x20000aa0

08001fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fb4:	f7ff fff0 	bl	8001f98 <HAL_GetTick>
 8001fb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc4:	d005      	beq.n	8001fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001fc6:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <HAL_Delay+0x44>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4413      	add	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fd2:	bf00      	nop
 8001fd4:	f7ff ffe0 	bl	8001f98 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d8f7      	bhi.n	8001fd4 <HAL_Delay+0x28>
  {
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	bf00      	nop
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000014 	.word	0x20000014

08001ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002004:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <__NVIC_SetPriorityGrouping+0x44>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002010:	4013      	ands	r3, r2
 8002012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800201c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002026:	4a04      	ldr	r2, [pc, #16]	; (8002038 <__NVIC_SetPriorityGrouping+0x44>)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	60d3      	str	r3, [r2, #12]
}
 800202c:	bf00      	nop
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002040:	4b04      	ldr	r3, [pc, #16]	; (8002054 <__NVIC_GetPriorityGrouping+0x18>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	0a1b      	lsrs	r3, r3, #8
 8002046:	f003 0307 	and.w	r3, r3, #7
}
 800204a:	4618      	mov	r0, r3
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	2b00      	cmp	r3, #0
 8002068:	db0b      	blt.n	8002082 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	f003 021f 	and.w	r2, r3, #31
 8002070:	4906      	ldr	r1, [pc, #24]	; (800208c <__NVIC_EnableIRQ+0x34>)
 8002072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002076:	095b      	lsrs	r3, r3, #5
 8002078:	2001      	movs	r0, #1
 800207a:	fa00 f202 	lsl.w	r2, r0, r2
 800207e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr
 800208c:	e000e100 	.word	0xe000e100

08002090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	6039      	str	r1, [r7, #0]
 800209a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	db0a      	blt.n	80020ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	490c      	ldr	r1, [pc, #48]	; (80020dc <__NVIC_SetPriority+0x4c>)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	0112      	lsls	r2, r2, #4
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	440b      	add	r3, r1
 80020b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b8:	e00a      	b.n	80020d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	4908      	ldr	r1, [pc, #32]	; (80020e0 <__NVIC_SetPriority+0x50>)
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	3b04      	subs	r3, #4
 80020c8:	0112      	lsls	r2, r2, #4
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	440b      	add	r3, r1
 80020ce:	761a      	strb	r2, [r3, #24]
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	e000e100 	.word	0xe000e100
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b089      	sub	sp, #36	; 0x24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f1c3 0307 	rsb	r3, r3, #7
 80020fe:	2b04      	cmp	r3, #4
 8002100:	bf28      	it	cs
 8002102:	2304      	movcs	r3, #4
 8002104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3304      	adds	r3, #4
 800210a:	2b06      	cmp	r3, #6
 800210c:	d902      	bls.n	8002114 <NVIC_EncodePriority+0x30>
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3b03      	subs	r3, #3
 8002112:	e000      	b.n	8002116 <NVIC_EncodePriority+0x32>
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002118:	f04f 32ff 	mov.w	r2, #4294967295
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43da      	mvns	r2, r3
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	401a      	ands	r2, r3
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800212c:	f04f 31ff 	mov.w	r1, #4294967295
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	fa01 f303 	lsl.w	r3, r1, r3
 8002136:	43d9      	mvns	r1, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800213c:	4313      	orrs	r3, r2
         );
}
 800213e:	4618      	mov	r0, r3
 8002140:	3724      	adds	r7, #36	; 0x24
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr

08002148 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff ff4f 	bl	8001ff4 <__NVIC_SetPriorityGrouping>
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b086      	sub	sp, #24
 8002162:	af00      	add	r7, sp, #0
 8002164:	4603      	mov	r3, r0
 8002166:	60b9      	str	r1, [r7, #8]
 8002168:	607a      	str	r2, [r7, #4]
 800216a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002170:	f7ff ff64 	bl	800203c <__NVIC_GetPriorityGrouping>
 8002174:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	6978      	ldr	r0, [r7, #20]
 800217c:	f7ff ffb2 	bl	80020e4 <NVIC_EncodePriority>
 8002180:	4602      	mov	r2, r0
 8002182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002186:	4611      	mov	r1, r2
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ff81 	bl	8002090 <__NVIC_SetPriority>
}
 800218e:	bf00      	nop
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	4603      	mov	r3, r0
 800219e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff ff57 	bl	8002058 <__NVIC_EnableIRQ>
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b084      	sub	sp, #16
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021ba:	2300      	movs	r3, #0
 80021bc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d005      	beq.n	80021d6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2204      	movs	r2, #4
 80021ce:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	73fb      	strb	r3, [r7, #15]
 80021d4:	e029      	b.n	800222a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 020e 	bic.w	r2, r2, #14
 80021e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0201 	bic.w	r2, r2, #1
 80021f4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fa:	f003 021c 	and.w	r2, r3, #28
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	2101      	movs	r1, #1
 8002204:	fa01 f202 	lsl.w	r2, r1, r2
 8002208:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	4798      	blx	r3
    }
  }
  return status;
 800222a:	7bfb      	ldrb	r3, [r7, #15]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002234:	b480      	push	{r7}
 8002236:	b087      	sub	sp, #28
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002242:	e17f      	b.n	8002544 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	2101      	movs	r1, #1
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	fa01 f303 	lsl.w	r3, r1, r3
 8002250:	4013      	ands	r3, r2
 8002252:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2b00      	cmp	r3, #0
 8002258:	f000 8171 	beq.w	800253e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	2b01      	cmp	r3, #1
 8002266:	d005      	beq.n	8002274 <HAL_GPIO_Init+0x40>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 0303 	and.w	r3, r3, #3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d130      	bne.n	80022d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	2203      	movs	r2, #3
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	4013      	ands	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	68da      	ldr	r2, [r3, #12]
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	4313      	orrs	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022aa:	2201      	movs	r2, #1
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43db      	mvns	r3, r3
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	4013      	ands	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	091b      	lsrs	r3, r3, #4
 80022c0:	f003 0201 	and.w	r2, r3, #1
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	2b03      	cmp	r3, #3
 80022e0:	d118      	bne.n	8002314 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80022e8:	2201      	movs	r2, #1
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	4013      	ands	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	08db      	lsrs	r3, r3, #3
 80022fe:	f003 0201 	and.w	r2, r3, #1
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	2b03      	cmp	r3, #3
 800231e:	d017      	beq.n	8002350 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	2203      	movs	r2, #3
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4013      	ands	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	4313      	orrs	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d123      	bne.n	80023a4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	08da      	lsrs	r2, r3, #3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3208      	adds	r2, #8
 8002364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002368:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	220f      	movs	r2, #15
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	4013      	ands	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	691a      	ldr	r2, [r3, #16]
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	4313      	orrs	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	08da      	lsrs	r2, r3, #3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3208      	adds	r2, #8
 800239e:	6939      	ldr	r1, [r7, #16]
 80023a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	2203      	movs	r2, #3
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	4013      	ands	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 0203 	and.w	r2, r3, #3
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 80ac 	beq.w	800253e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e6:	4b5e      	ldr	r3, [pc, #376]	; (8002560 <HAL_GPIO_Init+0x32c>)
 80023e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ea:	4a5d      	ldr	r2, [pc, #372]	; (8002560 <HAL_GPIO_Init+0x32c>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	6613      	str	r3, [r2, #96]	; 0x60
 80023f2:	4b5b      	ldr	r3, [pc, #364]	; (8002560 <HAL_GPIO_Init+0x32c>)
 80023f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	60bb      	str	r3, [r7, #8]
 80023fc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023fe:	4a59      	ldr	r2, [pc, #356]	; (8002564 <HAL_GPIO_Init+0x330>)
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	089b      	lsrs	r3, r3, #2
 8002404:	3302      	adds	r3, #2
 8002406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800240a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	220f      	movs	r2, #15
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43db      	mvns	r3, r3
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	4013      	ands	r3, r2
 8002420:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002428:	d025      	beq.n	8002476 <HAL_GPIO_Init+0x242>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a4e      	ldr	r2, [pc, #312]	; (8002568 <HAL_GPIO_Init+0x334>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d01f      	beq.n	8002472 <HAL_GPIO_Init+0x23e>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a4d      	ldr	r2, [pc, #308]	; (800256c <HAL_GPIO_Init+0x338>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d019      	beq.n	800246e <HAL_GPIO_Init+0x23a>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a4c      	ldr	r2, [pc, #304]	; (8002570 <HAL_GPIO_Init+0x33c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d013      	beq.n	800246a <HAL_GPIO_Init+0x236>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a4b      	ldr	r2, [pc, #300]	; (8002574 <HAL_GPIO_Init+0x340>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d00d      	beq.n	8002466 <HAL_GPIO_Init+0x232>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a4a      	ldr	r2, [pc, #296]	; (8002578 <HAL_GPIO_Init+0x344>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d007      	beq.n	8002462 <HAL_GPIO_Init+0x22e>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a49      	ldr	r2, [pc, #292]	; (800257c <HAL_GPIO_Init+0x348>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d101      	bne.n	800245e <HAL_GPIO_Init+0x22a>
 800245a:	2306      	movs	r3, #6
 800245c:	e00c      	b.n	8002478 <HAL_GPIO_Init+0x244>
 800245e:	2307      	movs	r3, #7
 8002460:	e00a      	b.n	8002478 <HAL_GPIO_Init+0x244>
 8002462:	2305      	movs	r3, #5
 8002464:	e008      	b.n	8002478 <HAL_GPIO_Init+0x244>
 8002466:	2304      	movs	r3, #4
 8002468:	e006      	b.n	8002478 <HAL_GPIO_Init+0x244>
 800246a:	2303      	movs	r3, #3
 800246c:	e004      	b.n	8002478 <HAL_GPIO_Init+0x244>
 800246e:	2302      	movs	r3, #2
 8002470:	e002      	b.n	8002478 <HAL_GPIO_Init+0x244>
 8002472:	2301      	movs	r3, #1
 8002474:	e000      	b.n	8002478 <HAL_GPIO_Init+0x244>
 8002476:	2300      	movs	r3, #0
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	f002 0203 	and.w	r2, r2, #3
 800247e:	0092      	lsls	r2, r2, #2
 8002480:	4093      	lsls	r3, r2
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002488:	4936      	ldr	r1, [pc, #216]	; (8002564 <HAL_GPIO_Init+0x330>)
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	089b      	lsrs	r3, r3, #2
 800248e:	3302      	adds	r3, #2
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002496:	4b3a      	ldr	r3, [pc, #232]	; (8002580 <HAL_GPIO_Init+0x34c>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	43db      	mvns	r3, r3
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	4013      	ands	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024ba:	4a31      	ldr	r2, [pc, #196]	; (8002580 <HAL_GPIO_Init+0x34c>)
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024c0:	4b2f      	ldr	r3, [pc, #188]	; (8002580 <HAL_GPIO_Init+0x34c>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	43db      	mvns	r3, r3
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024e4:	4a26      	ldr	r2, [pc, #152]	; (8002580 <HAL_GPIO_Init+0x34c>)
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024ea:	4b25      	ldr	r3, [pc, #148]	; (8002580 <HAL_GPIO_Init+0x34c>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	43db      	mvns	r3, r3
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	4013      	ands	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4313      	orrs	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800250e:	4a1c      	ldr	r2, [pc, #112]	; (8002580 <HAL_GPIO_Init+0x34c>)
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002514:	4b1a      	ldr	r3, [pc, #104]	; (8002580 <HAL_GPIO_Init+0x34c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	43db      	mvns	r3, r3
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4013      	ands	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4313      	orrs	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002538:	4a11      	ldr	r2, [pc, #68]	; (8002580 <HAL_GPIO_Init+0x34c>)
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	3301      	adds	r3, #1
 8002542:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	fa22 f303 	lsr.w	r3, r2, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	f47f ae78 	bne.w	8002244 <HAL_GPIO_Init+0x10>
  }
}
 8002554:	bf00      	nop
 8002556:	bf00      	nop
 8002558:	371c      	adds	r7, #28
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr
 8002560:	40021000 	.word	0x40021000
 8002564:	40010000 	.word	0x40010000
 8002568:	48000400 	.word	0x48000400
 800256c:	48000800 	.word	0x48000800
 8002570:	48000c00 	.word	0x48000c00
 8002574:	48001000 	.word	0x48001000
 8002578:	48001400 	.word	0x48001400
 800257c:	48001800 	.word	0x48001800
 8002580:	40010400 	.word	0x40010400

08002584 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691a      	ldr	r2, [r3, #16]
 8002594:	887b      	ldrh	r3, [r7, #2]
 8002596:	4013      	ands	r3, r2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d002      	beq.n	80025a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800259c:	2301      	movs	r3, #1
 800259e:	73fb      	strb	r3, [r7, #15]
 80025a0:	e001      	b.n	80025a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025a2:	2300      	movs	r3, #0
 80025a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr

080025b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
 80025ba:	460b      	mov	r3, r1
 80025bc:	807b      	strh	r3, [r7, #2]
 80025be:	4613      	mov	r3, r2
 80025c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025c2:	787b      	ldrb	r3, [r7, #1]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025c8:	887a      	ldrh	r2, [r7, #2]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025ce:	e002      	b.n	80025d6 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025d0:	887a      	ldrh	r2, [r7, #2]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr

080025e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025ea:	4b08      	ldr	r3, [pc, #32]	; (800260c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025ec:	695a      	ldr	r2, [r3, #20]
 80025ee:	88fb      	ldrh	r3, [r7, #6]
 80025f0:	4013      	ands	r3, r2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d006      	beq.n	8002604 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025f6:	4a05      	ldr	r2, [pc, #20]	; (800260c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025f8:	88fb      	ldrh	r3, [r7, #6]
 80025fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025fc:	88fb      	ldrh	r3, [r7, #6]
 80025fe:	4618      	mov	r0, r3
 8002600:	f003 ff38 	bl	8006474 <HAL_GPIO_EXTI_Callback>
  }
}
 8002604:	bf00      	nop
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40010400 	.word	0x40010400

08002610 <HAL_MspInit>:
  * @brief  Initialize the Global MSP.
  * @param  None
  * @retval None
  */
void HAL_MspInit(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* NOTE : This function is generated automatically by STM32CubeMX and eventually
            modified by the user
   */
}
 8002614:	bf00      	nop
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr

0800261c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002620:	4b03      	ldr	r3, [pc, #12]	; (8002630 <HAL_PWREx_GetVoltageRange+0x14>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002628:	4618      	mov	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr
 8002630:	40007000 	.word	0x40007000

08002634 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e3d8      	b.n	8002df8 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002646:	4b97      	ldr	r3, [pc, #604]	; (80028a4 <HAL_RCC_OscConfig+0x270>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 030c 	and.w	r3, r3, #12
 800264e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002650:	4b94      	ldr	r3, [pc, #592]	; (80028a4 <HAL_RCC_OscConfig+0x270>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f003 0303 	and.w	r3, r3, #3
 8002658:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0310 	and.w	r3, r3, #16
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 80e4 	beq.w	8002830 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d007      	beq.n	800267e <HAL_RCC_OscConfig+0x4a>
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	2b0c      	cmp	r3, #12
 8002672:	f040 808b 	bne.w	800278c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	2b01      	cmp	r3, #1
 800267a:	f040 8087 	bne.w	800278c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800267e:	4b89      	ldr	r3, [pc, #548]	; (80028a4 <HAL_RCC_OscConfig+0x270>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d005      	beq.n	8002696 <HAL_RCC_OscConfig+0x62>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e3b0      	b.n	8002df8 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a1a      	ldr	r2, [r3, #32]
 800269a:	4b82      	ldr	r3, [pc, #520]	; (80028a4 <HAL_RCC_OscConfig+0x270>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d004      	beq.n	80026b0 <HAL_RCC_OscConfig+0x7c>
 80026a6:	4b7f      	ldr	r3, [pc, #508]	; (80028a4 <HAL_RCC_OscConfig+0x270>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026ae:	e005      	b.n	80026bc <HAL_RCC_OscConfig+0x88>
 80026b0:	4b7c      	ldr	r3, [pc, #496]	; (80028a4 <HAL_RCC_OscConfig+0x270>)
 80026b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026b6:	091b      	lsrs	r3, r3, #4
 80026b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026bc:	4293      	cmp	r3, r2
 80026be:	d223      	bcs.n	8002708 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 fd6f 	bl	80031a8 <RCC_SetFlashLatencyFromMSIRange>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e391      	b.n	8002df8 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026d4:	4b73      	ldr	r3, [pc, #460]	; (80028a4 <HAL_RCC_OscConfig+0x270>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a72      	ldr	r2, [pc, #456]	; (80028a4 <HAL_RCC_OscConfig+0x270>)
 80026da:	f043 0308 	orr.w	r3, r3, #8
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	4b70      	ldr	r3, [pc, #448]	; (80028a4 <HAL_RCC_OscConfig+0x270>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	496d      	ldr	r1, [pc, #436]	; (80028a4 <HAL_RCC_OscConfig+0x270>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026f2:	4b6c      	ldr	r3, [pc, #432]	; (80028a4 <HAL_RCC_OscConfig+0x270>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	021b      	lsls	r3, r3, #8
 8002700:	4968      	ldr	r1, [pc, #416]	; (80028a4 <HAL_RCC_OscConfig+0x270>)
 8002702:	4313      	orrs	r3, r2
 8002704:	604b      	str	r3, [r1, #4]
 8002706:	e025      	b.n	8002754 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002708:	4b66      	ldr	r3, [pc, #408]	; (80028a4 <HAL_RCC_OscConfig+0x270>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a65      	ldr	r2, [pc, #404]	; (80028a4 <HAL_RCC_OscConfig+0x270>)
 800270e:	f043 0308 	orr.w	r3, r3, #8
 8002712:	6013      	str	r3, [r2, #0]
 8002714:	4b63      	ldr	r3, [pc, #396]	; (80028a4 <HAL_RCC_OscConfig+0x270>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	4960      	ldr	r1, [pc, #384]	; (80028a4 <HAL_RCC_OscConfig+0x270>)
 8002722:	4313      	orrs	r3, r2
 8002724:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002726:	4b5f      	ldr	r3, [pc, #380]	; (80028a4 <HAL_RCC_OscConfig+0x270>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	021b      	lsls	r3, r3, #8
 8002734:	495b      	ldr	r1, [pc, #364]	; (80028a4 <HAL_RCC_OscConfig+0x270>)
 8002736:	4313      	orrs	r3, r2
 8002738:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d109      	bne.n	8002754 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	4618      	mov	r0, r3
 8002746:	f000 fd2f 	bl	80031a8 <RCC_SetFlashLatencyFromMSIRange>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e351      	b.n	8002df8 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002754:	f000 fc38 	bl	8002fc8 <HAL_RCC_GetSysClockFreq>
 8002758:	4602      	mov	r2, r0
 800275a:	4b52      	ldr	r3, [pc, #328]	; (80028a4 <HAL_RCC_OscConfig+0x270>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	091b      	lsrs	r3, r3, #4
 8002760:	f003 030f 	and.w	r3, r3, #15
 8002764:	4950      	ldr	r1, [pc, #320]	; (80028a8 <HAL_RCC_OscConfig+0x274>)
 8002766:	5ccb      	ldrb	r3, [r1, r3]
 8002768:	f003 031f 	and.w	r3, r3, #31
 800276c:	fa22 f303 	lsr.w	r3, r2, r3
 8002770:	4a4e      	ldr	r2, [pc, #312]	; (80028ac <HAL_RCC_OscConfig+0x278>)
 8002772:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002774:	4b4e      	ldr	r3, [pc, #312]	; (80028b0 <HAL_RCC_OscConfig+0x27c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f002 fee5 	bl	8005548 <HAL_InitTick>
 800277e:	4603      	mov	r3, r0
 8002780:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002782:	7bfb      	ldrb	r3, [r7, #15]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d052      	beq.n	800282e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002788:	7bfb      	ldrb	r3, [r7, #15]
 800278a:	e335      	b.n	8002df8 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d032      	beq.n	80027fa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002794:	4b43      	ldr	r3, [pc, #268]	; (80028a4 <HAL_RCC_OscConfig+0x270>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a42      	ldr	r2, [pc, #264]	; (80028a4 <HAL_RCC_OscConfig+0x270>)
 800279a:	f043 0301 	orr.w	r3, r3, #1
 800279e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027a0:	f7ff fbfa 	bl	8001f98 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027a8:	f7ff fbf6 	bl	8001f98 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e31e      	b.n	8002df8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027ba:	4b3a      	ldr	r3, [pc, #232]	; (80028a4 <HAL_RCC_OscConfig+0x270>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0f0      	beq.n	80027a8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027c6:	4b37      	ldr	r3, [pc, #220]	; (80028a4 <HAL_RCC_OscConfig+0x270>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a36      	ldr	r2, [pc, #216]	; (80028a4 <HAL_RCC_OscConfig+0x270>)
 80027cc:	f043 0308 	orr.w	r3, r3, #8
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	4b34      	ldr	r3, [pc, #208]	; (80028a4 <HAL_RCC_OscConfig+0x270>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	4931      	ldr	r1, [pc, #196]	; (80028a4 <HAL_RCC_OscConfig+0x270>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027e4:	4b2f      	ldr	r3, [pc, #188]	; (80028a4 <HAL_RCC_OscConfig+0x270>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	021b      	lsls	r3, r3, #8
 80027f2:	492c      	ldr	r1, [pc, #176]	; (80028a4 <HAL_RCC_OscConfig+0x270>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	604b      	str	r3, [r1, #4]
 80027f8:	e01a      	b.n	8002830 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027fa:	4b2a      	ldr	r3, [pc, #168]	; (80028a4 <HAL_RCC_OscConfig+0x270>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a29      	ldr	r2, [pc, #164]	; (80028a4 <HAL_RCC_OscConfig+0x270>)
 8002800:	f023 0301 	bic.w	r3, r3, #1
 8002804:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002806:	f7ff fbc7 	bl	8001f98 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800280e:	f7ff fbc3 	bl	8001f98 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e2eb      	b.n	8002df8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002820:	4b20      	ldr	r3, [pc, #128]	; (80028a4 <HAL_RCC_OscConfig+0x270>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1f0      	bne.n	800280e <HAL_RCC_OscConfig+0x1da>
 800282c:	e000      	b.n	8002830 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800282e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b00      	cmp	r3, #0
 800283a:	d074      	beq.n	8002926 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	2b08      	cmp	r3, #8
 8002840:	d005      	beq.n	800284e <HAL_RCC_OscConfig+0x21a>
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	2b0c      	cmp	r3, #12
 8002846:	d10e      	bne.n	8002866 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	2b03      	cmp	r3, #3
 800284c:	d10b      	bne.n	8002866 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800284e:	4b15      	ldr	r3, [pc, #84]	; (80028a4 <HAL_RCC_OscConfig+0x270>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d064      	beq.n	8002924 <HAL_RCC_OscConfig+0x2f0>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d160      	bne.n	8002924 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e2c8      	b.n	8002df8 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800286e:	d106      	bne.n	800287e <HAL_RCC_OscConfig+0x24a>
 8002870:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <HAL_RCC_OscConfig+0x270>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a0b      	ldr	r2, [pc, #44]	; (80028a4 <HAL_RCC_OscConfig+0x270>)
 8002876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	e026      	b.n	80028cc <HAL_RCC_OscConfig+0x298>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002886:	d115      	bne.n	80028b4 <HAL_RCC_OscConfig+0x280>
 8002888:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <HAL_RCC_OscConfig+0x270>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a05      	ldr	r2, [pc, #20]	; (80028a4 <HAL_RCC_OscConfig+0x270>)
 800288e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002892:	6013      	str	r3, [r2, #0]
 8002894:	4b03      	ldr	r3, [pc, #12]	; (80028a4 <HAL_RCC_OscConfig+0x270>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a02      	ldr	r2, [pc, #8]	; (80028a4 <HAL_RCC_OscConfig+0x270>)
 800289a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800289e:	6013      	str	r3, [r2, #0]
 80028a0:	e014      	b.n	80028cc <HAL_RCC_OscConfig+0x298>
 80028a2:	bf00      	nop
 80028a4:	40021000 	.word	0x40021000
 80028a8:	080085d0 	.word	0x080085d0
 80028ac:	2000001c 	.word	0x2000001c
 80028b0:	20000010 	.word	0x20000010
 80028b4:	4ba0      	ldr	r3, [pc, #640]	; (8002b38 <HAL_RCC_OscConfig+0x504>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a9f      	ldr	r2, [pc, #636]	; (8002b38 <HAL_RCC_OscConfig+0x504>)
 80028ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028be:	6013      	str	r3, [r2, #0]
 80028c0:	4b9d      	ldr	r3, [pc, #628]	; (8002b38 <HAL_RCC_OscConfig+0x504>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a9c      	ldr	r2, [pc, #624]	; (8002b38 <HAL_RCC_OscConfig+0x504>)
 80028c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d013      	beq.n	80028fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d4:	f7ff fb60 	bl	8001f98 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028dc:	f7ff fb5c 	bl	8001f98 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b64      	cmp	r3, #100	; 0x64
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e284      	b.n	8002df8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028ee:	4b92      	ldr	r3, [pc, #584]	; (8002b38 <HAL_RCC_OscConfig+0x504>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0x2a8>
 80028fa:	e014      	b.n	8002926 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fc:	f7ff fb4c 	bl	8001f98 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002904:	f7ff fb48 	bl	8001f98 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b64      	cmp	r3, #100	; 0x64
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e270      	b.n	8002df8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002916:	4b88      	ldr	r3, [pc, #544]	; (8002b38 <HAL_RCC_OscConfig+0x504>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f0      	bne.n	8002904 <HAL_RCC_OscConfig+0x2d0>
 8002922:	e000      	b.n	8002926 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d060      	beq.n	80029f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	2b04      	cmp	r3, #4
 8002936:	d005      	beq.n	8002944 <HAL_RCC_OscConfig+0x310>
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	2b0c      	cmp	r3, #12
 800293c:	d119      	bne.n	8002972 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2b02      	cmp	r3, #2
 8002942:	d116      	bne.n	8002972 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002944:	4b7c      	ldr	r3, [pc, #496]	; (8002b38 <HAL_RCC_OscConfig+0x504>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <HAL_RCC_OscConfig+0x328>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e24d      	b.n	8002df8 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295c:	4b76      	ldr	r3, [pc, #472]	; (8002b38 <HAL_RCC_OscConfig+0x504>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	061b      	lsls	r3, r3, #24
 800296a:	4973      	ldr	r1, [pc, #460]	; (8002b38 <HAL_RCC_OscConfig+0x504>)
 800296c:	4313      	orrs	r3, r2
 800296e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002970:	e040      	b.n	80029f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d023      	beq.n	80029c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800297a:	4b6f      	ldr	r3, [pc, #444]	; (8002b38 <HAL_RCC_OscConfig+0x504>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a6e      	ldr	r2, [pc, #440]	; (8002b38 <HAL_RCC_OscConfig+0x504>)
 8002980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002984:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002986:	f7ff fb07 	bl	8001f98 <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800298e:	f7ff fb03 	bl	8001f98 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e22b      	b.n	8002df8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029a0:	4b65      	ldr	r3, [pc, #404]	; (8002b38 <HAL_RCC_OscConfig+0x504>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d0f0      	beq.n	800298e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ac:	4b62      	ldr	r3, [pc, #392]	; (8002b38 <HAL_RCC_OscConfig+0x504>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	061b      	lsls	r3, r3, #24
 80029ba:	495f      	ldr	r1, [pc, #380]	; (8002b38 <HAL_RCC_OscConfig+0x504>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	604b      	str	r3, [r1, #4]
 80029c0:	e018      	b.n	80029f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029c2:	4b5d      	ldr	r3, [pc, #372]	; (8002b38 <HAL_RCC_OscConfig+0x504>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a5c      	ldr	r2, [pc, #368]	; (8002b38 <HAL_RCC_OscConfig+0x504>)
 80029c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ce:	f7ff fae3 	bl	8001f98 <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029d6:	f7ff fadf 	bl	8001f98 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e207      	b.n	8002df8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029e8:	4b53      	ldr	r3, [pc, #332]	; (8002b38 <HAL_RCC_OscConfig+0x504>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1f0      	bne.n	80029d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d03c      	beq.n	8002a7a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d01c      	beq.n	8002a42 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a08:	4b4b      	ldr	r3, [pc, #300]	; (8002b38 <HAL_RCC_OscConfig+0x504>)
 8002a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a0e:	4a4a      	ldr	r2, [pc, #296]	; (8002b38 <HAL_RCC_OscConfig+0x504>)
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a18:	f7ff fabe 	bl	8001f98 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a20:	f7ff faba 	bl	8001f98 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e1e2      	b.n	8002df8 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a32:	4b41      	ldr	r3, [pc, #260]	; (8002b38 <HAL_RCC_OscConfig+0x504>)
 8002a34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0ef      	beq.n	8002a20 <HAL_RCC_OscConfig+0x3ec>
 8002a40:	e01b      	b.n	8002a7a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a42:	4b3d      	ldr	r3, [pc, #244]	; (8002b38 <HAL_RCC_OscConfig+0x504>)
 8002a44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a48:	4a3b      	ldr	r2, [pc, #236]	; (8002b38 <HAL_RCC_OscConfig+0x504>)
 8002a4a:	f023 0301 	bic.w	r3, r3, #1
 8002a4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a52:	f7ff faa1 	bl	8001f98 <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a5a:	f7ff fa9d 	bl	8001f98 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e1c5      	b.n	8002df8 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a6c:	4b32      	ldr	r3, [pc, #200]	; (8002b38 <HAL_RCC_OscConfig+0x504>)
 8002a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1ef      	bne.n	8002a5a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0304 	and.w	r3, r3, #4
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 80a6 	beq.w	8002bd4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a8c:	4b2a      	ldr	r3, [pc, #168]	; (8002b38 <HAL_RCC_OscConfig+0x504>)
 8002a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10d      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a98:	4b27      	ldr	r3, [pc, #156]	; (8002b38 <HAL_RCC_OscConfig+0x504>)
 8002a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9c:	4a26      	ldr	r2, [pc, #152]	; (8002b38 <HAL_RCC_OscConfig+0x504>)
 8002a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aa2:	6593      	str	r3, [r2, #88]	; 0x58
 8002aa4:	4b24      	ldr	r3, [pc, #144]	; (8002b38 <HAL_RCC_OscConfig+0x504>)
 8002aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aac:	60bb      	str	r3, [r7, #8]
 8002aae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ab4:	4b21      	ldr	r3, [pc, #132]	; (8002b3c <HAL_RCC_OscConfig+0x508>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d118      	bne.n	8002af2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ac0:	4b1e      	ldr	r3, [pc, #120]	; (8002b3c <HAL_RCC_OscConfig+0x508>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a1d      	ldr	r2, [pc, #116]	; (8002b3c <HAL_RCC_OscConfig+0x508>)
 8002ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002acc:	f7ff fa64 	bl	8001f98 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ad4:	f7ff fa60 	bl	8001f98 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e188      	b.n	8002df8 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ae6:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <HAL_RCC_OscConfig+0x508>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0f0      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d108      	bne.n	8002b0c <HAL_RCC_OscConfig+0x4d8>
 8002afa:	4b0f      	ldr	r3, [pc, #60]	; (8002b38 <HAL_RCC_OscConfig+0x504>)
 8002afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b00:	4a0d      	ldr	r2, [pc, #52]	; (8002b38 <HAL_RCC_OscConfig+0x504>)
 8002b02:	f043 0301 	orr.w	r3, r3, #1
 8002b06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b0a:	e029      	b.n	8002b60 <HAL_RCC_OscConfig+0x52c>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	2b05      	cmp	r3, #5
 8002b12:	d115      	bne.n	8002b40 <HAL_RCC_OscConfig+0x50c>
 8002b14:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <HAL_RCC_OscConfig+0x504>)
 8002b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1a:	4a07      	ldr	r2, [pc, #28]	; (8002b38 <HAL_RCC_OscConfig+0x504>)
 8002b1c:	f043 0304 	orr.w	r3, r3, #4
 8002b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b24:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <HAL_RCC_OscConfig+0x504>)
 8002b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2a:	4a03      	ldr	r2, [pc, #12]	; (8002b38 <HAL_RCC_OscConfig+0x504>)
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b34:	e014      	b.n	8002b60 <HAL_RCC_OscConfig+0x52c>
 8002b36:	bf00      	nop
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	40007000 	.word	0x40007000
 8002b40:	4b91      	ldr	r3, [pc, #580]	; (8002d88 <HAL_RCC_OscConfig+0x754>)
 8002b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b46:	4a90      	ldr	r2, [pc, #576]	; (8002d88 <HAL_RCC_OscConfig+0x754>)
 8002b48:	f023 0301 	bic.w	r3, r3, #1
 8002b4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b50:	4b8d      	ldr	r3, [pc, #564]	; (8002d88 <HAL_RCC_OscConfig+0x754>)
 8002b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b56:	4a8c      	ldr	r2, [pc, #560]	; (8002d88 <HAL_RCC_OscConfig+0x754>)
 8002b58:	f023 0304 	bic.w	r3, r3, #4
 8002b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d016      	beq.n	8002b96 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b68:	f7ff fa16 	bl	8001f98 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b6e:	e00a      	b.n	8002b86 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b70:	f7ff fa12 	bl	8001f98 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e138      	b.n	8002df8 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b86:	4b80      	ldr	r3, [pc, #512]	; (8002d88 <HAL_RCC_OscConfig+0x754>)
 8002b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0ed      	beq.n	8002b70 <HAL_RCC_OscConfig+0x53c>
 8002b94:	e015      	b.n	8002bc2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b96:	f7ff f9ff 	bl	8001f98 <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b9c:	e00a      	b.n	8002bb4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b9e:	f7ff f9fb 	bl	8001f98 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e121      	b.n	8002df8 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bb4:	4b74      	ldr	r3, [pc, #464]	; (8002d88 <HAL_RCC_OscConfig+0x754>)
 8002bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1ed      	bne.n	8002b9e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bc2:	7ffb      	ldrb	r3, [r7, #31]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d105      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc8:	4b6f      	ldr	r3, [pc, #444]	; (8002d88 <HAL_RCC_OscConfig+0x754>)
 8002bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bcc:	4a6e      	ldr	r2, [pc, #440]	; (8002d88 <HAL_RCC_OscConfig+0x754>)
 8002bce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bd2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 810c 	beq.w	8002df6 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	f040 80d4 	bne.w	8002d90 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002be8:	4b67      	ldr	r3, [pc, #412]	; (8002d88 <HAL_RCC_OscConfig+0x754>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f003 0203 	and.w	r2, r3, #3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d130      	bne.n	8002c5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	3b01      	subs	r3, #1
 8002c08:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d127      	bne.n	8002c5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c18:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d11f      	bne.n	8002c5e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c28:	2a07      	cmp	r2, #7
 8002c2a:	bf14      	ite	ne
 8002c2c:	2201      	movne	r2, #1
 8002c2e:	2200      	moveq	r2, #0
 8002c30:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d113      	bne.n	8002c5e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c40:	085b      	lsrs	r3, r3, #1
 8002c42:	3b01      	subs	r3, #1
 8002c44:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d109      	bne.n	8002c5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	085b      	lsrs	r3, r3, #1
 8002c56:	3b01      	subs	r3, #1
 8002c58:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d06e      	beq.n	8002d3c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	2b0c      	cmp	r3, #12
 8002c62:	d069      	beq.n	8002d38 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c64:	4b48      	ldr	r3, [pc, #288]	; (8002d88 <HAL_RCC_OscConfig+0x754>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d105      	bne.n	8002c7c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c70:	4b45      	ldr	r3, [pc, #276]	; (8002d88 <HAL_RCC_OscConfig+0x754>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0bb      	b.n	8002df8 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c80:	4b41      	ldr	r3, [pc, #260]	; (8002d88 <HAL_RCC_OscConfig+0x754>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a40      	ldr	r2, [pc, #256]	; (8002d88 <HAL_RCC_OscConfig+0x754>)
 8002c86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c8a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c8c:	f7ff f984 	bl	8001f98 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c94:	f7ff f980 	bl	8001f98 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e0a8      	b.n	8002df8 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ca6:	4b38      	ldr	r3, [pc, #224]	; (8002d88 <HAL_RCC_OscConfig+0x754>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f0      	bne.n	8002c94 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cb2:	4b35      	ldr	r3, [pc, #212]	; (8002d88 <HAL_RCC_OscConfig+0x754>)
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	4b35      	ldr	r3, [pc, #212]	; (8002d8c <HAL_RCC_OscConfig+0x758>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002cc2:	3a01      	subs	r2, #1
 8002cc4:	0112      	lsls	r2, r2, #4
 8002cc6:	4311      	orrs	r1, r2
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ccc:	0212      	lsls	r2, r2, #8
 8002cce:	4311      	orrs	r1, r2
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002cd4:	0852      	lsrs	r2, r2, #1
 8002cd6:	3a01      	subs	r2, #1
 8002cd8:	0552      	lsls	r2, r2, #21
 8002cda:	4311      	orrs	r1, r2
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ce0:	0852      	lsrs	r2, r2, #1
 8002ce2:	3a01      	subs	r2, #1
 8002ce4:	0652      	lsls	r2, r2, #25
 8002ce6:	4311      	orrs	r1, r2
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cec:	0912      	lsrs	r2, r2, #4
 8002cee:	0452      	lsls	r2, r2, #17
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	4925      	ldr	r1, [pc, #148]	; (8002d88 <HAL_RCC_OscConfig+0x754>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002cf8:	4b23      	ldr	r3, [pc, #140]	; (8002d88 <HAL_RCC_OscConfig+0x754>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a22      	ldr	r2, [pc, #136]	; (8002d88 <HAL_RCC_OscConfig+0x754>)
 8002cfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d02:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d04:	4b20      	ldr	r3, [pc, #128]	; (8002d88 <HAL_RCC_OscConfig+0x754>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	4a1f      	ldr	r2, [pc, #124]	; (8002d88 <HAL_RCC_OscConfig+0x754>)
 8002d0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d0e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d10:	f7ff f942 	bl	8001f98 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d18:	f7ff f93e 	bl	8001f98 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e066      	b.n	8002df8 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d2a:	4b17      	ldr	r3, [pc, #92]	; (8002d88 <HAL_RCC_OscConfig+0x754>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0f0      	beq.n	8002d18 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d36:	e05e      	b.n	8002df6 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e05d      	b.n	8002df8 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d3c:	4b12      	ldr	r3, [pc, #72]	; (8002d88 <HAL_RCC_OscConfig+0x754>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d156      	bne.n	8002df6 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d48:	4b0f      	ldr	r3, [pc, #60]	; (8002d88 <HAL_RCC_OscConfig+0x754>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a0e      	ldr	r2, [pc, #56]	; (8002d88 <HAL_RCC_OscConfig+0x754>)
 8002d4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d52:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d54:	4b0c      	ldr	r3, [pc, #48]	; (8002d88 <HAL_RCC_OscConfig+0x754>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	4a0b      	ldr	r2, [pc, #44]	; (8002d88 <HAL_RCC_OscConfig+0x754>)
 8002d5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d5e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d60:	f7ff f91a 	bl	8001f98 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d68:	f7ff f916 	bl	8001f98 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e03e      	b.n	8002df8 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d7a:	4b03      	ldr	r3, [pc, #12]	; (8002d88 <HAL_RCC_OscConfig+0x754>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0f0      	beq.n	8002d68 <HAL_RCC_OscConfig+0x734>
 8002d86:	e036      	b.n	8002df6 <HAL_RCC_OscConfig+0x7c2>
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	2b0c      	cmp	r3, #12
 8002d94:	d02d      	beq.n	8002df2 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d96:	4b1a      	ldr	r3, [pc, #104]	; (8002e00 <HAL_RCC_OscConfig+0x7cc>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a19      	ldr	r2, [pc, #100]	; (8002e00 <HAL_RCC_OscConfig+0x7cc>)
 8002d9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002da0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002da2:	4b17      	ldr	r3, [pc, #92]	; (8002e00 <HAL_RCC_OscConfig+0x7cc>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d105      	bne.n	8002dba <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002dae:	4b14      	ldr	r3, [pc, #80]	; (8002e00 <HAL_RCC_OscConfig+0x7cc>)
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	4a13      	ldr	r2, [pc, #76]	; (8002e00 <HAL_RCC_OscConfig+0x7cc>)
 8002db4:	f023 0303 	bic.w	r3, r3, #3
 8002db8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002dba:	4b11      	ldr	r3, [pc, #68]	; (8002e00 <HAL_RCC_OscConfig+0x7cc>)
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	4a10      	ldr	r2, [pc, #64]	; (8002e00 <HAL_RCC_OscConfig+0x7cc>)
 8002dc0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002dc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dc8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dca:	f7ff f8e5 	bl	8001f98 <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd2:	f7ff f8e1 	bl	8001f98 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e009      	b.n	8002df8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002de4:	4b06      	ldr	r3, [pc, #24]	; (8002e00 <HAL_RCC_OscConfig+0x7cc>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1f0      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x79e>
 8002df0:	e001      	b.n	8002df6 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e000      	b.n	8002df8 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3720      	adds	r7, #32
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40021000 	.word	0x40021000

08002e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e0c8      	b.n	8002faa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e18:	4b66      	ldr	r3, [pc, #408]	; (8002fb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d910      	bls.n	8002e48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e26:	4b63      	ldr	r3, [pc, #396]	; (8002fb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f023 0207 	bic.w	r2, r3, #7
 8002e2e:	4961      	ldr	r1, [pc, #388]	; (8002fb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e36:	4b5f      	ldr	r3, [pc, #380]	; (8002fb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d001      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e0b0      	b.n	8002faa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d04c      	beq.n	8002eee <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	2b03      	cmp	r3, #3
 8002e5a:	d107      	bne.n	8002e6c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e5c:	4b56      	ldr	r3, [pc, #344]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d121      	bne.n	8002eac <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e09e      	b.n	8002faa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d107      	bne.n	8002e84 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e74:	4b50      	ldr	r3, [pc, #320]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d115      	bne.n	8002eac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e092      	b.n	8002faa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d107      	bne.n	8002e9c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e8c:	4b4a      	ldr	r3, [pc, #296]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d109      	bne.n	8002eac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e086      	b.n	8002faa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e9c:	4b46      	ldr	r3, [pc, #280]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e07e      	b.n	8002faa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002eac:	4b42      	ldr	r3, [pc, #264]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f023 0203 	bic.w	r2, r3, #3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	493f      	ldr	r1, [pc, #252]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ebe:	f7ff f86b 	bl	8001f98 <HAL_GetTick>
 8002ec2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec4:	e00a      	b.n	8002edc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec6:	f7ff f867 	bl	8001f98 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e066      	b.n	8002faa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002edc:	4b36      	ldr	r3, [pc, #216]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 020c 	and.w	r2, r3, #12
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d1eb      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d008      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002efa:	4b2f      	ldr	r3, [pc, #188]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	492c      	ldr	r1, [pc, #176]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f0c:	4b29      	ldr	r3, [pc, #164]	; (8002fb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d210      	bcs.n	8002f3c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1a:	4b26      	ldr	r3, [pc, #152]	; (8002fb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f023 0207 	bic.w	r2, r3, #7
 8002f22:	4924      	ldr	r1, [pc, #144]	; (8002fb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2a:	4b22      	ldr	r3, [pc, #136]	; (8002fb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d001      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e036      	b.n	8002faa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d008      	beq.n	8002f5a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f48:	4b1b      	ldr	r3, [pc, #108]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	4918      	ldr	r1, [pc, #96]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0308 	and.w	r3, r3, #8
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d009      	beq.n	8002f7a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f66:	4b14      	ldr	r3, [pc, #80]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	4910      	ldr	r1, [pc, #64]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f7a:	f000 f825 	bl	8002fc8 <HAL_RCC_GetSysClockFreq>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	4b0d      	ldr	r3, [pc, #52]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	091b      	lsrs	r3, r3, #4
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	490c      	ldr	r1, [pc, #48]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002f8c:	5ccb      	ldrb	r3, [r1, r3]
 8002f8e:	f003 031f 	and.w	r3, r3, #31
 8002f92:	fa22 f303 	lsr.w	r3, r2, r3
 8002f96:	4a0a      	ldr	r2, [pc, #40]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f9a:	4b0a      	ldr	r3, [pc, #40]	; (8002fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f002 fad2 	bl	8005548 <HAL_InitTick>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	72fb      	strb	r3, [r7, #11]

  return status;
 8002fa8:	7afb      	ldrb	r3, [r7, #11]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40022000 	.word	0x40022000
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	080085d0 	.word	0x080085d0
 8002fc0:	2000001c 	.word	0x2000001c
 8002fc4:	20000010 	.word	0x20000010

08002fc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b089      	sub	sp, #36	; 0x24
 8002fcc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	61fb      	str	r3, [r7, #28]
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fd6:	4b3d      	ldr	r3, [pc, #244]	; (80030cc <HAL_RCC_GetSysClockFreq+0x104>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 030c 	and.w	r3, r3, #12
 8002fde:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fe0:	4b3a      	ldr	r3, [pc, #232]	; (80030cc <HAL_RCC_GetSysClockFreq+0x104>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d005      	beq.n	8002ffc <HAL_RCC_GetSysClockFreq+0x34>
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	2b0c      	cmp	r3, #12
 8002ff4:	d121      	bne.n	800303a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d11e      	bne.n	800303a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ffc:	4b33      	ldr	r3, [pc, #204]	; (80030cc <HAL_RCC_GetSysClockFreq+0x104>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0308 	and.w	r3, r3, #8
 8003004:	2b00      	cmp	r3, #0
 8003006:	d107      	bne.n	8003018 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003008:	4b30      	ldr	r3, [pc, #192]	; (80030cc <HAL_RCC_GetSysClockFreq+0x104>)
 800300a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800300e:	0a1b      	lsrs	r3, r3, #8
 8003010:	f003 030f 	and.w	r3, r3, #15
 8003014:	61fb      	str	r3, [r7, #28]
 8003016:	e005      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003018:	4b2c      	ldr	r3, [pc, #176]	; (80030cc <HAL_RCC_GetSysClockFreq+0x104>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	091b      	lsrs	r3, r3, #4
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003024:	4a2a      	ldr	r2, [pc, #168]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800302c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10d      	bne.n	8003050 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003038:	e00a      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	2b04      	cmp	r3, #4
 800303e:	d102      	bne.n	8003046 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003040:	4b24      	ldr	r3, [pc, #144]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003042:	61bb      	str	r3, [r7, #24]
 8003044:	e004      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	2b08      	cmp	r3, #8
 800304a:	d101      	bne.n	8003050 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800304c:	4b22      	ldr	r3, [pc, #136]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x110>)
 800304e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	2b0c      	cmp	r3, #12
 8003054:	d134      	bne.n	80030c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003056:	4b1d      	ldr	r3, [pc, #116]	; (80030cc <HAL_RCC_GetSysClockFreq+0x104>)
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	2b02      	cmp	r3, #2
 8003064:	d003      	beq.n	800306e <HAL_RCC_GetSysClockFreq+0xa6>
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	2b03      	cmp	r3, #3
 800306a:	d003      	beq.n	8003074 <HAL_RCC_GetSysClockFreq+0xac>
 800306c:	e005      	b.n	800307a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800306e:	4b19      	ldr	r3, [pc, #100]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003070:	617b      	str	r3, [r7, #20]
      break;
 8003072:	e005      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003074:	4b18      	ldr	r3, [pc, #96]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003076:	617b      	str	r3, [r7, #20]
      break;
 8003078:	e002      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	617b      	str	r3, [r7, #20]
      break;
 800307e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003080:	4b12      	ldr	r3, [pc, #72]	; (80030cc <HAL_RCC_GetSysClockFreq+0x104>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	091b      	lsrs	r3, r3, #4
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	3301      	adds	r3, #1
 800308c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800308e:	4b0f      	ldr	r3, [pc, #60]	; (80030cc <HAL_RCC_GetSysClockFreq+0x104>)
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	0a1b      	lsrs	r3, r3, #8
 8003094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	fb03 f202 	mul.w	r2, r3, r2
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030a6:	4b09      	ldr	r3, [pc, #36]	; (80030cc <HAL_RCC_GetSysClockFreq+0x104>)
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	0e5b      	lsrs	r3, r3, #25
 80030ac:	f003 0303 	and.w	r3, r3, #3
 80030b0:	3301      	adds	r3, #1
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80030be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80030c0:	69bb      	ldr	r3, [r7, #24]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3724      	adds	r7, #36	; 0x24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr
 80030cc:	40021000 	.word	0x40021000
 80030d0:	080085e8 	.word	0x080085e8
 80030d4:	00f42400 	.word	0x00f42400
 80030d8:	007a1200 	.word	0x007a1200

080030dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030e0:	4b02      	ldr	r3, [pc, #8]	; (80030ec <HAL_RCC_GetHCLKFreq+0x10>)
 80030e2:	681b      	ldr	r3, [r3, #0]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bc80      	pop	{r7}
 80030ea:	4770      	bx	lr
 80030ec:	2000001c 	.word	0x2000001c

080030f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030f4:	f7ff fff2 	bl	80030dc <HAL_RCC_GetHCLKFreq>
 80030f8:	4602      	mov	r2, r0
 80030fa:	4b06      	ldr	r3, [pc, #24]	; (8003114 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	0a1b      	lsrs	r3, r3, #8
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	4904      	ldr	r1, [pc, #16]	; (8003118 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003106:	5ccb      	ldrb	r3, [r1, r3]
 8003108:	f003 031f 	and.w	r3, r3, #31
 800310c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003110:	4618      	mov	r0, r3
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40021000 	.word	0x40021000
 8003118:	080085e0 	.word	0x080085e0

0800311c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003120:	f7ff ffdc 	bl	80030dc <HAL_RCC_GetHCLKFreq>
 8003124:	4602      	mov	r2, r0
 8003126:	4b06      	ldr	r3, [pc, #24]	; (8003140 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	0adb      	lsrs	r3, r3, #11
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	4904      	ldr	r1, [pc, #16]	; (8003144 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003132:	5ccb      	ldrb	r3, [r1, r3]
 8003134:	f003 031f 	and.w	r3, r3, #31
 8003138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800313c:	4618      	mov	r0, r3
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40021000 	.word	0x40021000
 8003144:	080085e0 	.word	0x080085e0

08003148 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	220f      	movs	r2, #15
 8003156:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003158:	4b11      	ldr	r3, [pc, #68]	; (80031a0 <HAL_RCC_GetClockConfig+0x58>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 0203 	and.w	r2, r3, #3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003164:	4b0e      	ldr	r3, [pc, #56]	; (80031a0 <HAL_RCC_GetClockConfig+0x58>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003170:	4b0b      	ldr	r3, [pc, #44]	; (80031a0 <HAL_RCC_GetClockConfig+0x58>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800317c:	4b08      	ldr	r3, [pc, #32]	; (80031a0 <HAL_RCC_GetClockConfig+0x58>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	08db      	lsrs	r3, r3, #3
 8003182:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800318a:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <HAL_RCC_GetClockConfig+0x5c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0207 	and.w	r2, r3, #7
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	601a      	str	r2, [r3, #0]
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	bc80      	pop	{r7}
 800319e:	4770      	bx	lr
 80031a0:	40021000 	.word	0x40021000
 80031a4:	40022000 	.word	0x40022000

080031a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80031b0:	2300      	movs	r3, #0
 80031b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80031b4:	4b2a      	ldr	r3, [pc, #168]	; (8003260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d003      	beq.n	80031c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80031c0:	f7ff fa2c 	bl	800261c <HAL_PWREx_GetVoltageRange>
 80031c4:	6178      	str	r0, [r7, #20]
 80031c6:	e014      	b.n	80031f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80031c8:	4b25      	ldr	r3, [pc, #148]	; (8003260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031cc:	4a24      	ldr	r2, [pc, #144]	; (8003260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d2:	6593      	str	r3, [r2, #88]	; 0x58
 80031d4:	4b22      	ldr	r3, [pc, #136]	; (8003260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80031e0:	f7ff fa1c 	bl	800261c <HAL_PWREx_GetVoltageRange>
 80031e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80031e6:	4b1e      	ldr	r3, [pc, #120]	; (8003260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ea:	4a1d      	ldr	r2, [pc, #116]	; (8003260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031f8:	d10b      	bne.n	8003212 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b80      	cmp	r3, #128	; 0x80
 80031fe:	d919      	bls.n	8003234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2ba0      	cmp	r3, #160	; 0xa0
 8003204:	d902      	bls.n	800320c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003206:	2302      	movs	r3, #2
 8003208:	613b      	str	r3, [r7, #16]
 800320a:	e013      	b.n	8003234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800320c:	2301      	movs	r3, #1
 800320e:	613b      	str	r3, [r7, #16]
 8003210:	e010      	b.n	8003234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b80      	cmp	r3, #128	; 0x80
 8003216:	d902      	bls.n	800321e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003218:	2303      	movs	r3, #3
 800321a:	613b      	str	r3, [r7, #16]
 800321c:	e00a      	b.n	8003234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b80      	cmp	r3, #128	; 0x80
 8003222:	d102      	bne.n	800322a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003224:	2302      	movs	r3, #2
 8003226:	613b      	str	r3, [r7, #16]
 8003228:	e004      	b.n	8003234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b70      	cmp	r3, #112	; 0x70
 800322e:	d101      	bne.n	8003234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003230:	2301      	movs	r3, #1
 8003232:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003234:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f023 0207 	bic.w	r2, r3, #7
 800323c:	4909      	ldr	r1, [pc, #36]	; (8003264 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	4313      	orrs	r3, r2
 8003242:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003244:	4b07      	ldr	r3, [pc, #28]	; (8003264 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	429a      	cmp	r2, r3
 8003250:	d001      	beq.n	8003256 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e000      	b.n	8003258 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3718      	adds	r7, #24
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40021000 	.word	0x40021000
 8003264:	40022000 	.word	0x40022000

08003268 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e0be      	b.n	80033f8 <HAL_SPI_Init+0x190>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	2b00      	cmp	r3, #0
 8003280:	d108      	bne.n	8003294 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800328a:	d009      	beq.n	80032a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	61da      	str	r2, [r3, #28]
 8003292:	e005      	b.n	80032a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d106      	bne.n	80032ba <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f8cb 	bl	8003450 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2202      	movs	r2, #2
 80032be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032d0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032da:	d902      	bls.n	80032e2 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80032dc:	2300      	movs	r3, #0
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	e002      	b.n	80032e8 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80032e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032e6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80032f0:	d007      	beq.n	8003302 <HAL_SPI_Init+0x9a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032fa:	d002      	beq.n	8003302 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	431a      	orrs	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	431a      	orrs	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003330:	431a      	orrs	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800333a:	431a      	orrs	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003344:	ea42 0103 	orr.w	r1, r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003360:	d11b      	bne.n	800339a <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10b      	bne.n	8003382 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003372:	d903      	bls.n	800337c <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2202      	movs	r2, #2
 8003378:	631a      	str	r2, [r3, #48]	; 0x30
 800337a:	e002      	b.n	8003382 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	2b02      	cmp	r3, #2
 8003388:	d107      	bne.n	800339a <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003398:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	0c1b      	lsrs	r3, r3, #16
 80033a0:	f003 0204 	and.w	r2, r3, #4
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	f003 0310 	and.w	r3, r3, #16
 80033ac:	431a      	orrs	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80033c0:	ea42 0103 	orr.w	r1, r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033da:	d105      	bne.n	80033e8 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	b292      	uxth	r2, r2
 80033e6:	611a      	str	r2, [r3, #16]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e01a      	b.n	8003448 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2202      	movs	r2, #2
 8003416:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003428:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f819 	bl	8003462 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3708      	adds	r7, #8
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	bc80      	pop	{r7}
 8003460:	4770      	bx	lr

08003462 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8003462:	b480      	push	{r7}
 8003464:	b083      	sub	sp, #12
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr

08003474 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b08c      	sub	sp, #48	; 0x30
 8003478:	af02      	add	r7, sp, #8
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	603b      	str	r3, [r7, #0]
 8003480:	4613      	mov	r3, r2
 8003482:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8003484:	2300      	movs	r3, #0
 8003486:	61bb      	str	r3, [r7, #24]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003488:	2300      	movs	r3, #0
 800348a:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800348c:	2300      	movs	r3, #0
 800348e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800349a:	d112      	bne.n	80034c2 <HAL_SPI_Receive+0x4e>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10e      	bne.n	80034c2 <HAL_SPI_Receive+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2204      	movs	r2, #4
 80034a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80034ac:	88fa      	ldrh	r2, [r7, #6]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	4613      	mov	r3, r2
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	68b9      	ldr	r1, [r7, #8]
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f000 f9c4 	bl	8003846 <HAL_SPI_TransmitReceive>
 80034be:	4603      	mov	r3, r0
 80034c0:	e1bd      	b.n	800383e <HAL_SPI_Receive+0x3ca>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <HAL_SPI_Receive+0x5c>
 80034cc:	2302      	movs	r3, #2
 80034ce:	e1b6      	b.n	800383e <HAL_SPI_Receive+0x3ca>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034d8:	f7fe fd5e 	bl	8001f98 <HAL_GetTick>
 80034dc:	6238      	str	r0, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d003      	beq.n	80034f2 <HAL_SPI_Receive+0x7e>
  {
    errorcode = HAL_BUSY;
 80034ea:	2302      	movs	r3, #2
 80034ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 80034f0:	e19b      	b.n	800382a <HAL_SPI_Receive+0x3b6>
  }

  if ((pData == NULL) || (Size == 0U))
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d002      	beq.n	80034fe <HAL_SPI_Receive+0x8a>
 80034f8:	88fb      	ldrh	r3, [r7, #6]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d103      	bne.n	8003506 <HAL_SPI_Receive+0x92>
  {
    errorcode = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8003504:	e191      	b.n	800382a <HAL_SPI_Receive+0x3b6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2204      	movs	r2, #4
 800350a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	88fa      	ldrh	r2, [r7, #6]
 800351e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	88fa      	ldrh	r2, [r7, #6]
 8003526:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003550:	d118      	bne.n	8003584 <HAL_SPI_Receive+0x110>
  {
    SPI_RESET_CRC(hspi);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003570:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003578:	b29b      	uxth	r3, r3
 800357a:	3b01      	subs	r3, #1
 800357c:	b29a      	uxth	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800358c:	d908      	bls.n	80035a0 <HAL_SPI_Receive+0x12c>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800359c:	605a      	str	r2, [r3, #4]
 800359e:	e007      	b.n	80035b0 <HAL_SPI_Receive+0x13c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80035ae:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035b8:	d10f      	bne.n	80035da <HAL_SPI_Receive+0x166>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035d8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e4:	2b40      	cmp	r3, #64	; 0x40
 80035e6:	d007      	beq.n	80035f8 <HAL_SPI_Receive+0x184>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035f6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003600:	d869      	bhi.n	80036d6 <HAL_SPI_Receive+0x262>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003602:	e031      	b.n	8003668 <HAL_SPI_Receive+0x1f4>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b01      	cmp	r3, #1
 8003610:	d117      	bne.n	8003642 <HAL_SPI_Receive+0x1ce>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f103 020c 	add.w	r2, r3, #12
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	7812      	ldrb	r2, [r2, #0]
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003634:	b29b      	uxth	r3, r3
 8003636:	3b01      	subs	r3, #1
 8003638:	b29a      	uxth	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003640:	e012      	b.n	8003668 <HAL_SPI_Receive+0x1f4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003642:	f7fe fca9 	bl	8001f98 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	429a      	cmp	r2, r3
 8003650:	d803      	bhi.n	800365a <HAL_SPI_Receive+0x1e6>
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003658:	d102      	bne.n	8003660 <HAL_SPI_Receive+0x1ec>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d103      	bne.n	8003668 <HAL_SPI_Receive+0x1f4>
        {
          errorcode = HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8003666:	e0e0      	b.n	800382a <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800366e:	b29b      	uxth	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1c7      	bne.n	8003604 <HAL_SPI_Receive+0x190>
 8003674:	e035      	b.n	80036e2 <HAL_SPI_Receive+0x26e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b01      	cmp	r3, #1
 8003682:	d115      	bne.n	80036b0 <HAL_SPI_Receive+0x23c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	b292      	uxth	r2, r2
 8003690:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	1c9a      	adds	r2, r3, #2
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80036ae:	e012      	b.n	80036d6 <HAL_SPI_Receive+0x262>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036b0:	f7fe fc72 	bl	8001f98 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d803      	bhi.n	80036c8 <HAL_SPI_Receive+0x254>
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c6:	d102      	bne.n	80036ce <HAL_SPI_Receive+0x25a>
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d103      	bne.n	80036d6 <HAL_SPI_Receive+0x262>
        {
          errorcode = HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80036d4:	e0a9      	b.n	800382a <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036dc:	b29b      	uxth	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1c9      	bne.n	8003676 <HAL_SPI_Receive+0x202>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ea:	d178      	bne.n	80037de <HAL_SPI_Receive+0x36a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036fa:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	2201      	movs	r2, #1
 8003704:	2101      	movs	r1, #1
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f001 f9b8 	bl	8004a7c <SPI_WaitFlagStateUntilTimeout>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_SPI_Receive+0x2a6>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8003718:	e087      	b.n	800382a <HAL_SPI_Receive+0x3b6>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003722:	d907      	bls.n	8003734 <HAL_SPI_Receive+0x2c0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68da      	ldr	r2, [r3, #12]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	b292      	uxth	r2, r2
 8003730:	801a      	strh	r2, [r3, #0]
 8003732:	e008      	b.n	8003746 <HAL_SPI_Receive+0x2d2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f103 020c 	add.w	r2, r3, #12
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003740:	7812      	ldrb	r2, [r2, #0]
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8003746:	6a3b      	ldr	r3, [r7, #32]
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	2201      	movs	r2, #1
 800374e:	2101      	movs	r1, #1
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f001 f993 	bl	8004a7c <SPI_WaitFlagStateUntilTimeout>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d009      	beq.n	8003770 <HAL_SPI_Receive+0x2fc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003760:	f043 0202 	orr.w	r2, r3, #2
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 800376e:	e05c      	b.n	800382a <HAL_SPI_Receive+0x3b6>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003778:	d105      	bne.n	8003786 <HAL_SPI_Receive+0x312>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	e02b      	b.n	80037de <HAL_SPI_Receive+0x36a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	330c      	adds	r3, #12
 800378c:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	b2db      	uxtb	r3, r3
 8003794:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003796:	7dfb      	ldrb	r3, [r7, #23]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037a0:	d11d      	bne.n	80037de <HAL_SPI_Receive+0x36a>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d119      	bne.n	80037de <HAL_SPI_Receive+0x36a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	2201      	movs	r2, #1
 80037b2:	2101      	movs	r1, #1
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f001 f961 	bl	8004a7c <SPI_WaitFlagStateUntilTimeout>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d009      	beq.n	80037d4 <HAL_SPI_Receive+0x360>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c4:	f043 0202 	orr.w	r2, r3, #2
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80037d2:	e02a      	b.n	800382a <HAL_SPI_Receive+0x3b6>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 80037dc:	7dfb      	ldrb	r3, [r7, #23]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037de:	6a3a      	ldr	r2, [r7, #32]
 80037e0:	6839      	ldr	r1, [r7, #0]
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f001 fa68 	bl	8004cb8 <SPI_EndRxTransaction>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d002      	beq.n	80037f4 <HAL_SPI_Receive+0x380>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2220      	movs	r2, #32
 80037f2:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 0310 	and.w	r3, r3, #16
 80037fe:	2b10      	cmp	r3, #16
 8003800:	d10a      	bne.n	8003818 <HAL_SPI_Receive+0x3a4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003806:	f043 0202 	orr.w	r2, r3, #2
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8003816:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <HAL_SPI_Receive+0x3b4>
  {
    errorcode = HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003826:	e000      	b.n	800382a <HAL_SPI_Receive+0x3b6>
  }

error :
 8003828:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800383a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800383e:	4618      	mov	r0, r3
 8003840:	3728      	adds	r7, #40	; 0x28
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b092      	sub	sp, #72	; 0x48
 800384a:	af02      	add	r7, sp, #8
 800384c:	60f8      	str	r0, [r7, #12]
 800384e:	60b9      	str	r1, [r7, #8]
 8003850:	607a      	str	r2, [r7, #4]
 8003852:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8003854:	2300      	movs	r3, #0
 8003856:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003858:	2300      	movs	r3, #0
 800385a:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800385c:	2301      	movs	r3, #1
 800385e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003860:	2300      	movs	r3, #0
 8003862:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800386c:	2b01      	cmp	r3, #1
 800386e:	d101      	bne.n	8003874 <HAL_SPI_TransmitReceive+0x2e>
 8003870:	2302      	movs	r3, #2
 8003872:	e2c8      	b.n	8003e06 <HAL_SPI_TransmitReceive+0x5c0>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800387c:	f7fe fb8c 	bl	8001f98 <HAL_GetTick>
 8003880:	6378      	str	r0, [r7, #52]	; 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003888:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  tmp_mode            = hspi->Init.Mode;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	62fb      	str	r3, [r7, #44]	; 0x2c
  initial_TxXferCount = Size;
 8003892:	887b      	ldrh	r3, [r7, #2]
 8003894:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 8003896:	887b      	ldrh	r3, [r7, #2]
 8003898:	853b      	strh	r3, [r7, #40]	; 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	627b      	str	r3, [r7, #36]	; 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80038aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d00f      	beq.n	80038d2 <HAL_SPI_TransmitReceive+0x8c>
 80038b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038b8:	d107      	bne.n	80038ca <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d103      	bne.n	80038ca <HAL_SPI_TransmitReceive+0x84>
 80038c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	d003      	beq.n	80038d2 <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 80038ca:	2302      	movs	r3, #2
 80038cc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 80038d0:	e28f      	b.n	8003df2 <HAL_SPI_TransmitReceive+0x5ac>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d005      	beq.n	80038e4 <HAL_SPI_TransmitReceive+0x9e>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d002      	beq.n	80038e4 <HAL_SPI_TransmitReceive+0x9e>
 80038de:	887b      	ldrh	r3, [r7, #2]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d103      	bne.n	80038ec <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 80038ea:	e282      	b.n	8003df2 <HAL_SPI_TransmitReceive+0x5ac>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b04      	cmp	r3, #4
 80038f6:	d003      	beq.n	8003900 <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2205      	movs	r2, #5
 80038fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	887a      	ldrh	r2, [r7, #2]
 8003910:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	887a      	ldrh	r2, [r7, #2]
 8003918:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	887a      	ldrh	r2, [r7, #2]
 8003926:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	887a      	ldrh	r2, [r7, #2]
 800392c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003942:	d10f      	bne.n	8003964 <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003962:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800396c:	d802      	bhi.n	8003974 <HAL_SPI_TransmitReceive+0x12e>
 800396e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003970:	2b01      	cmp	r3, #1
 8003972:	d908      	bls.n	8003986 <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003982:	605a      	str	r2, [r3, #4]
 8003984:	e007      	b.n	8003996 <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003994:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a0:	2b40      	cmp	r3, #64	; 0x40
 80039a2:	d007      	beq.n	80039b4 <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039bc:	f240 80a4 	bls.w	8003b08 <HAL_SPI_TransmitReceive+0x2c2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d003      	beq.n	80039d0 <HAL_SPI_TransmitReceive+0x18a>
 80039c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	f040 808e 	bne.w	8003aec <HAL_SPI_TransmitReceive+0x2a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d4:	881a      	ldrh	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e0:	1c9a      	adds	r2, r3, #2
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039f4:	e07a      	b.n	8003aec <HAL_SPI_TransmitReceive+0x2a6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d13f      	bne.n	8003a84 <HAL_SPI_TransmitReceive+0x23e>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d03a      	beq.n	8003a84 <HAL_SPI_TransmitReceive+0x23e>
 8003a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d137      	bne.n	8003a84 <HAL_SPI_TransmitReceive+0x23e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a18:	881a      	ldrh	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a24:	1c9a      	adds	r2, r3, #2
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d11e      	bne.n	8003a84 <HAL_SPI_TransmitReceive+0x23e>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a4e:	d119      	bne.n	8003a84 <HAL_SPI_TransmitReceive+0x23e>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	f003 0304 	and.w	r3, r3, #4
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10c      	bne.n	8003a74 <HAL_SPI_TransmitReceive+0x22e>
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	f003 0308 	and.w	r3, r3, #8
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d007      	beq.n	8003a74 <HAL_SPI_TransmitReceive+0x22e>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a72:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a82:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d11c      	bne.n	8003acc <HAL_SPI_TransmitReceive+0x286>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d016      	beq.n	8003acc <HAL_SPI_TransmitReceive+0x286>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68da      	ldr	r2, [r3, #12]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa8:	b292      	uxth	r2, r2
 8003aaa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab0:	1c9a      	adds	r2, r3, #2
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003acc:	f7fe fa64 	bl	8001f98 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d807      	bhi.n	8003aec <HAL_SPI_TransmitReceive+0x2a6>
 8003adc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae2:	d003      	beq.n	8003aec <HAL_SPI_TransmitReceive+0x2a6>
      {
        errorcode = HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 8003aea:	e182      	b.n	8003df2 <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f47f af7f 	bne.w	80039f6 <HAL_SPI_TransmitReceive+0x1b0>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f47f af78 	bne.w	80039f6 <HAL_SPI_TransmitReceive+0x1b0>
 8003b06:	e103      	b.n	8003d10 <HAL_SPI_TransmitReceive+0x4ca>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <HAL_SPI_TransmitReceive+0x2d2>
 8003b10:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	f040 80ef 	bne.w	8003cf6 <HAL_SPI_TransmitReceive+0x4b0>
    {
      if (hspi->TxXferCount > 1U)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d912      	bls.n	8003b48 <HAL_SPI_TransmitReceive+0x302>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b26:	881a      	ldrh	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b32:	1c9a      	adds	r2, r3, #2
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	3b02      	subs	r3, #2
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b46:	e0d6      	b.n	8003cf6 <HAL_SPI_TransmitReceive+0x4b0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	330c      	adds	r3, #12
 8003b52:	7812      	ldrb	r2, [r2, #0]
 8003b54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5a:	1c5a      	adds	r2, r3, #1
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	3b01      	subs	r3, #1
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b6e:	e0c2      	b.n	8003cf6 <HAL_SPI_TransmitReceive+0x4b0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d158      	bne.n	8003c30 <HAL_SPI_TransmitReceive+0x3ea>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d053      	beq.n	8003c30 <HAL_SPI_TransmitReceive+0x3ea>
 8003b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d150      	bne.n	8003c30 <HAL_SPI_TransmitReceive+0x3ea>
      {
        if (hspi->TxXferCount > 1U)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d912      	bls.n	8003bbe <HAL_SPI_TransmitReceive+0x378>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9c:	881a      	ldrh	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba8:	1c9a      	adds	r2, r3, #2
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	3b02      	subs	r3, #2
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003bbc:	e012      	b.n	8003be4 <HAL_SPI_TransmitReceive+0x39e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	330c      	adds	r3, #12
 8003bc8:	7812      	ldrb	r2, [r2, #0]
 8003bca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd0:	1c5a      	adds	r2, r3, #1
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d11e      	bne.n	8003c30 <HAL_SPI_TransmitReceive+0x3ea>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bfa:	d119      	bne.n	8003c30 <HAL_SPI_TransmitReceive+0x3ea>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfe:	f003 0304 	and.w	r3, r3, #4
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10c      	bne.n	8003c20 <HAL_SPI_TransmitReceive+0x3da>
 8003c06:	6a3b      	ldr	r3, [r7, #32]
 8003c08:	f003 0308 	and.w	r3, r3, #8
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d007      	beq.n	8003c20 <HAL_SPI_TransmitReceive+0x3da>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c1e:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c2e:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d148      	bne.n	8003cd0 <HAL_SPI_TransmitReceive+0x48a>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d042      	beq.n	8003cd0 <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->RxXferCount > 1U)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d923      	bls.n	8003c9e <HAL_SPI_TransmitReceive+0x458>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c60:	b292      	uxth	r2, r2
 8003c62:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	1c9a      	adds	r2, r3, #2
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	3b02      	subs	r3, #2
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d81f      	bhi.n	8003ccc <HAL_SPI_TransmitReceive+0x486>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c9a:	605a      	str	r2, [r3, #4]
 8003c9c:	e016      	b.n	8003ccc <HAL_SPI_TransmitReceive+0x486>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f103 020c 	add.w	r2, r3, #12
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	7812      	ldrb	r2, [r2, #0]
 8003cac:	b2d2      	uxtb	r2, r2
 8003cae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb4:	1c5a      	adds	r2, r3, #1
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003cd0:	f7fe f962 	bl	8001f98 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d803      	bhi.n	8003ce8 <HAL_SPI_TransmitReceive+0x4a2>
 8003ce0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce6:	d102      	bne.n	8003cee <HAL_SPI_TransmitReceive+0x4a8>
 8003ce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d103      	bne.n	8003cf6 <HAL_SPI_TransmitReceive+0x4b0>
      {
        errorcode = HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 8003cf4:	e07d      	b.n	8003df2 <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f47f af37 	bne.w	8003b70 <HAL_SPI_TransmitReceive+0x32a>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f47f af30 	bne.w	8003b70 <HAL_SPI_TransmitReceive+0x32a>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d18:	d146      	bne.n	8003da8 <HAL_SPI_TransmitReceive+0x562>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8003d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d20:	2201      	movs	r2, #1
 8003d22:	2101      	movs	r1, #1
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 fea9 	bl	8004a7c <SPI_WaitFlagStateUntilTimeout>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d009      	beq.n	8003d44 <HAL_SPI_TransmitReceive+0x4fe>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d34:	f043 0202 	orr.w	r2, r3, #2
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      goto error;
 8003d42:	e056      	b.n	8003df2 <HAL_SPI_TransmitReceive+0x5ac>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003d4c:	d105      	bne.n	8003d5a <HAL_SPI_TransmitReceive+0x514>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	e026      	b.n	8003da8 <HAL_SPI_TransmitReceive+0x562>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	330c      	adds	r3, #12
 8003d60:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003d6a:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d119      	bne.n	8003da8 <HAL_SPI_TransmitReceive+0x562>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8003d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 fe7c 	bl	8004a7c <SPI_WaitFlagStateUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d009      	beq.n	8003d9e <HAL_SPI_TransmitReceive+0x558>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d8e:	f043 0202 	orr.w	r2, r3, #2
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          goto error;
 8003d9c:	e029      	b.n	8003df2 <HAL_SPI_TransmitReceive+0x5ac>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8003da6:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 0310 	and.w	r3, r3, #16
 8003db2:	2b10      	cmp	r3, #16
 8003db4:	d10d      	bne.n	8003dd2 <HAL_SPI_TransmitReceive+0x58c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dba:	f043 0202 	orr.w	r2, r3, #2
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8003dca:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003dd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dd4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 ffc6 	bl	8004d68 <SPI_EndRxTxTransaction>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d006      	beq.n	8003df0 <HAL_SPI_TransmitReceive+0x5aa>
  {
    errorcode = HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2220      	movs	r2, #32
 8003dec:	661a      	str	r2, [r3, #96]	; 0x60
 8003dee:	e000      	b.n	8003df2 <HAL_SPI_TransmitReceive+0x5ac>
  }

error :
 8003df0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003e02:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3740      	adds	r7, #64	; 0x40
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
	...

08003e10 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b087      	sub	sp, #28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_SPI_Transmit_IT+0x20>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e087      	b.n	8003f40 <HAL_SPI_Transmit_IT+0x130>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d002      	beq.n	8003e44 <HAL_SPI_Transmit_IT+0x34>
 8003e3e:	88fb      	ldrh	r3, [r7, #6]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d102      	bne.n	8003e4a <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e48:	e075      	b.n	8003f36 <HAL_SPI_Transmit_IT+0x126>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d002      	beq.n	8003e5c <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8003e56:	2302      	movs	r3, #2
 8003e58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e5a:	e06c      	b.n	8003f36 <HAL_SPI_Transmit_IT+0x126>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2203      	movs	r2, #3
 8003e60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	88fa      	ldrh	r2, [r7, #6]
 8003e74:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	88fa      	ldrh	r2, [r7, #6]
 8003e7a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ea0:	d903      	bls.n	8003eaa <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	4a29      	ldr	r2, [pc, #164]	; (8003f4c <HAL_SPI_Transmit_IT+0x13c>)
 8003ea6:	651a      	str	r2, [r3, #80]	; 0x50
 8003ea8:	e002      	b.n	8003eb0 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	4a28      	ldr	r2, [pc, #160]	; (8003f50 <HAL_SPI_Transmit_IT+0x140>)
 8003eae:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eb8:	d10f      	bne.n	8003eda <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ec8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ed8:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ee2:	d10f      	bne.n	8003f04 <HAL_SPI_Transmit_IT+0xf4>
  {
    SPI_RESET_CRC(hspi);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ef2:	601a      	str	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f02:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8003f12:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1e:	2b40      	cmp	r3, #64	; 0x40
 8003f20:	d008      	beq.n	8003f34 <HAL_SPI_Transmit_IT+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	e000      	b.n	8003f36 <HAL_SPI_Transmit_IT+0x126>
  }

error :
 8003f34:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	371c      	adds	r7, #28
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bc80      	pop	{r7}
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	08004a1d 	.word	0x08004a1d
 8003f50:	080049bd 	.word	0x080049bd

08003f54 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f62:	2300      	movs	r3, #0
 8003f64:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d110      	bne.n	8003f90 <HAL_SPI_Receive_IT+0x3c>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f76:	d10b      	bne.n	8003f90 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2204      	movs	r2, #4
 8003f7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8003f80:	88fb      	ldrh	r3, [r7, #6]
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	68b9      	ldr	r1, [r7, #8]
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 f8bc 	bl	8004104 <HAL_SPI_TransmitReceive_IT>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	e0b1      	b.n	80040f4 <HAL_SPI_Receive_IT+0x1a0>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d101      	bne.n	8003f9e <HAL_SPI_Receive_IT+0x4a>
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	e0aa      	b.n	80040f4 <HAL_SPI_Receive_IT+0x1a0>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d002      	beq.n	8003fb8 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fb6:	e098      	b.n	80040ea <HAL_SPI_Receive_IT+0x196>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d002      	beq.n	8003fc4 <HAL_SPI_Receive_IT+0x70>
 8003fbe:	88fb      	ldrh	r3, [r7, #6]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d102      	bne.n	8003fca <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fc8:	e08f      	b.n	80040ea <HAL_SPI_Receive_IT+0x196>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2204      	movs	r2, #4
 8003fce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	88fa      	ldrh	r2, [r7, #6]
 8003fe2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	88fa      	ldrh	r2, [r7, #6]
 8003fea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800400e:	d90b      	bls.n	8004028 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800401e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4a36      	ldr	r2, [pc, #216]	; (80040fc <HAL_SPI_Receive_IT+0x1a8>)
 8004024:	64da      	str	r2, [r3, #76]	; 0x4c
 8004026:	e00a      	b.n	800403e <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004036:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4a31      	ldr	r2, [pc, #196]	; (8004100 <HAL_SPI_Receive_IT+0x1ac>)
 800403c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004046:	d10f      	bne.n	8004068 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004056:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004066:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004070:	d11f      	bne.n	80040b2 <HAL_SPI_Receive_IT+0x15e>
  {
    hspi->CRCSize = 1U;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2201      	movs	r2, #1
 8004076:	649a      	str	r2, [r3, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004080:	d806      	bhi.n	8004090 <HAL_SPI_Receive_IT+0x13c>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004086:	2b02      	cmp	r3, #2
 8004088:	d102      	bne.n	8004090 <HAL_SPI_Receive_IT+0x13c>
    {
      hspi->CRCSize = 2U;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2202      	movs	r2, #2
 800408e:	649a      	str	r2, [r3, #72]	; 0x48
    }
    SPI_RESET_CRC(hspi);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800409e:	601a      	str	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	e002      	b.n	80040b8 <HAL_SPI_Receive_IT+0x164>
  }
  else
  {
    hspi->CRCSize = 0U;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	649a      	str	r2, [r3, #72]	; 0x48
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80040c6:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d2:	2b40      	cmp	r3, #64	; 0x40
 80040d4:	d008      	beq.n	80040e8 <HAL_SPI_Receive_IT+0x194>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	e000      	b.n	80040ea <HAL_SPI_Receive_IT+0x196>
  }

error :
 80040e8:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80040f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3718      	adds	r7, #24
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	08004935 	.word	0x08004935
 8004100:	08004875 	.word	0x08004875

08004104 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8004104:	b480      	push	{r7}
 8004106:	b087      	sub	sp, #28
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
 8004110:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004112:	2300      	movs	r3, #0
 8004114:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800411c:	2b01      	cmp	r3, #1
 800411e:	d101      	bne.n	8004124 <HAL_SPI_TransmitReceive_IT+0x20>
 8004120:	2302      	movs	r3, #2
 8004122:	e0b9      	b.n	8004298 <HAL_SPI_TransmitReceive_IT+0x194>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004132:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800413a:	7dbb      	ldrb	r3, [r7, #22]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d00d      	beq.n	800415c <HAL_SPI_TransmitReceive_IT+0x58>
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004146:	d106      	bne.n	8004156 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d102      	bne.n	8004156 <HAL_SPI_TransmitReceive_IT+0x52>
 8004150:	7dbb      	ldrb	r3, [r7, #22]
 8004152:	2b04      	cmp	r3, #4
 8004154:	d002      	beq.n	800415c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8004156:	2302      	movs	r3, #2
 8004158:	75fb      	strb	r3, [r7, #23]
    goto error;
 800415a:	e098      	b.n	800428e <HAL_SPI_TransmitReceive_IT+0x18a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d005      	beq.n	800416e <HAL_SPI_TransmitReceive_IT+0x6a>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d002      	beq.n	800416e <HAL_SPI_TransmitReceive_IT+0x6a>
 8004168:	887b      	ldrh	r3, [r7, #2]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d102      	bne.n	8004174 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004172:	e08c      	b.n	800428e <HAL_SPI_TransmitReceive_IT+0x18a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b04      	cmp	r3, #4
 800417e:	d003      	beq.n	8004188 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2205      	movs	r2, #5
 8004184:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	887a      	ldrh	r2, [r7, #2]
 8004198:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	887a      	ldrh	r2, [r7, #2]
 800419e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	887a      	ldrh	r2, [r7, #2]
 80041aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	887a      	ldrh	r2, [r7, #2]
 80041b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041be:	d906      	bls.n	80041ce <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4a38      	ldr	r2, [pc, #224]	; (80042a4 <HAL_SPI_TransmitReceive_IT+0x1a0>)
 80041c4:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	4a37      	ldr	r2, [pc, #220]	; (80042a8 <HAL_SPI_TransmitReceive_IT+0x1a4>)
 80041ca:	651a      	str	r2, [r3, #80]	; 0x50
 80041cc:	e005      	b.n	80041da <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	4a36      	ldr	r2, [pc, #216]	; (80042ac <HAL_SPI_TransmitReceive_IT+0x1a8>)
 80041d2:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	4a36      	ldr	r2, [pc, #216]	; (80042b0 <HAL_SPI_TransmitReceive_IT+0x1ac>)
 80041d8:	651a      	str	r2, [r3, #80]	; 0x50
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041e2:	d11f      	bne.n	8004224 <HAL_SPI_TransmitReceive_IT+0x120>
  {
    hspi->CRCSize = 1U;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2201      	movs	r2, #1
 80041e8:	649a      	str	r2, [r3, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041f2:	d806      	bhi.n	8004202 <HAL_SPI_TransmitReceive_IT+0xfe>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d102      	bne.n	8004202 <HAL_SPI_TransmitReceive_IT+0xfe>
    {
      hspi->CRCSize = 2U;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2202      	movs	r2, #2
 8004200:	649a      	str	r2, [r3, #72]	; 0x48
    }
    SPI_RESET_CRC(hspi);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004220:	601a      	str	r2, [r3, #0]
 8004222:	e002      	b.n	800422a <HAL_SPI_TransmitReceive_IT+0x126>
  }
  else
  {
    hspi->CRCSize = 0U;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	649a      	str	r2, [r3, #72]	; 0x48
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004232:	d802      	bhi.n	800423a <HAL_SPI_TransmitReceive_IT+0x136>
 8004234:	887b      	ldrh	r3, [r7, #2]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d908      	bls.n	800424c <HAL_SPI_TransmitReceive_IT+0x148>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004248:	605a      	str	r2, [r3, #4]
 800424a:	e007      	b.n	800425c <HAL_SPI_TransmitReceive_IT+0x158>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800425a:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800426a:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004276:	2b40      	cmp	r3, #64	; 0x40
 8004278:	d008      	beq.n	800428c <HAL_SPI_TransmitReceive_IT+0x188>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	e000      	b.n	800428e <HAL_SPI_TransmitReceive_IT+0x18a>
  }

error :
 800428c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004296:	7dfb      	ldrb	r3, [r7, #23]
}
 8004298:	4618      	mov	r0, r3
 800429a:	371c      	adds	r7, #28
 800429c:	46bd      	mov	sp, r7
 800429e:	bc80      	pop	{r7}
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	080046fd 	.word	0x080046fd
 80042a8:	080047ad 	.word	0x080047ad
 80042ac:	08004505 	.word	0x08004505
 80042b0:	08004641 	.word	0x08004641

080042b4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b088      	sub	sp, #32
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	099b      	lsrs	r3, r3, #6
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10f      	bne.n	80042f8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00a      	beq.n	80042f8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	099b      	lsrs	r3, r3, #6
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d004      	beq.n	80042f8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	4798      	blx	r3
    return;
 80042f6:	e0d7      	b.n	80044a8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	085b      	lsrs	r3, r3, #1
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00a      	beq.n	800431a <HAL_SPI_IRQHandler+0x66>
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	09db      	lsrs	r3, r3, #7
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b00      	cmp	r3, #0
 800430e:	d004      	beq.n	800431a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	4798      	blx	r3
    return;
 8004318:	e0c6      	b.n	80044a8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	095b      	lsrs	r3, r3, #5
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10c      	bne.n	8004340 <HAL_SPI_IRQHandler+0x8c>
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	099b      	lsrs	r3, r3, #6
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d106      	bne.n	8004340 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	0a1b      	lsrs	r3, r3, #8
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 80b4 	beq.w	80044a8 <HAL_SPI_IRQHandler+0x1f4>
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	095b      	lsrs	r3, r3, #5
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 80ad 	beq.w	80044a8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	099b      	lsrs	r3, r3, #6
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d023      	beq.n	80043a2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b03      	cmp	r3, #3
 8004364:	d011      	beq.n	800438a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800436a:	f043 0204 	orr.w	r2, r3, #4
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004372:	2300      	movs	r3, #0
 8004374:	617b      	str	r3, [r7, #20]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	617b      	str	r3, [r7, #20]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	617b      	str	r3, [r7, #20]
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	e00b      	b.n	80043a2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800438a:	2300      	movs	r3, #0
 800438c:	613b      	str	r3, [r7, #16]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	613b      	str	r3, [r7, #16]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	613b      	str	r3, [r7, #16]
 800439e:	693b      	ldr	r3, [r7, #16]
        return;
 80043a0:	e082      	b.n	80044a8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	095b      	lsrs	r3, r3, #5
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d014      	beq.n	80043d8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b2:	f043 0201 	orr.w	r2, r3, #1
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80043ba:	2300      	movs	r3, #0
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	60fb      	str	r3, [r7, #12]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	0a1b      	lsrs	r3, r3, #8
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00c      	beq.n	80043fe <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043e8:	f043 0208 	orr.w	r2, r3, #8
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80043f0:	2300      	movs	r3, #0
 80043f2:	60bb      	str	r3, [r7, #8]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	60bb      	str	r3, [r7, #8]
 80043fc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004402:	2b00      	cmp	r3, #0
 8004404:	d04f      	beq.n	80044a6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004414:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d104      	bne.n	8004432 <HAL_SPI_IRQHandler+0x17e>
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b00      	cmp	r3, #0
 8004430:	d034      	beq.n	800449c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 0203 	bic.w	r2, r2, #3
 8004440:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004446:	2b00      	cmp	r3, #0
 8004448:	d011      	beq.n	800446e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444e:	4a18      	ldr	r2, [pc, #96]	; (80044b0 <HAL_SPI_IRQHandler+0x1fc>)
 8004450:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004456:	4618      	mov	r0, r3
 8004458:	f7fd feab 	bl	80021b2 <HAL_DMA_Abort_IT>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d005      	beq.n	800446e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004466:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004472:	2b00      	cmp	r3, #0
 8004474:	d016      	beq.n	80044a4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447a:	4a0d      	ldr	r2, [pc, #52]	; (80044b0 <HAL_SPI_IRQHandler+0x1fc>)
 800447c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004482:	4618      	mov	r0, r3
 8004484:	f7fd fe95 	bl	80021b2 <HAL_DMA_Abort_IT>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00a      	beq.n	80044a4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004492:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800449a:	e003      	b.n	80044a4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 f812 	bl	80044c6 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80044a2:	e000      	b.n	80044a6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80044a4:	bf00      	nop
    return;
 80044a6:	bf00      	nop
  }
}
 80044a8:	3720      	adds	r7, #32
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	080044d9 	.word	0x080044d9

080044b4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bc80      	pop	{r7}
 80044c4:	4770      	bx	lr

080044c6 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b083      	sub	sp, #12
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr

080044d8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f7ff ffe6 	bl	80044c6 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80044fa:	bf00      	nop
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
	...

08004504 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004512:	b29b      	uxth	r3, r3
 8004514:	2b01      	cmp	r3, #1
 8004516:	d923      	bls.n	8004560 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	b292      	uxth	r2, r2
 8004524:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	1c9a      	adds	r2, r3, #2
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004536:	b29b      	uxth	r3, r3
 8004538:	3b02      	subs	r3, #2
 800453a:	b29a      	uxth	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004548:	b29b      	uxth	r3, r3
 800454a:	2b01      	cmp	r3, #1
 800454c:	d11f      	bne.n	800458e <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800455c:	605a      	str	r2, [r3, #4]
 800455e:	e016      	b.n	800458e <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f103 020c 	add.w	r2, r3, #12
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456c:	7812      	ldrb	r2, [r2, #0]
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	1c5a      	adds	r2, r3, #1
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004582:	b29b      	uxth	r3, r3
 8004584:	3b01      	subs	r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004594:	b29b      	uxth	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d120      	bne.n	80045dc <SPI_2linesRxISR_8BIT+0xd8>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045a2:	d10b      	bne.n	80045bc <SPI_2linesRxISR_8BIT+0xb8>
    {
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045b2:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a0b      	ldr	r2, [pc, #44]	; (80045e4 <SPI_2linesRxISR_8BIT+0xe0>)
 80045b8:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 80045ba:	e00f      	b.n	80045dc <SPI_2linesRxISR_8BIT+0xd8>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045ca:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d102      	bne.n	80045dc <SPI_2linesRxISR_8BIT+0xd8>
    {
      SPI_CloseRxTx_ISR(hspi);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 fc0c 	bl	8004df4 <SPI_CloseRxTx_ISR>
    }
  }
}
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	080045e9 	.word	0x080045e9

080045e8 <SPI_2linesRxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80045f0:	2300      	movs	r3, #0
 80045f2:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	330c      	adds	r3, #12
 80045fa:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	b2db      	uxtb	r3, r3
 8004602:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 8004604:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800460a:	1e5a      	subs	r2, r3, #1
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	649a      	str	r2, [r3, #72]	; 0x48

  /* Check end of the reception */
  if (hspi->CRCSize == 0U)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10f      	bne.n	8004638 <SPI_2linesRxISR_8BITCRC+0x50>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685a      	ldr	r2, [r3, #4]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004626:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800462c:	b29b      	uxth	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d102      	bne.n	8004638 <SPI_2linesRxISR_8BITCRC+0x50>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 fbde 	bl	8004df4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004638:	bf00      	nop
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800464c:	b29b      	uxth	r3, r3
 800464e:	2b01      	cmp	r3, #1
 8004650:	d912      	bls.n	8004678 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004656:	881a      	ldrh	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004662:	1c9a      	adds	r2, r3, #2
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800466c:	b29b      	uxth	r3, r3
 800466e:	3b02      	subs	r3, #2
 8004670:	b29a      	uxth	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004676:	e012      	b.n	800469e <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	330c      	adds	r3, #12
 8004682:	7812      	ldrb	r2, [r2, #0]
 8004684:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004694:	b29b      	uxth	r3, r3
 8004696:	3b01      	subs	r3, #1
 8004698:	b29a      	uxth	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d126      	bne.n	80046f6 <SPI_2linesTxISR_8BIT+0xb6>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046b0:	d110      	bne.n	80046d4 <SPI_2linesTxISR_8BIT+0x94>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046c0:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685a      	ldr	r2, [r3, #4]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046d0:	605a      	str	r2, [r3, #4]
      return;
 80046d2:	e010      	b.n	80046f6 <SPI_2linesTxISR_8BIT+0xb6>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046e2:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d102      	bne.n	80046f6 <SPI_2linesTxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 fb7f 	bl	8004df4 <SPI_CloseRxTx_ISR>
    }
  }
}
 80046f6:	3708      	adds	r7, #8
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	b292      	uxth	r2, r2
 8004710:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	1c9a      	adds	r2, r3, #2
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004722:	b29b      	uxth	r3, r3
 8004724:	3b01      	subs	r3, #1
 8004726:	b29a      	uxth	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004734:	b29b      	uxth	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d118      	bne.n	800476c <SPI_2linesRxISR_16BIT+0x70>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004742:	d103      	bne.n	800474c <SPI_2linesRxISR_16BIT+0x50>
    {
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a0b      	ldr	r2, [pc, #44]	; (8004774 <SPI_2linesRxISR_16BIT+0x78>)
 8004748:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 800474a:	e00f      	b.n	800476c <SPI_2linesRxISR_16BIT+0x70>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800475a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004760:	b29b      	uxth	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d102      	bne.n	800476c <SPI_2linesRxISR_16BIT+0x70>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 fb44 	bl	8004df4 <SPI_CloseRxTx_ISR>
    }
  }
}
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	08004779 	.word	0x08004779

08004778 <SPI_2linesRxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 800478c:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800479c:	605a      	str	r2, [r3, #4]

  SPI_CloseRxTx_ISR(hspi);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 fb28 	bl	8004df4 <SPI_CloseRxTx_ISR>
}
 80047a4:	bf00      	nop
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b8:	881a      	ldrh	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c4:	1c9a      	adds	r2, r3, #2
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	3b01      	subs	r3, #1
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047dc:	b29b      	uxth	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d126      	bne.n	8004830 <SPI_2linesTxISR_16BIT+0x84>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ea:	d110      	bne.n	800480e <SPI_2linesTxISR_16BIT+0x62>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047fa:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685a      	ldr	r2, [r3, #4]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800480a:	605a      	str	r2, [r3, #4]
      return;
 800480c:	e010      	b.n	8004830 <SPI_2linesTxISR_16BIT+0x84>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	685a      	ldr	r2, [r3, #4]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800481c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004824:	b29b      	uxth	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d102      	bne.n	8004830 <SPI_2linesTxISR_16BIT+0x84>
    {
      SPI_CloseRxTx_ISR(hspi);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 fae2 	bl	8004df4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <SPI_RxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b084      	sub	sp, #16
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800483e:	2300      	movs	r3, #0
 8004840:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	330c      	adds	r3, #12
 8004848:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	b2db      	uxtb	r3, r3
 8004850:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 8004852:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004858:	1e5a      	subs	r2, r3, #1
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	649a      	str	r2, [r3, #72]	; 0x48

  if (hspi->CRCSize == 0U)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004862:	2b00      	cmp	r3, #0
 8004864:	d102      	bne.n	800486c <SPI_RxISR_8BITCRC+0x36>
  {
    SPI_CloseRx_ISR(hspi);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 fb20 	bl	8004eac <SPI_CloseRx_ISR>
  }
}
 800486c:	bf00      	nop
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f103 020c 	add.w	r2, r3, #12
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004888:	7812      	ldrb	r2, [r2, #0]
 800488a:	b2d2      	uxtb	r2, r2
 800488c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	1c5a      	adds	r2, r3, #1
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800489e:	b29b      	uxth	r3, r3
 80048a0:	3b01      	subs	r3, #1
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d10c      	bne.n	80048d0 <SPI_RxISR_8BIT+0x5c>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048be:	d107      	bne.n	80048d0 <SPI_RxISR_8BIT+0x5c>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048ce:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10b      	bne.n	80048f4 <SPI_RxISR_8BIT+0x80>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048e4:	d103      	bne.n	80048ee <SPI_RxISR_8BIT+0x7a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a04      	ldr	r2, [pc, #16]	; (80048fc <SPI_RxISR_8BIT+0x88>)
 80048ea:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 80048ec:	e002      	b.n	80048f4 <SPI_RxISR_8BIT+0x80>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 fadc 	bl	8004eac <SPI_CloseRx_ISR>
  }
}
 80048f4:	3708      	adds	r7, #8
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	08004837 	.word	0x08004837

08004900 <SPI_RxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8004908:	2300      	movs	r3, #0
 800490a:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8004914:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004924:	605a      	str	r2, [r3, #4]

  SPI_CloseRx_ISR(hspi);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 fac0 	bl	8004eac <SPI_CloseRx_ISR>
}
 800492c:	bf00      	nop
 800492e:	3710      	adds	r7, #16
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68da      	ldr	r2, [r3, #12]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	b292      	uxth	r2, r2
 8004948:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	1c9a      	adds	r2, r3, #2
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800495a:	b29b      	uxth	r3, r3
 800495c:	3b01      	subs	r3, #1
 800495e:	b29a      	uxth	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800496c:	b29b      	uxth	r3, r3
 800496e:	2b01      	cmp	r3, #1
 8004970:	d10c      	bne.n	800498c <SPI_RxISR_16BIT+0x58>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800497a:	d107      	bne.n	800498c <SPI_RxISR_16BIT+0x58>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800498a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004992:	b29b      	uxth	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10b      	bne.n	80049b0 <SPI_RxISR_16BIT+0x7c>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049a0:	d103      	bne.n	80049aa <SPI_RxISR_16BIT+0x76>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a04      	ldr	r2, [pc, #16]	; (80049b8 <SPI_RxISR_16BIT+0x84>)
 80049a6:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 80049a8:	e002      	b.n	80049b0 <SPI_RxISR_16BIT+0x7c>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 fa7e 	bl	8004eac <SPI_CloseRx_ISR>
  }
}
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	08004901 	.word	0x08004901

080049bc <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	330c      	adds	r3, #12
 80049ce:	7812      	ldrb	r2, [r2, #0]
 80049d0:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d6:	1c5a      	adds	r2, r3, #1
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	3b01      	subs	r3, #1
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10f      	bne.n	8004a14 <SPI_TxISR_8BIT+0x58>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049fc:	d107      	bne.n	8004a0e <SPI_TxISR_8BIT+0x52>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a0c:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 fa92 	bl	8004f38 <SPI_CloseTx_ISR>
  }
}
 8004a14:	bf00      	nop
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a28:	881a      	ldrh	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a34:	1c9a      	adds	r2, r3, #2
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	3b01      	subs	r3, #1
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10f      	bne.n	8004a72 <SPI_TxISR_16BIT+0x56>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a5a:	d107      	bne.n	8004a6c <SPI_TxISR_16BIT+0x50>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a6a:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 fa63 	bl	8004f38 <SPI_CloseTx_ISR>
  }
}
 8004a72:	bf00      	nop
 8004a74:	3708      	adds	r7, #8
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
	...

08004a7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b088      	sub	sp, #32
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	603b      	str	r3, [r7, #0]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a8c:	f7fd fa84 	bl	8001f98 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a94:	1a9b      	subs	r3, r3, r2
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	4413      	add	r3, r2
 8004a9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a9c:	f7fd fa7c 	bl	8001f98 <HAL_GetTick>
 8004aa0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004aa2:	4b39      	ldr	r3, [pc, #228]	; (8004b88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	015b      	lsls	r3, r3, #5
 8004aa8:	0d1b      	lsrs	r3, r3, #20
 8004aaa:	69fa      	ldr	r2, [r7, #28]
 8004aac:	fb02 f303 	mul.w	r3, r2, r3
 8004ab0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ab2:	e054      	b.n	8004b5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aba:	d050      	beq.n	8004b5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004abc:	f7fd fa6c 	bl	8001f98 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	69fa      	ldr	r2, [r7, #28]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d902      	bls.n	8004ad2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d13d      	bne.n	8004b4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ae0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aea:	d111      	bne.n	8004b10 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004af4:	d004      	beq.n	8004b00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004afe:	d107      	bne.n	8004b10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b18:	d10f      	bne.n	8004b3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e017      	b.n	8004b7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d101      	bne.n	8004b58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689a      	ldr	r2, [r3, #8]
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	4013      	ands	r3, r2
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	bf0c      	ite	eq
 8004b6e:	2301      	moveq	r3, #1
 8004b70:	2300      	movne	r3, #0
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	461a      	mov	r2, r3
 8004b76:	79fb      	ldrb	r3, [r7, #7]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d19b      	bne.n	8004ab4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3720      	adds	r7, #32
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	2000001c 	.word	0x2000001c

08004b8c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b08a      	sub	sp, #40	; 0x28
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
 8004b98:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004b9e:	f7fd f9fb 	bl	8001f98 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba6:	1a9b      	subs	r3, r3, r2
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	4413      	add	r3, r2
 8004bac:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004bae:	f7fd f9f3 	bl	8001f98 <HAL_GetTick>
 8004bb2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	330c      	adds	r3, #12
 8004bba:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004bbc:	4b3d      	ldr	r3, [pc, #244]	; (8004cb4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4413      	add	r3, r2
 8004bc6:	00da      	lsls	r2, r3, #3
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	0d1b      	lsrs	r3, r3, #20
 8004bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bce:	fb02 f303 	mul.w	r3, r2, r3
 8004bd2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004bd4:	e060      	b.n	8004c98 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004bdc:	d107      	bne.n	8004bee <SPI_WaitFifoStateUntilTimeout+0x62>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d104      	bne.n	8004bee <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004bec:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf4:	d050      	beq.n	8004c98 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004bf6:	f7fd f9cf 	bl	8001f98 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d902      	bls.n	8004c0c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d13d      	bne.n	8004c88 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c1a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c24:	d111      	bne.n	8004c4a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c2e:	d004      	beq.n	8004c3a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c38:	d107      	bne.n	8004c4a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c48:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c52:	d10f      	bne.n	8004c74 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c72:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e010      	b.n	8004caa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	3b01      	subs	r3, #1
 8004c96:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689a      	ldr	r2, [r3, #8]
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d196      	bne.n	8004bd6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3728      	adds	r7, #40	; 0x28
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	2000001c 	.word	0x2000001c

08004cb8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af02      	add	r7, sp, #8
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ccc:	d111      	bne.n	8004cf2 <SPI_EndRxTransaction+0x3a>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cd6:	d004      	beq.n	8004ce2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ce0:	d107      	bne.n	8004cf2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cf0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	2180      	movs	r1, #128	; 0x80
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f7ff febd 	bl	8004a7c <SPI_WaitFlagStateUntilTimeout>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d007      	beq.n	8004d18 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d0c:	f043 0220 	orr.w	r2, r3, #32
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e023      	b.n	8004d60 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d20:	d11d      	bne.n	8004d5e <SPI_EndRxTransaction+0xa6>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d2a:	d004      	beq.n	8004d36 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d34:	d113      	bne.n	8004d5e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f7ff ff22 	bl	8004b8c <SPI_WaitFifoStateUntilTimeout>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d007      	beq.n	8004d5e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d52:	f043 0220 	orr.w	r2, r3, #32
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e000      	b.n	8004d60 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af02      	add	r7, sp, #8
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	f7ff ff03 	bl	8004b8c <SPI_WaitFifoStateUntilTimeout>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d007      	beq.n	8004d9c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d90:	f043 0220 	orr.w	r2, r3, #32
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e027      	b.n	8004dec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	2200      	movs	r2, #0
 8004da4:	2180      	movs	r1, #128	; 0x80
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f7ff fe68 	bl	8004a7c <SPI_WaitFlagStateUntilTimeout>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d007      	beq.n	8004dc2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004db6:	f043 0220 	orr.w	r2, r3, #32
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e014      	b.n	8004dec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f7ff fedc 	bl	8004b8c <SPI_WaitFifoStateUntilTimeout>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d007      	beq.n	8004dea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dde:	f043 0220 	orr.w	r2, r3, #32
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e000      	b.n	8004dec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004dfc:	f7fd f8cc 	bl	8001f98 <HAL_GetTick>
 8004e00:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 0220 	bic.w	r2, r2, #32
 8004e10:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	2164      	movs	r1, #100	; 0x64
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7ff ffa6 	bl	8004d68 <SPI_EndRxTxTransaction>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d005      	beq.n	8004e2e <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e26:	f043 0220 	orr.w	r2, r3, #32
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f003 0310 	and.w	r3, r3, #16
 8004e38:	2b10      	cmp	r3, #16
 8004e3a:	d112      	bne.n	8004e62 <SPI_CloseRxTx_ISR+0x6e>
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e48:	f043 0202 	orr.w	r2, r3, #2
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8004e58:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7ff fb33 	bl	80044c6 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004e60:	e020      	b.n	8004ea4 <SPI_CloseRxTx_ISR+0xb0>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d115      	bne.n	8004e96 <SPI_CloseRxTx_ISR+0xa2>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	d107      	bne.n	8004e86 <SPI_CloseRxTx_ISR+0x92>
        hspi->State = HAL_SPI_STATE_READY;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7fc fe52 	bl	8001b28 <HAL_SPI_RxCpltCallback>
}
 8004e84:	e00e      	b.n	8004ea4 <SPI_CloseRxTx_ISR+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7ff fb10 	bl	80044b4 <HAL_SPI_TxRxCpltCallback>
}
 8004e94:	e006      	b.n	8004ea4 <SPI_CloseRxTx_ISR+0xb0>
      hspi->State = HAL_SPI_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7ff fb11 	bl	80044c6 <HAL_SPI_ErrorCallback>
}
 8004ea4:	bf00      	nop
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	685a      	ldr	r2, [r3, #4]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ec2:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8004ec4:	f7fd f868 	bl	8001f98 <HAL_GetTick>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	461a      	mov	r2, r3
 8004ecc:	2164      	movs	r1, #100	; 0x64
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7ff fef2 	bl	8004cb8 <SPI_EndRxTransaction>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d005      	beq.n	8004ee6 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ede:	f043 0220 	orr.w	r2, r3, #32
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f003 0310 	and.w	r3, r3, #16
 8004ef8:	2b10      	cmp	r3, #16
 8004efa:	d10e      	bne.n	8004f1a <SPI_CloseRx_ISR+0x6e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f00:	f043 0202 	orr.w	r2, r3, #2
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8004f10:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7ff fad7 	bl	80044c6 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004f18:	e00a      	b.n	8004f30 <SPI_CloseRx_ISR+0x84>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d103      	bne.n	8004f2a <SPI_CloseRx_ISR+0x7e>
      HAL_SPI_RxCpltCallback(hspi);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7fc fe00 	bl	8001b28 <HAL_SPI_RxCpltCallback>
}
 8004f28:	e002      	b.n	8004f30 <SPI_CloseRx_ISR+0x84>
      HAL_SPI_ErrorCallback(hspi);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f7ff facb 	bl	80044c6 <HAL_SPI_ErrorCallback>
}
 8004f30:	bf00      	nop
 8004f32:	3708      	adds	r7, #8
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f40:	f7fd f82a 	bl	8001f98 <HAL_GetTick>
 8004f44:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f54:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	2164      	movs	r1, #100	; 0x64
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f7ff ff04 	bl	8004d68 <SPI_EndRxTxTransaction>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d005      	beq.n	8004f72 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f6a:	f043 0220 	orr.w	r2, r3, #32
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10a      	bne.n	8004f90 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60bb      	str	r3, [r7, #8]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	60bb      	str	r3, [r7, #8]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	60bb      	str	r3, [r7, #8]
 8004f8e:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d003      	beq.n	8004fa8 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f7ff fa90 	bl	80044c6 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8004fa6:	e002      	b.n	8004fae <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f7fc fdcf 	bl	8001b4c <HAL_SPI_TxCpltCallback>
}
 8004fae:	bf00      	nop
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b082      	sub	sp, #8
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e049      	b.n	800505c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d106      	bne.n	8004fe2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 f841 	bl	8005064 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2202      	movs	r2, #2
 8004fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	3304      	adds	r3, #4
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	4610      	mov	r0, r2
 8004ff6:	f000 f9f3 	bl	80053e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2201      	movs	r2, #1
 8005026:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	bc80      	pop	{r7}
 8005074:	4770      	bx	lr
	...

08005078 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b01      	cmp	r3, #1
 800508a:	d001      	beq.n	8005090 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e04f      	b.n	8005130 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68da      	ldr	r2, [r3, #12]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f042 0201 	orr.w	r2, r2, #1
 80050a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a23      	ldr	r2, [pc, #140]	; (800513c <HAL_TIM_Base_Start_IT+0xc4>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d01d      	beq.n	80050ee <HAL_TIM_Base_Start_IT+0x76>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ba:	d018      	beq.n	80050ee <HAL_TIM_Base_Start_IT+0x76>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a1f      	ldr	r2, [pc, #124]	; (8005140 <HAL_TIM_Base_Start_IT+0xc8>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d013      	beq.n	80050ee <HAL_TIM_Base_Start_IT+0x76>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a1e      	ldr	r2, [pc, #120]	; (8005144 <HAL_TIM_Base_Start_IT+0xcc>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d00e      	beq.n	80050ee <HAL_TIM_Base_Start_IT+0x76>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a1c      	ldr	r2, [pc, #112]	; (8005148 <HAL_TIM_Base_Start_IT+0xd0>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d009      	beq.n	80050ee <HAL_TIM_Base_Start_IT+0x76>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a1b      	ldr	r2, [pc, #108]	; (800514c <HAL_TIM_Base_Start_IT+0xd4>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d004      	beq.n	80050ee <HAL_TIM_Base_Start_IT+0x76>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a19      	ldr	r2, [pc, #100]	; (8005150 <HAL_TIM_Base_Start_IT+0xd8>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d115      	bne.n	800511a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	4b17      	ldr	r3, [pc, #92]	; (8005154 <HAL_TIM_Base_Start_IT+0xdc>)
 80050f6:	4013      	ands	r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2b06      	cmp	r3, #6
 80050fe:	d015      	beq.n	800512c <HAL_TIM_Base_Start_IT+0xb4>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005106:	d011      	beq.n	800512c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f042 0201 	orr.w	r2, r2, #1
 8005116:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005118:	e008      	b.n	800512c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f042 0201 	orr.w	r2, r2, #1
 8005128:	601a      	str	r2, [r3, #0]
 800512a:	e000      	b.n	800512e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800512c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3714      	adds	r7, #20
 8005134:	46bd      	mov	sp, r7
 8005136:	bc80      	pop	{r7}
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	40012c00 	.word	0x40012c00
 8005140:	40000400 	.word	0x40000400
 8005144:	40000800 	.word	0x40000800
 8005148:	40000c00 	.word	0x40000c00
 800514c:	40013400 	.word	0x40013400
 8005150:	40014000 	.word	0x40014000
 8005154:	00010007 	.word	0x00010007

08005158 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	f003 0302 	and.w	r3, r3, #2
 800516a:	2b02      	cmp	r3, #2
 800516c:	d122      	bne.n	80051b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f003 0302 	and.w	r3, r3, #2
 8005178:	2b02      	cmp	r3, #2
 800517a:	d11b      	bne.n	80051b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f06f 0202 	mvn.w	r2, #2
 8005184:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	f003 0303 	and.w	r3, r3, #3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d003      	beq.n	80051a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f904 	bl	80053a8 <HAL_TIM_IC_CaptureCallback>
 80051a0:	e005      	b.n	80051ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f8f7 	bl	8005396 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 f906 	bl	80053ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	f003 0304 	and.w	r3, r3, #4
 80051be:	2b04      	cmp	r3, #4
 80051c0:	d122      	bne.n	8005208 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	2b04      	cmp	r3, #4
 80051ce:	d11b      	bne.n	8005208 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f06f 0204 	mvn.w	r2, #4
 80051d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2202      	movs	r2, #2
 80051de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d003      	beq.n	80051f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f8da 	bl	80053a8 <HAL_TIM_IC_CaptureCallback>
 80051f4:	e005      	b.n	8005202 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f8cd 	bl	8005396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 f8dc 	bl	80053ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	f003 0308 	and.w	r3, r3, #8
 8005212:	2b08      	cmp	r3, #8
 8005214:	d122      	bne.n	800525c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	f003 0308 	and.w	r3, r3, #8
 8005220:	2b08      	cmp	r3, #8
 8005222:	d11b      	bne.n	800525c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f06f 0208 	mvn.w	r2, #8
 800522c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2204      	movs	r2, #4
 8005232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	f003 0303 	and.w	r3, r3, #3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f8b0 	bl	80053a8 <HAL_TIM_IC_CaptureCallback>
 8005248:	e005      	b.n	8005256 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f8a3 	bl	8005396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 f8b2 	bl	80053ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	f003 0310 	and.w	r3, r3, #16
 8005266:	2b10      	cmp	r3, #16
 8005268:	d122      	bne.n	80052b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	f003 0310 	and.w	r3, r3, #16
 8005274:	2b10      	cmp	r3, #16
 8005276:	d11b      	bne.n	80052b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f06f 0210 	mvn.w	r2, #16
 8005280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2208      	movs	r2, #8
 8005286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	69db      	ldr	r3, [r3, #28]
 800528e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005292:	2b00      	cmp	r3, #0
 8005294:	d003      	beq.n	800529e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f886 	bl	80053a8 <HAL_TIM_IC_CaptureCallback>
 800529c:	e005      	b.n	80052aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f879 	bl	8005396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 f888 	bl	80053ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d10e      	bne.n	80052dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	f003 0301 	and.w	r3, r3, #1
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d107      	bne.n	80052dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f06f 0201 	mvn.w	r2, #1
 80052d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f9ba 	bl	8005650 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e6:	2b80      	cmp	r3, #128	; 0x80
 80052e8:	d10e      	bne.n	8005308 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f4:	2b80      	cmp	r3, #128	; 0x80
 80052f6:	d107      	bne.n	8005308 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f90d 	bl	8005522 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005316:	d10e      	bne.n	8005336 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005322:	2b80      	cmp	r3, #128	; 0x80
 8005324:	d107      	bne.n	8005336 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800532e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 f8ff 	bl	8005534 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005340:	2b40      	cmp	r3, #64	; 0x40
 8005342:	d10e      	bne.n	8005362 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800534e:	2b40      	cmp	r3, #64	; 0x40
 8005350:	d107      	bne.n	8005362 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800535a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f835 	bl	80053cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	f003 0320 	and.w	r3, r3, #32
 800536c:	2b20      	cmp	r3, #32
 800536e:	d10e      	bne.n	800538e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	f003 0320 	and.w	r3, r3, #32
 800537a:	2b20      	cmp	r3, #32
 800537c:	d107      	bne.n	800538e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f06f 0220 	mvn.w	r2, #32
 8005386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 f8c1 	bl	8005510 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800538e:	bf00      	nop
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005396:	b480      	push	{r7}
 8005398:	b083      	sub	sp, #12
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800539e:	bf00      	nop
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bc80      	pop	{r7}
 80053a6:	4770      	bx	lr

080053a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bc80      	pop	{r7}
 80053b8:	4770      	bx	lr

080053ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053ba:	b480      	push	{r7}
 80053bc:	b083      	sub	sp, #12
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053c2:	bf00      	nop
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bc80      	pop	{r7}
 80053ca:	4770      	bx	lr

080053cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	bc80      	pop	{r7}
 80053dc:	4770      	bx	lr
	...

080053e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a3f      	ldr	r2, [pc, #252]	; (80054f0 <TIM_Base_SetConfig+0x110>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d013      	beq.n	8005420 <TIM_Base_SetConfig+0x40>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053fe:	d00f      	beq.n	8005420 <TIM_Base_SetConfig+0x40>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a3c      	ldr	r2, [pc, #240]	; (80054f4 <TIM_Base_SetConfig+0x114>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d00b      	beq.n	8005420 <TIM_Base_SetConfig+0x40>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a3b      	ldr	r2, [pc, #236]	; (80054f8 <TIM_Base_SetConfig+0x118>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d007      	beq.n	8005420 <TIM_Base_SetConfig+0x40>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a3a      	ldr	r2, [pc, #232]	; (80054fc <TIM_Base_SetConfig+0x11c>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d003      	beq.n	8005420 <TIM_Base_SetConfig+0x40>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a39      	ldr	r2, [pc, #228]	; (8005500 <TIM_Base_SetConfig+0x120>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d108      	bne.n	8005432 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005426:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	4313      	orrs	r3, r2
 8005430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a2e      	ldr	r2, [pc, #184]	; (80054f0 <TIM_Base_SetConfig+0x110>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d01f      	beq.n	800547a <TIM_Base_SetConfig+0x9a>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005440:	d01b      	beq.n	800547a <TIM_Base_SetConfig+0x9a>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a2b      	ldr	r2, [pc, #172]	; (80054f4 <TIM_Base_SetConfig+0x114>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d017      	beq.n	800547a <TIM_Base_SetConfig+0x9a>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a2a      	ldr	r2, [pc, #168]	; (80054f8 <TIM_Base_SetConfig+0x118>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d013      	beq.n	800547a <TIM_Base_SetConfig+0x9a>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a29      	ldr	r2, [pc, #164]	; (80054fc <TIM_Base_SetConfig+0x11c>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d00f      	beq.n	800547a <TIM_Base_SetConfig+0x9a>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a28      	ldr	r2, [pc, #160]	; (8005500 <TIM_Base_SetConfig+0x120>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d00b      	beq.n	800547a <TIM_Base_SetConfig+0x9a>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a27      	ldr	r2, [pc, #156]	; (8005504 <TIM_Base_SetConfig+0x124>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d007      	beq.n	800547a <TIM_Base_SetConfig+0x9a>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a26      	ldr	r2, [pc, #152]	; (8005508 <TIM_Base_SetConfig+0x128>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d003      	beq.n	800547a <TIM_Base_SetConfig+0x9a>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a25      	ldr	r2, [pc, #148]	; (800550c <TIM_Base_SetConfig+0x12c>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d108      	bne.n	800548c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005480:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	4313      	orrs	r3, r2
 800548a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	4313      	orrs	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	689a      	ldr	r2, [r3, #8]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a0f      	ldr	r2, [pc, #60]	; (80054f0 <TIM_Base_SetConfig+0x110>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d00f      	beq.n	80054d8 <TIM_Base_SetConfig+0xf8>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a11      	ldr	r2, [pc, #68]	; (8005500 <TIM_Base_SetConfig+0x120>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d00b      	beq.n	80054d8 <TIM_Base_SetConfig+0xf8>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a10      	ldr	r2, [pc, #64]	; (8005504 <TIM_Base_SetConfig+0x124>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d007      	beq.n	80054d8 <TIM_Base_SetConfig+0xf8>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a0f      	ldr	r2, [pc, #60]	; (8005508 <TIM_Base_SetConfig+0x128>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d003      	beq.n	80054d8 <TIM_Base_SetConfig+0xf8>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a0e      	ldr	r2, [pc, #56]	; (800550c <TIM_Base_SetConfig+0x12c>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d103      	bne.n	80054e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	691a      	ldr	r2, [r3, #16]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	615a      	str	r2, [r3, #20]
}
 80054e6:	bf00      	nop
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bc80      	pop	{r7}
 80054ee:	4770      	bx	lr
 80054f0:	40012c00 	.word	0x40012c00
 80054f4:	40000400 	.word	0x40000400
 80054f8:	40000800 	.word	0x40000800
 80054fc:	40000c00 	.word	0x40000c00
 8005500:	40013400 	.word	0x40013400
 8005504:	40014000 	.word	0x40014000
 8005508:	40014400 	.word	0x40014400
 800550c:	40014800 	.word	0x40014800

08005510 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	bc80      	pop	{r7}
 8005520:	4770      	bx	lr

08005522 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005522:	b480      	push	{r7}
 8005524:	b083      	sub	sp, #12
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800552a:	bf00      	nop
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	bc80      	pop	{r7}
 8005532:	4770      	bx	lr

08005534 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	bc80      	pop	{r7}
 8005544:	4770      	bx	lr
	...

08005548 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b08e      	sub	sp, #56	; 0x38
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8005550:	2300      	movs	r3, #0
 8005552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005556:	4b38      	ldr	r3, [pc, #224]	; (8005638 <HAL_InitTick+0xf0>)
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d062      	beq.n	8005624 <HAL_InitTick+0xdc>
  {
    /* Enable TIM6 clock */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800555e:	4b37      	ldr	r3, [pc, #220]	; (800563c <HAL_InitTick+0xf4>)
 8005560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005562:	4a36      	ldr	r2, [pc, #216]	; (800563c <HAL_InitTick+0xf4>)
 8005564:	f043 0310 	orr.w	r3, r3, #16
 8005568:	6593      	str	r3, [r2, #88]	; 0x58
 800556a:	4b34      	ldr	r3, [pc, #208]	; (800563c <HAL_InitTick+0xf4>)
 800556c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800556e:	f003 0310 	and.w	r3, r3, #16
 8005572:	60fb      	str	r3, [r7, #12]
 8005574:	68fb      	ldr	r3, [r7, #12]

    /* Get clock configuration */
    HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005576:	f107 0210 	add.w	r2, r7, #16
 800557a:	f107 0314 	add.w	r3, r7, #20
 800557e:	4611      	mov	r1, r2
 8005580:	4618      	mov	r0, r3
 8005582:	f7fd fde1 	bl	8003148 <HAL_RCC_GetClockConfig>

    /* Get APB1 prescaler */
    uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005586:	6a3b      	ldr	r3, [r7, #32]
 8005588:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Compute TIM6 clock */
    if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800558a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800558c:	2b00      	cmp	r3, #0
 800558e:	d103      	bne.n	8005598 <HAL_InitTick+0x50>
    {
      uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005590:	f7fd fdae 	bl	80030f0 <HAL_RCC_GetPCLK1Freq>
 8005594:	6378      	str	r0, [r7, #52]	; 0x34
 8005596:	e004      	b.n	80055a2 <HAL_InitTick+0x5a>
    }
    else
    {
      uwTimclock = 2U * HAL_RCC_GetPCLK1Freq();
 8005598:	f7fd fdaa 	bl	80030f0 <HAL_RCC_GetPCLK1Freq>
 800559c:	4603      	mov	r3, r0
 800559e:	005b      	lsls	r3, r3, #1
 80055a0:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
    uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80055a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a4:	4a26      	ldr	r2, [pc, #152]	; (8005640 <HAL_InitTick+0xf8>)
 80055a6:	fba2 2303 	umull	r2, r3, r2, r3
 80055aa:	0c9b      	lsrs	r3, r3, #18
 80055ac:	3b01      	subs	r3, #1
 80055ae:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Initialize TIM6 */
    TimHandle.Instance = TIM6;
 80055b0:	4b24      	ldr	r3, [pc, #144]	; (8005644 <HAL_InitTick+0xfc>)
 80055b2:	4a25      	ldr	r2, [pc, #148]	; (8005648 <HAL_InitTick+0x100>)
 80055b4:	601a      	str	r2, [r3, #0]
    + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
    + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
    + ClockDivision = 0
    + Counter direction = Up
    */
    TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 80055b6:	4b23      	ldr	r3, [pc, #140]	; (8005644 <HAL_InitTick+0xfc>)
 80055b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80055bc:	60da      	str	r2, [r3, #12]
    TimHandle.Init.Prescaler = uwPrescalerValue;
 80055be:	4a21      	ldr	r2, [pc, #132]	; (8005644 <HAL_InitTick+0xfc>)
 80055c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c2:	6053      	str	r3, [r2, #4]
    TimHandle.Init.ClockDivision = 0;
 80055c4:	4b1f      	ldr	r3, [pc, #124]	; (8005644 <HAL_InitTick+0xfc>)
 80055c6:	2200      	movs	r2, #0
 80055c8:	611a      	str	r2, [r3, #16]
    TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055ca:	4b1e      	ldr	r3, [pc, #120]	; (8005644 <HAL_InitTick+0xfc>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	609a      	str	r2, [r3, #8]
    TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80055d0:	4b1c      	ldr	r3, [pc, #112]	; (8005644 <HAL_InitTick+0xfc>)
 80055d2:	2200      	movs	r2, #0
 80055d4:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 80055d6:	481b      	ldr	r0, [pc, #108]	; (8005644 <HAL_InitTick+0xfc>)
 80055d8:	f7ff fced 	bl	8004fb6 <HAL_TIM_Base_Init>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d11c      	bne.n	800561c <HAL_InitTick+0xd4>
    {
      /* Start the TIM time Base generation in interrupt mode */
      if (HAL_TIM_Base_Start_IT(&TimHandle) == HAL_OK)
 80055e2:	4818      	ldr	r0, [pc, #96]	; (8005644 <HAL_InitTick+0xfc>)
 80055e4:	f7ff fd48 	bl	8005078 <HAL_TIM_Base_Start_IT>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d112      	bne.n	8005614 <HAL_InitTick+0xcc>
      {
        /* Enable the TIM6_DAC global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80055ee:	2036      	movs	r0, #54	; 0x36
 80055f0:	f7fc fdd1 	bl	8002196 <HAL_NVIC_EnableIRQ>

        /* Configure the SysTick IRQ priority */
        if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2b0f      	cmp	r3, #15
 80055f8:	d808      	bhi.n	800560c <HAL_InitTick+0xc4>
        {
          /*Configure the TIM6_DAC IRQ priority */
          HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80055fa:	2200      	movs	r2, #0
 80055fc:	6879      	ldr	r1, [r7, #4]
 80055fe:	2036      	movs	r0, #54	; 0x36
 8005600:	f7fc fdad 	bl	800215e <HAL_NVIC_SetPriority>
          uwTickPrio = TickPriority;
 8005604:	4a11      	ldr	r2, [pc, #68]	; (800564c <HAL_InitTick+0x104>)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6013      	str	r3, [r2, #0]
 800560a:	e00e      	b.n	800562a <HAL_InitTick+0xe2>
        }
        else
        {
          status = HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005612:	e00a      	b.n	800562a <HAL_InitTick+0xe2>
        }
      }
      else
      {
        status = HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800561a:	e006      	b.n	800562a <HAL_InitTick+0xe2>
      }
    }
    else
    {
      status = HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005622:	e002      	b.n	800562a <HAL_InitTick+0xe2>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  }

  /* Return function status */
  return status;
 800562a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800562e:	4618      	mov	r0, r3
 8005630:	3738      	adds	r7, #56	; 0x38
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	20000014 	.word	0x20000014
 800563c:	40021000 	.word	0x40021000
 8005640:	431bde83 	.word	0x431bde83
 8005644:	20000aa4 	.word	0x20000aa4
 8005648:	40001000 	.word	0x40001000
 800564c:	20000010 	.word	0x20000010

08005650 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 8005658:	f7fc fc8c 	bl	8001f74 <HAL_IncTick>
}
 800565c:	bf00      	nop
 800565e:	3708      	adds	r7, #8
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <TIM6_DAC_IRQHandler>:
/**
  * @brief  This function handles TIM interrupt request.
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 8005668:	4802      	ldr	r0, [pc, #8]	; (8005674 <TIM6_DAC_IRQHandler+0x10>)
 800566a:	f7ff fd75 	bl	8005158 <HAL_TIM_IRQHandler>
}
 800566e:	bf00      	nop
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	20000aa4 	.word	0x20000aa4

08005678 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e040      	b.n	800570c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800568e:	2b00      	cmp	r3, #0
 8005690:	d106      	bne.n	80056a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f83a 	bl	8005714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2224      	movs	r2, #36	; 0x24
 80056a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f022 0201 	bic.w	r2, r2, #1
 80056b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f8ca 	bl	8005850 <UART_SetConfig>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d101      	bne.n	80056c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e022      	b.n	800570c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d002      	beq.n	80056d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 fb76 	bl	8005dc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	685a      	ldr	r2, [r3, #4]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	689a      	ldr	r2, [r3, #8]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f042 0201 	orr.w	r2, r2, #1
 8005702:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 fbfc 	bl	8005f02 <UART_CheckIdleState>
 800570a:	4603      	mov	r3, r0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3708      	adds	r7, #8
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	bc80      	pop	{r7}
 8005724:	4770      	bx	lr

08005726 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b08a      	sub	sp, #40	; 0x28
 800572a:	af02      	add	r7, sp, #8
 800572c:	60f8      	str	r0, [r7, #12]
 800572e:	60b9      	str	r1, [r7, #8]
 8005730:	603b      	str	r3, [r7, #0]
 8005732:	4613      	mov	r3, r2
 8005734:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800573a:	2b20      	cmp	r3, #32
 800573c:	f040 8082 	bne.w	8005844 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d002      	beq.n	800574c <HAL_UART_Transmit+0x26>
 8005746:	88fb      	ldrh	r3, [r7, #6]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d101      	bne.n	8005750 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e07a      	b.n	8005846 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005756:	2b01      	cmp	r3, #1
 8005758:	d101      	bne.n	800575e <HAL_UART_Transmit+0x38>
 800575a:	2302      	movs	r3, #2
 800575c:	e073      	b.n	8005846 <HAL_UART_Transmit+0x120>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2221      	movs	r2, #33	; 0x21
 8005772:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005774:	f7fc fc10 	bl	8001f98 <HAL_GetTick>
 8005778:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	88fa      	ldrh	r2, [r7, #6]
 800577e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	88fa      	ldrh	r2, [r7, #6]
 8005786:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005792:	d108      	bne.n	80057a6 <HAL_UART_Transmit+0x80>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d104      	bne.n	80057a6 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800579c:	2300      	movs	r3, #0
 800579e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	61bb      	str	r3, [r7, #24]
 80057a4:	e003      	b.n	80057ae <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057aa:	2300      	movs	r3, #0
 80057ac:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80057b6:	e02d      	b.n	8005814 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	2200      	movs	r2, #0
 80057c0:	2180      	movs	r1, #128	; 0x80
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f000 fbe6 	bl	8005f94 <UART_WaitOnFlagUntilTimeout>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d001      	beq.n	80057d2 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e039      	b.n	8005846 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10b      	bne.n	80057f0 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	881a      	ldrh	r2, [r3, #0]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057e4:	b292      	uxth	r2, r2
 80057e6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	3302      	adds	r3, #2
 80057ec:	61bb      	str	r3, [r7, #24]
 80057ee:	e008      	b.n	8005802 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	781a      	ldrb	r2, [r3, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	b292      	uxth	r2, r2
 80057fa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	3301      	adds	r3, #1
 8005800:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005808:	b29b      	uxth	r3, r3
 800580a:	3b01      	subs	r3, #1
 800580c:	b29a      	uxth	r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800581a:	b29b      	uxth	r3, r3
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1cb      	bne.n	80057b8 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	2200      	movs	r2, #0
 8005828:	2140      	movs	r1, #64	; 0x40
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f000 fbb2 	bl	8005f94 <UART_WaitOnFlagUntilTimeout>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e005      	b.n	8005846 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2220      	movs	r2, #32
 800583e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005840:	2300      	movs	r3, #0
 8005842:	e000      	b.n	8005846 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005844:	2302      	movs	r3, #2
  }
}
 8005846:	4618      	mov	r0, r3
 8005848:	3720      	adds	r7, #32
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
	...

08005850 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005854:	b08a      	sub	sp, #40	; 0x28
 8005856:	af00      	add	r7, sp, #0
 8005858:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800585a:	2300      	movs	r3, #0
 800585c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	689a      	ldr	r2, [r3, #8]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	431a      	orrs	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	431a      	orrs	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	69db      	ldr	r3, [r3, #28]
 8005874:	4313      	orrs	r3, r2
 8005876:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	4ba4      	ldr	r3, [pc, #656]	; (8005b10 <UART_SetConfig+0x2c0>)
 8005880:	4013      	ands	r3, r2
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	6812      	ldr	r2, [r2, #0]
 8005886:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005888:	430b      	orrs	r3, r1
 800588a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	68da      	ldr	r2, [r3, #12]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	430a      	orrs	r2, r1
 80058a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a99      	ldr	r2, [pc, #612]	; (8005b14 <UART_SetConfig+0x2c4>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d004      	beq.n	80058bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058b8:	4313      	orrs	r3, r2
 80058ba:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058cc:	430a      	orrs	r2, r1
 80058ce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a90      	ldr	r2, [pc, #576]	; (8005b18 <UART_SetConfig+0x2c8>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d126      	bne.n	8005928 <UART_SetConfig+0xd8>
 80058da:	4b90      	ldr	r3, [pc, #576]	; (8005b1c <UART_SetConfig+0x2cc>)
 80058dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e0:	f003 0303 	and.w	r3, r3, #3
 80058e4:	2b03      	cmp	r3, #3
 80058e6:	d81b      	bhi.n	8005920 <UART_SetConfig+0xd0>
 80058e8:	a201      	add	r2, pc, #4	; (adr r2, 80058f0 <UART_SetConfig+0xa0>)
 80058ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ee:	bf00      	nop
 80058f0:	08005901 	.word	0x08005901
 80058f4:	08005911 	.word	0x08005911
 80058f8:	08005909 	.word	0x08005909
 80058fc:	08005919 	.word	0x08005919
 8005900:	2301      	movs	r3, #1
 8005902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005906:	e116      	b.n	8005b36 <UART_SetConfig+0x2e6>
 8005908:	2302      	movs	r3, #2
 800590a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800590e:	e112      	b.n	8005b36 <UART_SetConfig+0x2e6>
 8005910:	2304      	movs	r3, #4
 8005912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005916:	e10e      	b.n	8005b36 <UART_SetConfig+0x2e6>
 8005918:	2308      	movs	r3, #8
 800591a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800591e:	e10a      	b.n	8005b36 <UART_SetConfig+0x2e6>
 8005920:	2310      	movs	r3, #16
 8005922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005926:	e106      	b.n	8005b36 <UART_SetConfig+0x2e6>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a7c      	ldr	r2, [pc, #496]	; (8005b20 <UART_SetConfig+0x2d0>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d138      	bne.n	80059a4 <UART_SetConfig+0x154>
 8005932:	4b7a      	ldr	r3, [pc, #488]	; (8005b1c <UART_SetConfig+0x2cc>)
 8005934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005938:	f003 030c 	and.w	r3, r3, #12
 800593c:	2b0c      	cmp	r3, #12
 800593e:	d82d      	bhi.n	800599c <UART_SetConfig+0x14c>
 8005940:	a201      	add	r2, pc, #4	; (adr r2, 8005948 <UART_SetConfig+0xf8>)
 8005942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005946:	bf00      	nop
 8005948:	0800597d 	.word	0x0800597d
 800594c:	0800599d 	.word	0x0800599d
 8005950:	0800599d 	.word	0x0800599d
 8005954:	0800599d 	.word	0x0800599d
 8005958:	0800598d 	.word	0x0800598d
 800595c:	0800599d 	.word	0x0800599d
 8005960:	0800599d 	.word	0x0800599d
 8005964:	0800599d 	.word	0x0800599d
 8005968:	08005985 	.word	0x08005985
 800596c:	0800599d 	.word	0x0800599d
 8005970:	0800599d 	.word	0x0800599d
 8005974:	0800599d 	.word	0x0800599d
 8005978:	08005995 	.word	0x08005995
 800597c:	2300      	movs	r3, #0
 800597e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005982:	e0d8      	b.n	8005b36 <UART_SetConfig+0x2e6>
 8005984:	2302      	movs	r3, #2
 8005986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800598a:	e0d4      	b.n	8005b36 <UART_SetConfig+0x2e6>
 800598c:	2304      	movs	r3, #4
 800598e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005992:	e0d0      	b.n	8005b36 <UART_SetConfig+0x2e6>
 8005994:	2308      	movs	r3, #8
 8005996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800599a:	e0cc      	b.n	8005b36 <UART_SetConfig+0x2e6>
 800599c:	2310      	movs	r3, #16
 800599e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059a2:	e0c8      	b.n	8005b36 <UART_SetConfig+0x2e6>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a5e      	ldr	r2, [pc, #376]	; (8005b24 <UART_SetConfig+0x2d4>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d125      	bne.n	80059fa <UART_SetConfig+0x1aa>
 80059ae:	4b5b      	ldr	r3, [pc, #364]	; (8005b1c <UART_SetConfig+0x2cc>)
 80059b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80059b8:	2b30      	cmp	r3, #48	; 0x30
 80059ba:	d016      	beq.n	80059ea <UART_SetConfig+0x19a>
 80059bc:	2b30      	cmp	r3, #48	; 0x30
 80059be:	d818      	bhi.n	80059f2 <UART_SetConfig+0x1a2>
 80059c0:	2b20      	cmp	r3, #32
 80059c2:	d00a      	beq.n	80059da <UART_SetConfig+0x18a>
 80059c4:	2b20      	cmp	r3, #32
 80059c6:	d814      	bhi.n	80059f2 <UART_SetConfig+0x1a2>
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d002      	beq.n	80059d2 <UART_SetConfig+0x182>
 80059cc:	2b10      	cmp	r3, #16
 80059ce:	d008      	beq.n	80059e2 <UART_SetConfig+0x192>
 80059d0:	e00f      	b.n	80059f2 <UART_SetConfig+0x1a2>
 80059d2:	2300      	movs	r3, #0
 80059d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059d8:	e0ad      	b.n	8005b36 <UART_SetConfig+0x2e6>
 80059da:	2302      	movs	r3, #2
 80059dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059e0:	e0a9      	b.n	8005b36 <UART_SetConfig+0x2e6>
 80059e2:	2304      	movs	r3, #4
 80059e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059e8:	e0a5      	b.n	8005b36 <UART_SetConfig+0x2e6>
 80059ea:	2308      	movs	r3, #8
 80059ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059f0:	e0a1      	b.n	8005b36 <UART_SetConfig+0x2e6>
 80059f2:	2310      	movs	r3, #16
 80059f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059f8:	e09d      	b.n	8005b36 <UART_SetConfig+0x2e6>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a4a      	ldr	r2, [pc, #296]	; (8005b28 <UART_SetConfig+0x2d8>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d125      	bne.n	8005a50 <UART_SetConfig+0x200>
 8005a04:	4b45      	ldr	r3, [pc, #276]	; (8005b1c <UART_SetConfig+0x2cc>)
 8005a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a0e:	2bc0      	cmp	r3, #192	; 0xc0
 8005a10:	d016      	beq.n	8005a40 <UART_SetConfig+0x1f0>
 8005a12:	2bc0      	cmp	r3, #192	; 0xc0
 8005a14:	d818      	bhi.n	8005a48 <UART_SetConfig+0x1f8>
 8005a16:	2b80      	cmp	r3, #128	; 0x80
 8005a18:	d00a      	beq.n	8005a30 <UART_SetConfig+0x1e0>
 8005a1a:	2b80      	cmp	r3, #128	; 0x80
 8005a1c:	d814      	bhi.n	8005a48 <UART_SetConfig+0x1f8>
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d002      	beq.n	8005a28 <UART_SetConfig+0x1d8>
 8005a22:	2b40      	cmp	r3, #64	; 0x40
 8005a24:	d008      	beq.n	8005a38 <UART_SetConfig+0x1e8>
 8005a26:	e00f      	b.n	8005a48 <UART_SetConfig+0x1f8>
 8005a28:	2300      	movs	r3, #0
 8005a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a2e:	e082      	b.n	8005b36 <UART_SetConfig+0x2e6>
 8005a30:	2302      	movs	r3, #2
 8005a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a36:	e07e      	b.n	8005b36 <UART_SetConfig+0x2e6>
 8005a38:	2304      	movs	r3, #4
 8005a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a3e:	e07a      	b.n	8005b36 <UART_SetConfig+0x2e6>
 8005a40:	2308      	movs	r3, #8
 8005a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a46:	e076      	b.n	8005b36 <UART_SetConfig+0x2e6>
 8005a48:	2310      	movs	r3, #16
 8005a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a4e:	e072      	b.n	8005b36 <UART_SetConfig+0x2e6>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a35      	ldr	r2, [pc, #212]	; (8005b2c <UART_SetConfig+0x2dc>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d12a      	bne.n	8005ab0 <UART_SetConfig+0x260>
 8005a5a:	4b30      	ldr	r3, [pc, #192]	; (8005b1c <UART_SetConfig+0x2cc>)
 8005a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a68:	d01a      	beq.n	8005aa0 <UART_SetConfig+0x250>
 8005a6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a6e:	d81b      	bhi.n	8005aa8 <UART_SetConfig+0x258>
 8005a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a74:	d00c      	beq.n	8005a90 <UART_SetConfig+0x240>
 8005a76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a7a:	d815      	bhi.n	8005aa8 <UART_SetConfig+0x258>
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d003      	beq.n	8005a88 <UART_SetConfig+0x238>
 8005a80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a84:	d008      	beq.n	8005a98 <UART_SetConfig+0x248>
 8005a86:	e00f      	b.n	8005aa8 <UART_SetConfig+0x258>
 8005a88:	2300      	movs	r3, #0
 8005a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a8e:	e052      	b.n	8005b36 <UART_SetConfig+0x2e6>
 8005a90:	2302      	movs	r3, #2
 8005a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a96:	e04e      	b.n	8005b36 <UART_SetConfig+0x2e6>
 8005a98:	2304      	movs	r3, #4
 8005a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a9e:	e04a      	b.n	8005b36 <UART_SetConfig+0x2e6>
 8005aa0:	2308      	movs	r3, #8
 8005aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aa6:	e046      	b.n	8005b36 <UART_SetConfig+0x2e6>
 8005aa8:	2310      	movs	r3, #16
 8005aaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aae:	e042      	b.n	8005b36 <UART_SetConfig+0x2e6>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a17      	ldr	r2, [pc, #92]	; (8005b14 <UART_SetConfig+0x2c4>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d13a      	bne.n	8005b30 <UART_SetConfig+0x2e0>
 8005aba:	4b18      	ldr	r3, [pc, #96]	; (8005b1c <UART_SetConfig+0x2cc>)
 8005abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ac4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ac8:	d01a      	beq.n	8005b00 <UART_SetConfig+0x2b0>
 8005aca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ace:	d81b      	bhi.n	8005b08 <UART_SetConfig+0x2b8>
 8005ad0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ad4:	d00c      	beq.n	8005af0 <UART_SetConfig+0x2a0>
 8005ad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ada:	d815      	bhi.n	8005b08 <UART_SetConfig+0x2b8>
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d003      	beq.n	8005ae8 <UART_SetConfig+0x298>
 8005ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ae4:	d008      	beq.n	8005af8 <UART_SetConfig+0x2a8>
 8005ae6:	e00f      	b.n	8005b08 <UART_SetConfig+0x2b8>
 8005ae8:	2300      	movs	r3, #0
 8005aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aee:	e022      	b.n	8005b36 <UART_SetConfig+0x2e6>
 8005af0:	2302      	movs	r3, #2
 8005af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005af6:	e01e      	b.n	8005b36 <UART_SetConfig+0x2e6>
 8005af8:	2304      	movs	r3, #4
 8005afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005afe:	e01a      	b.n	8005b36 <UART_SetConfig+0x2e6>
 8005b00:	2308      	movs	r3, #8
 8005b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b06:	e016      	b.n	8005b36 <UART_SetConfig+0x2e6>
 8005b08:	2310      	movs	r3, #16
 8005b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b0e:	e012      	b.n	8005b36 <UART_SetConfig+0x2e6>
 8005b10:	efff69f3 	.word	0xefff69f3
 8005b14:	40008000 	.word	0x40008000
 8005b18:	40013800 	.word	0x40013800
 8005b1c:	40021000 	.word	0x40021000
 8005b20:	40004400 	.word	0x40004400
 8005b24:	40004800 	.word	0x40004800
 8005b28:	40004c00 	.word	0x40004c00
 8005b2c:	40005000 	.word	0x40005000
 8005b30:	2310      	movs	r3, #16
 8005b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a9f      	ldr	r2, [pc, #636]	; (8005db8 <UART_SetConfig+0x568>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d17a      	bne.n	8005c36 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b44:	2b08      	cmp	r3, #8
 8005b46:	d824      	bhi.n	8005b92 <UART_SetConfig+0x342>
 8005b48:	a201      	add	r2, pc, #4	; (adr r2, 8005b50 <UART_SetConfig+0x300>)
 8005b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4e:	bf00      	nop
 8005b50:	08005b75 	.word	0x08005b75
 8005b54:	08005b93 	.word	0x08005b93
 8005b58:	08005b7d 	.word	0x08005b7d
 8005b5c:	08005b93 	.word	0x08005b93
 8005b60:	08005b83 	.word	0x08005b83
 8005b64:	08005b93 	.word	0x08005b93
 8005b68:	08005b93 	.word	0x08005b93
 8005b6c:	08005b93 	.word	0x08005b93
 8005b70:	08005b8b 	.word	0x08005b8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b74:	f7fd fabc 	bl	80030f0 <HAL_RCC_GetPCLK1Freq>
 8005b78:	61f8      	str	r0, [r7, #28]
        break;
 8005b7a:	e010      	b.n	8005b9e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b7c:	4b8f      	ldr	r3, [pc, #572]	; (8005dbc <UART_SetConfig+0x56c>)
 8005b7e:	61fb      	str	r3, [r7, #28]
        break;
 8005b80:	e00d      	b.n	8005b9e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b82:	f7fd fa21 	bl	8002fc8 <HAL_RCC_GetSysClockFreq>
 8005b86:	61f8      	str	r0, [r7, #28]
        break;
 8005b88:	e009      	b.n	8005b9e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b8e:	61fb      	str	r3, [r7, #28]
        break;
 8005b90:	e005      	b.n	8005b9e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005b92:	2300      	movs	r3, #0
 8005b94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005b9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f000 80fb 	beq.w	8005d9c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	685a      	ldr	r2, [r3, #4]
 8005baa:	4613      	mov	r3, r2
 8005bac:	005b      	lsls	r3, r3, #1
 8005bae:	4413      	add	r3, r2
 8005bb0:	69fa      	ldr	r2, [r7, #28]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d305      	bcc.n	8005bc2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005bbc:	69fa      	ldr	r2, [r7, #28]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d903      	bls.n	8005bca <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005bc8:	e0e8      	b.n	8005d9c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	461c      	mov	r4, r3
 8005bd0:	4615      	mov	r5, r2
 8005bd2:	f04f 0200 	mov.w	r2, #0
 8005bd6:	f04f 0300 	mov.w	r3, #0
 8005bda:	022b      	lsls	r3, r5, #8
 8005bdc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005be0:	0222      	lsls	r2, r4, #8
 8005be2:	68f9      	ldr	r1, [r7, #12]
 8005be4:	6849      	ldr	r1, [r1, #4]
 8005be6:	0849      	lsrs	r1, r1, #1
 8005be8:	2000      	movs	r0, #0
 8005bea:	4688      	mov	r8, r1
 8005bec:	4681      	mov	r9, r0
 8005bee:	eb12 0a08 	adds.w	sl, r2, r8
 8005bf2:	eb43 0b09 	adc.w	fp, r3, r9
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	603b      	str	r3, [r7, #0]
 8005bfe:	607a      	str	r2, [r7, #4]
 8005c00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c04:	4650      	mov	r0, sl
 8005c06:	4659      	mov	r1, fp
 8005c08:	f7fa fb3a 	bl	8000280 <__aeabi_uldivmod>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	460b      	mov	r3, r1
 8005c10:	4613      	mov	r3, r2
 8005c12:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c1a:	d308      	bcc.n	8005c2e <UART_SetConfig+0x3de>
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c22:	d204      	bcs.n	8005c2e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	69ba      	ldr	r2, [r7, #24]
 8005c2a:	60da      	str	r2, [r3, #12]
 8005c2c:	e0b6      	b.n	8005d9c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005c34:	e0b2      	b.n	8005d9c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c3e:	d15e      	bne.n	8005cfe <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005c40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c44:	2b08      	cmp	r3, #8
 8005c46:	d828      	bhi.n	8005c9a <UART_SetConfig+0x44a>
 8005c48:	a201      	add	r2, pc, #4	; (adr r2, 8005c50 <UART_SetConfig+0x400>)
 8005c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4e:	bf00      	nop
 8005c50:	08005c75 	.word	0x08005c75
 8005c54:	08005c7d 	.word	0x08005c7d
 8005c58:	08005c85 	.word	0x08005c85
 8005c5c:	08005c9b 	.word	0x08005c9b
 8005c60:	08005c8b 	.word	0x08005c8b
 8005c64:	08005c9b 	.word	0x08005c9b
 8005c68:	08005c9b 	.word	0x08005c9b
 8005c6c:	08005c9b 	.word	0x08005c9b
 8005c70:	08005c93 	.word	0x08005c93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c74:	f7fd fa3c 	bl	80030f0 <HAL_RCC_GetPCLK1Freq>
 8005c78:	61f8      	str	r0, [r7, #28]
        break;
 8005c7a:	e014      	b.n	8005ca6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c7c:	f7fd fa4e 	bl	800311c <HAL_RCC_GetPCLK2Freq>
 8005c80:	61f8      	str	r0, [r7, #28]
        break;
 8005c82:	e010      	b.n	8005ca6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c84:	4b4d      	ldr	r3, [pc, #308]	; (8005dbc <UART_SetConfig+0x56c>)
 8005c86:	61fb      	str	r3, [r7, #28]
        break;
 8005c88:	e00d      	b.n	8005ca6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c8a:	f7fd f99d 	bl	8002fc8 <HAL_RCC_GetSysClockFreq>
 8005c8e:	61f8      	str	r0, [r7, #28]
        break;
 8005c90:	e009      	b.n	8005ca6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c96:	61fb      	str	r3, [r7, #28]
        break;
 8005c98:	e005      	b.n	8005ca6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005ca4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d077      	beq.n	8005d9c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	005a      	lsls	r2, r3, #1
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	085b      	lsrs	r3, r3, #1
 8005cb6:	441a      	add	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	2b0f      	cmp	r3, #15
 8005cc6:	d916      	bls.n	8005cf6 <UART_SetConfig+0x4a6>
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cce:	d212      	bcs.n	8005cf6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	f023 030f 	bic.w	r3, r3, #15
 8005cd8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	085b      	lsrs	r3, r3, #1
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	f003 0307 	and.w	r3, r3, #7
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	8afb      	ldrh	r3, [r7, #22]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	8afa      	ldrh	r2, [r7, #22]
 8005cf2:	60da      	str	r2, [r3, #12]
 8005cf4:	e052      	b.n	8005d9c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005cfc:	e04e      	b.n	8005d9c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005cfe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d02:	2b08      	cmp	r3, #8
 8005d04:	d827      	bhi.n	8005d56 <UART_SetConfig+0x506>
 8005d06:	a201      	add	r2, pc, #4	; (adr r2, 8005d0c <UART_SetConfig+0x4bc>)
 8005d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0c:	08005d31 	.word	0x08005d31
 8005d10:	08005d39 	.word	0x08005d39
 8005d14:	08005d41 	.word	0x08005d41
 8005d18:	08005d57 	.word	0x08005d57
 8005d1c:	08005d47 	.word	0x08005d47
 8005d20:	08005d57 	.word	0x08005d57
 8005d24:	08005d57 	.word	0x08005d57
 8005d28:	08005d57 	.word	0x08005d57
 8005d2c:	08005d4f 	.word	0x08005d4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d30:	f7fd f9de 	bl	80030f0 <HAL_RCC_GetPCLK1Freq>
 8005d34:	61f8      	str	r0, [r7, #28]
        break;
 8005d36:	e014      	b.n	8005d62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d38:	f7fd f9f0 	bl	800311c <HAL_RCC_GetPCLK2Freq>
 8005d3c:	61f8      	str	r0, [r7, #28]
        break;
 8005d3e:	e010      	b.n	8005d62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d40:	4b1e      	ldr	r3, [pc, #120]	; (8005dbc <UART_SetConfig+0x56c>)
 8005d42:	61fb      	str	r3, [r7, #28]
        break;
 8005d44:	e00d      	b.n	8005d62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d46:	f7fd f93f 	bl	8002fc8 <HAL_RCC_GetSysClockFreq>
 8005d4a:	61f8      	str	r0, [r7, #28]
        break;
 8005d4c:	e009      	b.n	8005d62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d52:	61fb      	str	r3, [r7, #28]
        break;
 8005d54:	e005      	b.n	8005d62 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005d56:	2300      	movs	r3, #0
 8005d58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005d60:	bf00      	nop
    }

    if (pclk != 0U)
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d019      	beq.n	8005d9c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	085a      	lsrs	r2, r3, #1
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	441a      	add	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d7a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	2b0f      	cmp	r3, #15
 8005d80:	d909      	bls.n	8005d96 <UART_SetConfig+0x546>
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d88:	d205      	bcs.n	8005d96 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	60da      	str	r2, [r3, #12]
 8005d94:	e002      	b.n	8005d9c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005da8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3728      	adds	r7, #40	; 0x28
 8005db0:	46bd      	mov	sp, r7
 8005db2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005db6:	bf00      	nop
 8005db8:	40008000 	.word	0x40008000
 8005dbc:	00f42400 	.word	0x00f42400

08005dc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dcc:	f003 0301 	and.w	r3, r3, #1
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00a      	beq.n	8005dea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	430a      	orrs	r2, r1
 8005de8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00a      	beq.n	8005e0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e10:	f003 0304 	and.w	r3, r3, #4
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00a      	beq.n	8005e2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e32:	f003 0308 	and.w	r3, r3, #8
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00a      	beq.n	8005e50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e54:	f003 0310 	and.w	r3, r3, #16
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00a      	beq.n	8005e72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e76:	f003 0320 	and.w	r3, r3, #32
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00a      	beq.n	8005e94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	430a      	orrs	r2, r1
 8005e92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d01a      	beq.n	8005ed6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ebe:	d10a      	bne.n	8005ed6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00a      	beq.n	8005ef8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	605a      	str	r2, [r3, #4]
  }
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bc80      	pop	{r7}
 8005f00:	4770      	bx	lr

08005f02 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b086      	sub	sp, #24
 8005f06:	af02      	add	r7, sp, #8
 8005f08:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f12:	f7fc f841 	bl	8001f98 <HAL_GetTick>
 8005f16:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0308 	and.w	r3, r3, #8
 8005f22:	2b08      	cmp	r3, #8
 8005f24:	d10e      	bne.n	8005f44 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f26:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 f82d 	bl	8005f94 <UART_WaitOnFlagUntilTimeout>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d001      	beq.n	8005f44 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e023      	b.n	8005f8c <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0304 	and.w	r3, r3, #4
 8005f4e:	2b04      	cmp	r3, #4
 8005f50:	d10e      	bne.n	8005f70 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f52:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 f817 	bl	8005f94 <UART_WaitOnFlagUntilTimeout>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d001      	beq.n	8005f70 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e00d      	b.n	8005f8c <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2220      	movs	r2, #32
 8005f74:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2220      	movs	r2, #32
 8005f7a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b09c      	sub	sp, #112	; 0x70
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	603b      	str	r3, [r7, #0]
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fa4:	e0a5      	b.n	80060f2 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fac:	f000 80a1 	beq.w	80060f2 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fb0:	f7fb fff2 	bl	8001f98 <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d302      	bcc.n	8005fc6 <UART_WaitOnFlagUntilTimeout+0x32>
 8005fc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d13e      	bne.n	8006044 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fce:	e853 3f00 	ldrex	r3, [r3]
 8005fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fd6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005fda:	667b      	str	r3, [r7, #100]	; 0x64
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fe4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fe6:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005fea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005fec:	e841 2300 	strex	r3, r2, [r1]
 8005ff0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005ff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1e6      	bne.n	8005fc6 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	3308      	adds	r3, #8
 8005ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006002:	e853 3f00 	ldrex	r3, [r3]
 8006006:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600a:	f023 0301 	bic.w	r3, r3, #1
 800600e:	663b      	str	r3, [r7, #96]	; 0x60
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	3308      	adds	r3, #8
 8006016:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006018:	64ba      	str	r2, [r7, #72]	; 0x48
 800601a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800601e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006020:	e841 2300 	strex	r3, r2, [r1]
 8006024:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1e5      	bne.n	8005ff8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2220      	movs	r2, #32
 8006030:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2220      	movs	r2, #32
 8006036:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e067      	b.n	8006114 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0304 	and.w	r3, r3, #4
 800604e:	2b00      	cmp	r3, #0
 8006050:	d04f      	beq.n	80060f2 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	69db      	ldr	r3, [r3, #28]
 8006058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800605c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006060:	d147      	bne.n	80060f2 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800606a:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006074:	e853 3f00 	ldrex	r3, [r3]
 8006078:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800607a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006080:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	461a      	mov	r2, r3
 8006088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800608a:	637b      	str	r3, [r7, #52]	; 0x34
 800608c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006090:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006092:	e841 2300 	strex	r3, r2, [r1]
 8006096:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1e6      	bne.n	800606c <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	3308      	adds	r3, #8
 80060a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	e853 3f00 	ldrex	r3, [r3]
 80060ac:	613b      	str	r3, [r7, #16]
   return(result);
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	f023 0301 	bic.w	r3, r3, #1
 80060b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	3308      	adds	r3, #8
 80060bc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80060be:	623a      	str	r2, [r7, #32]
 80060c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c2:	69f9      	ldr	r1, [r7, #28]
 80060c4:	6a3a      	ldr	r2, [r7, #32]
 80060c6:	e841 2300 	strex	r3, r2, [r1]
 80060ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1e5      	bne.n	800609e <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2220      	movs	r2, #32
 80060d6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2220      	movs	r2, #32
 80060dc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2220      	movs	r2, #32
 80060e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e010      	b.n	8006114 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	69da      	ldr	r2, [r3, #28]
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	4013      	ands	r3, r2
 80060fc:	68ba      	ldr	r2, [r7, #8]
 80060fe:	429a      	cmp	r2, r3
 8006100:	bf0c      	ite	eq
 8006102:	2301      	moveq	r3, #1
 8006104:	2300      	movne	r3, #0
 8006106:	b2db      	uxtb	r3, r3
 8006108:	461a      	mov	r2, r3
 800610a:	79fb      	ldrb	r3, [r7, #7]
 800610c:	429a      	cmp	r2, r3
 800610e:	f43f af4a 	beq.w	8005fa6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3770      	adds	r7, #112	; 0x70
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 800611c:	b5b0      	push	{r4, r5, r7, lr}
 800611e:	b090      	sub	sp, #64	; 0x40
 8006120:	af04      	add	r7, sp, #16
  uint8_t  MAC_Addr[6];
  uint8_t  IP_Addr[4];
  uint8_t TxData[] = "STM32 : Hello!\n";
 8006122:	4b91      	ldr	r3, [pc, #580]	; (8006368 <main+0x24c>)
 8006124:	f107 0408 	add.w	r4, r7, #8
 8006128:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800612a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  int32_t Socket = -1;
 800612e:	f04f 33ff 	mov.w	r3, #4294967295
 8006132:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t Datalen;
  int32_t ret;
  int16_t Trials = CONNECTION_TRIAL_MAX;
 8006134:	230a      	movs	r3, #10
 8006136:	857b      	strh	r3, [r7, #42]	; 0x2a

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006138:	f7fb ff03 	bl	8001f42 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800613c:	f000 f94e 	bl	80063dc <SystemClock_Config>
  /* Configure LED2 */
  BSP_LED_Init(LED2);
 8006140:	2000      	movs	r0, #0
 8006142:	f7fb fe23 	bl	8001d8c <BSP_LED_Init>

#if defined (TERMINAL_USE)
  /* Initialize all configured peripherals */
  hDiscoUart.Instance = DISCOVERY_COM1;
 8006146:	4b89      	ldr	r3, [pc, #548]	; (800636c <main+0x250>)
 8006148:	4a89      	ldr	r2, [pc, #548]	; (8006370 <main+0x254>)
 800614a:	601a      	str	r2, [r3, #0]
  hDiscoUart.Init.BaudRate = 115200;
 800614c:	4b87      	ldr	r3, [pc, #540]	; (800636c <main+0x250>)
 800614e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006152:	605a      	str	r2, [r3, #4]
  hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 8006154:	4b85      	ldr	r3, [pc, #532]	; (800636c <main+0x250>)
 8006156:	2200      	movs	r2, #0
 8006158:	609a      	str	r2, [r3, #8]
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 800615a:	4b84      	ldr	r3, [pc, #528]	; (800636c <main+0x250>)
 800615c:	2200      	movs	r2, #0
 800615e:	60da      	str	r2, [r3, #12]
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 8006160:	4b82      	ldr	r3, [pc, #520]	; (800636c <main+0x250>)
 8006162:	2200      	movs	r2, #0
 8006164:	611a      	str	r2, [r3, #16]
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 8006166:	4b81      	ldr	r3, [pc, #516]	; (800636c <main+0x250>)
 8006168:	220c      	movs	r2, #12
 800616a:	615a      	str	r2, [r3, #20]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800616c:	4b7f      	ldr	r3, [pc, #508]	; (800636c <main+0x250>)
 800616e:	2200      	movs	r2, #0
 8006170:	619a      	str	r2, [r3, #24]
  hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 8006172:	4b7e      	ldr	r3, [pc, #504]	; (800636c <main+0x250>)
 8006174:	2200      	movs	r2, #0
 8006176:	61da      	str	r2, [r3, #28]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006178:	4b7c      	ldr	r3, [pc, #496]	; (800636c <main+0x250>)
 800617a:	2200      	movs	r2, #0
 800617c:	621a      	str	r2, [r3, #32]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800617e:	4b7b      	ldr	r3, [pc, #492]	; (800636c <main+0x250>)
 8006180:	2200      	movs	r2, #0
 8006182:	625a      	str	r2, [r3, #36]	; 0x24

  BSP_COM_Init(COM1, &hDiscoUart);
 8006184:	4979      	ldr	r1, [pc, #484]	; (800636c <main+0x250>)
 8006186:	2000      	movs	r0, #0
 8006188:	f7fb fe46 	bl	8001e18 <BSP_COM_Init>
#endif /* TERMINAL_USE */

  TERMOUT("****** WIFI Module in TCP Client mode demonstration ****** \n\n");
 800618c:	4879      	ldr	r0, [pc, #484]	; (8006374 <main+0x258>)
 800618e:	f000 fb69 	bl	8006864 <puts>
  TERMOUT("TCP Client Instructions :\n");
 8006192:	4879      	ldr	r0, [pc, #484]	; (8006378 <main+0x25c>)
 8006194:	f000 fb66 	bl	8006864 <puts>
  TERMOUT("1- Make sure your Phone is connected to the same network that\n");
 8006198:	4878      	ldr	r0, [pc, #480]	; (800637c <main+0x260>)
 800619a:	f000 fb63 	bl	8006864 <puts>
  TERMOUT("   you configured using the Configuration Access Point.\n");
 800619e:	4878      	ldr	r0, [pc, #480]	; (8006380 <main+0x264>)
 80061a0:	f000 fb60 	bl	8006864 <puts>
  TERMOUT("2- Create a server by using the android application TCP Server\n");
 80061a4:	4877      	ldr	r0, [pc, #476]	; (8006384 <main+0x268>)
 80061a6:	f000 fb5d 	bl	8006864 <puts>
  TERMOUT("   with port(8002).\n");
 80061aa:	4877      	ldr	r0, [pc, #476]	; (8006388 <main+0x26c>)
 80061ac:	f000 fb5a 	bl	8006864 <puts>
  TERMOUT("3- Get the Network Name or IP Address of your Android from the step 2.\n\n");
 80061b0:	4876      	ldr	r0, [pc, #472]	; (800638c <main+0x270>)
 80061b2:	f000 fb57 	bl	8006864 <puts>



  /*Initialize  WIFI module */
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 80061b6:	f7fb fceb 	bl	8001b90 <WIFI_Init>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f040 8090 	bne.w	80062e2 <main+0x1c6>
  {
    TERMOUT("> WIFI Module Initialized.\n");
 80061c2:	4873      	ldr	r0, [pc, #460]	; (8006390 <main+0x274>)
 80061c4:	f000 fb4e 	bl	8006864 <puts>
    if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 80061c8:	f107 031c 	add.w	r3, r7, #28
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7fb fd2d 	bl	8001c2c <WIFI_GetMAC_Address>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d114      	bne.n	8006202 <main+0xe6>
    {
      TERMOUT("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 80061d8:	7f3b      	ldrb	r3, [r7, #28]
 80061da:	4618      	mov	r0, r3
 80061dc:	7f7b      	ldrb	r3, [r7, #29]
 80061de:	461c      	mov	r4, r3
 80061e0:	7fbb      	ldrb	r3, [r7, #30]
 80061e2:	461d      	mov	r5, r3
 80061e4:	7ffb      	ldrb	r3, [r7, #31]
 80061e6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80061ea:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 80061ee:	9102      	str	r1, [sp, #8]
 80061f0:	9201      	str	r2, [sp, #4]
 80061f2:	9300      	str	r3, [sp, #0]
 80061f4:	462b      	mov	r3, r5
 80061f6:	4622      	mov	r2, r4
 80061f8:	4601      	mov	r1, r0
 80061fa:	4866      	ldr	r0, [pc, #408]	; (8006394 <main+0x278>)
 80061fc:	f000 faac 	bl	8006758 <iprintf>
 8006200:	e005      	b.n	800620e <main+0xf2>
               MAC_Addr[4],
               MAC_Addr[5]);
    }
    else
    {
      TERMOUT("> ERROR : CANNOT get MAC address\n");
 8006202:	4865      	ldr	r0, [pc, #404]	; (8006398 <main+0x27c>)
 8006204:	f000 fb2e 	bl	8006864 <puts>
      BSP_LED_On(LED2);
 8006208:	2000      	movs	r0, #0
 800620a:	f7fb fdef 	bl	8001dec <BSP_LED_On>
    }

    if( WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 800620e:	2203      	movs	r2, #3
 8006210:	4962      	ldr	r1, [pc, #392]	; (800639c <main+0x280>)
 8006212:	4863      	ldr	r0, [pc, #396]	; (80063a0 <main+0x284>)
 8006214:	f7fb fce8 	bl	8001be8 <WIFI_Connect>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d15a      	bne.n	80062d4 <main+0x1b8>
    {
      TERMOUT("> es-wifi module connected \n");
 800621e:	4861      	ldr	r0, [pc, #388]	; (80063a4 <main+0x288>)
 8006220:	f000 fb20 	bl	8006864 <puts>
      if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 8006224:	f107 0318 	add.w	r3, r7, #24
 8006228:	4618      	mov	r0, r3
 800622a:	f7fb fd15 	bl	8001c58 <WIFI_GetIP_Address>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d148      	bne.n	80062c6 <main+0x1aa>
      {
        TERMOUT("> es-wifi module got IP Address : %d.%d.%d.%d\n",
 8006234:	7e3b      	ldrb	r3, [r7, #24]
 8006236:	4619      	mov	r1, r3
 8006238:	7e7b      	ldrb	r3, [r7, #25]
 800623a:	461a      	mov	r2, r3
 800623c:	7ebb      	ldrb	r3, [r7, #26]
 800623e:	4618      	mov	r0, r3
 8006240:	7efb      	ldrb	r3, [r7, #27]
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	4603      	mov	r3, r0
 8006246:	4858      	ldr	r0, [pc, #352]	; (80063a8 <main+0x28c>)
 8006248:	f000 fa86 	bl	8006758 <iprintf>
               IP_Addr[0],
               IP_Addr[1],
               IP_Addr[2],
               IP_Addr[3]);

        TERMOUT("> Trying to connect to Server: %d.%d.%d.%d:%d ...\n",
 800624c:	4b57      	ldr	r3, [pc, #348]	; (80063ac <main+0x290>)
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	4619      	mov	r1, r3
 8006252:	4b56      	ldr	r3, [pc, #344]	; (80063ac <main+0x290>)
 8006254:	785b      	ldrb	r3, [r3, #1]
 8006256:	4618      	mov	r0, r3
 8006258:	4b54      	ldr	r3, [pc, #336]	; (80063ac <main+0x290>)
 800625a:	789b      	ldrb	r3, [r3, #2]
 800625c:	461c      	mov	r4, r3
 800625e:	4b53      	ldr	r3, [pc, #332]	; (80063ac <main+0x290>)
 8006260:	78db      	ldrb	r3, [r3, #3]
 8006262:	461a      	mov	r2, r3
 8006264:	f641 7342 	movw	r3, #8002	; 0x1f42
 8006268:	9301      	str	r3, [sp, #4]
 800626a:	9200      	str	r2, [sp, #0]
 800626c:	4623      	mov	r3, r4
 800626e:	4602      	mov	r2, r0
 8006270:	484f      	ldr	r0, [pc, #316]	; (80063b0 <main+0x294>)
 8006272:	f000 fa71 	bl	8006758 <iprintf>
               RemoteIP[1],
               RemoteIP[2],
               RemoteIP[3],
							 RemotePORT);

        while (Trials--)
 8006276:	e013      	b.n	80062a0 <main+0x184>
        {
          if( WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", RemoteIP, RemotePORT, 0) == WIFI_STATUS_OK)
 8006278:	2300      	movs	r3, #0
 800627a:	9301      	str	r3, [sp, #4]
 800627c:	f641 7342 	movw	r3, #8002	; 0x1f42
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	4b4a      	ldr	r3, [pc, #296]	; (80063ac <main+0x290>)
 8006284:	4a4b      	ldr	r2, [pc, #300]	; (80063b4 <main+0x298>)
 8006286:	2100      	movs	r1, #0
 8006288:	2000      	movs	r0, #0
 800628a:	f7fb fd01 	bl	8001c90 <WIFI_OpenClientConnection>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d105      	bne.n	80062a0 <main+0x184>
          {
            TERMOUT("> TCP Connection opened successfully.\n");
 8006294:	4848      	ldr	r0, [pc, #288]	; (80063b8 <main+0x29c>)
 8006296:	f000 fae5 	bl	8006864 <puts>
            Socket = 0;
 800629a:	2300      	movs	r3, #0
 800629c:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800629e:	e007      	b.n	80062b0 <main+0x194>
        while (Trials--)
 80062a0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	3a01      	subs	r2, #1
 80062a8:	b292      	uxth	r2, r2
 80062aa:	857a      	strh	r2, [r7, #42]	; 0x2a
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1e3      	bne.n	8006278 <main+0x15c>
          }
        }
        if(Socket == -1)
 80062b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b6:	d11a      	bne.n	80062ee <main+0x1d2>
        {
          TERMOUT("> ERROR : Cannot open Connection\n");
 80062b8:	4840      	ldr	r0, [pc, #256]	; (80063bc <main+0x2a0>)
 80062ba:	f000 fad3 	bl	8006864 <puts>
          BSP_LED_On(LED2);
 80062be:	2000      	movs	r0, #0
 80062c0:	f7fb fd94 	bl	8001dec <BSP_LED_On>
 80062c4:	e013      	b.n	80062ee <main+0x1d2>
        }
      }
      else
      {
        TERMOUT("> ERROR : es-wifi module CANNOT get IP address\n");
 80062c6:	483e      	ldr	r0, [pc, #248]	; (80063c0 <main+0x2a4>)
 80062c8:	f000 facc 	bl	8006864 <puts>
        BSP_LED_On(LED2);
 80062cc:	2000      	movs	r0, #0
 80062ce:	f7fb fd8d 	bl	8001dec <BSP_LED_On>
 80062d2:	e00c      	b.n	80062ee <main+0x1d2>
      }
    }
    else
    {
      TERMOUT("> ERROR : es-wifi module NOT connected\n");
 80062d4:	483b      	ldr	r0, [pc, #236]	; (80063c4 <main+0x2a8>)
 80062d6:	f000 fac5 	bl	8006864 <puts>
      BSP_LED_On(LED2);
 80062da:	2000      	movs	r0, #0
 80062dc:	f7fb fd86 	bl	8001dec <BSP_LED_On>
 80062e0:	e005      	b.n	80062ee <main+0x1d2>
    }
  }
  else
  {
    TERMOUT("> ERROR : WIFI Module cannot be initialized.\n");
 80062e2:	4839      	ldr	r0, [pc, #228]	; (80063c8 <main+0x2ac>)
 80062e4:	f000 fabe 	bl	8006864 <puts>
    BSP_LED_On(LED2);
 80062e8:	2000      	movs	r0, #0
 80062ea:	f7fb fd7f 	bl	8001dec <BSP_LED_On>
  }

  while(1)
  {
    if(Socket != -1)
 80062ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f4:	d0fb      	beq.n	80062ee <main+0x1d2>
    {
      ret = WIFI_ReceiveData(Socket, RxData, sizeof(RxData)-1, &Datalen, WIFI_READ_TIMEOUT);
 80062f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f8:	b2d8      	uxtb	r0, r3
 80062fa:	1dbb      	adds	r3, r7, #6
 80062fc:	f242 7210 	movw	r2, #10000	; 0x2710
 8006300:	9200      	str	r2, [sp, #0]
 8006302:	f240 12f3 	movw	r2, #499	; 0x1f3
 8006306:	4931      	ldr	r1, [pc, #196]	; (80063cc <main+0x2b0>)
 8006308:	f7fb fd1e 	bl	8001d48 <WIFI_ReceiveData>
 800630c:	4603      	mov	r3, r0
 800630e:	627b      	str	r3, [r7, #36]	; 0x24
      if(ret == WIFI_STATUS_OK)
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	2b00      	cmp	r3, #0
 8006314:	d11f      	bne.n	8006356 <main+0x23a>
      {
        if(Datalen > 0)
 8006316:	88fb      	ldrh	r3, [r7, #6]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d0e8      	beq.n	80062ee <main+0x1d2>
        {
          RxData[Datalen]=0;
 800631c:	88fb      	ldrh	r3, [r7, #6]
 800631e:	461a      	mov	r2, r3
 8006320:	4b2a      	ldr	r3, [pc, #168]	; (80063cc <main+0x2b0>)
 8006322:	2100      	movs	r1, #0
 8006324:	5499      	strb	r1, [r3, r2]
          TERMOUT("Received: %s\n",RxData);
 8006326:	4929      	ldr	r1, [pc, #164]	; (80063cc <main+0x2b0>)
 8006328:	4829      	ldr	r0, [pc, #164]	; (80063d0 <main+0x2b4>)
 800632a:	f000 fa15 	bl	8006758 <iprintf>
          ret = WIFI_SendData(Socket, TxData, sizeof(TxData), &Datalen, WIFI_WRITE_TIMEOUT);
 800632e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006330:	b2d8      	uxtb	r0, r3
 8006332:	1dbb      	adds	r3, r7, #6
 8006334:	f107 0108 	add.w	r1, r7, #8
 8006338:	f242 7210 	movw	r2, #10000	; 0x2710
 800633c:	9200      	str	r2, [sp, #0]
 800633e:	2210      	movs	r2, #16
 8006340:	f7fb fce0 	bl	8001d04 <WIFI_SendData>
 8006344:	4603      	mov	r3, r0
 8006346:	627b      	str	r3, [r7, #36]	; 0x24
          if (ret != WIFI_STATUS_OK)
 8006348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634a:	2b00      	cmp	r3, #0
 800634c:	d0cf      	beq.n	80062ee <main+0x1d2>
          {
            TERMOUT("> ERROR : Failed to Send Data, connection closed\n");
 800634e:	4821      	ldr	r0, [pc, #132]	; (80063d4 <main+0x2b8>)
 8006350:	f000 fa88 	bl	8006864 <puts>
            break;
 8006354:	e002      	b.n	800635c <main+0x240>
          }
        }
      }
      else
      {
        TERMOUT("> ERROR : Failed to Receive Data, connection closed\n");
 8006356:	4820      	ldr	r0, [pc, #128]	; (80063d8 <main+0x2bc>)
 8006358:	f000 fa84 	bl	8006864 <puts>
 800635c:	2300      	movs	r3, #0
        break;
      }
    }
  }
}
 800635e:	4618      	mov	r0, r3
 8006360:	3730      	adds	r7, #48	; 0x30
 8006362:	46bd      	mov	sp, r7
 8006364:	bdb0      	pop	{r4, r5, r7, pc}
 8006366:	bf00      	nop
 8006368:	080085c0 	.word	0x080085c0
 800636c:	20000a1c 	.word	0x20000a1c
 8006370:	40013800 	.word	0x40013800
 8006374:	080081cc 	.word	0x080081cc
 8006378:	0800820c 	.word	0x0800820c
 800637c:	08008228 	.word	0x08008228
 8006380:	08008268 	.word	0x08008268
 8006384:	080082a0 	.word	0x080082a0
 8006388:	080082e0 	.word	0x080082e0
 800638c:	080082f4 	.word	0x080082f4
 8006390:	0800833c 	.word	0x0800833c
 8006394:	08008358 	.word	0x08008358
 8006398:	0800838c 	.word	0x0800838c
 800639c:	080083b0 	.word	0x080083b0
 80063a0:	080083d8 	.word	0x080083d8
 80063a4:	080083e8 	.word	0x080083e8
 80063a8:	08008404 	.word	0x08008404
 80063ac:	20000018 	.word	0x20000018
 80063b0:	08008434 	.word	0x08008434
 80063b4:	08008468 	.word	0x08008468
 80063b8:	08008474 	.word	0x08008474
 80063bc:	0800849c 	.word	0x0800849c
 80063c0:	080084c0 	.word	0x080084c0
 80063c4:	080084f0 	.word	0x080084f0
 80063c8:	08008518 	.word	0x08008518
 80063cc:	20000af0 	.word	0x20000af0
 80063d0:	08008548 	.word	0x08008548
 80063d4:	08008558 	.word	0x08008558
 80063d8:	0800858c 	.word	0x0800858c

080063dc <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b096      	sub	sp, #88	; 0x58
 80063e0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80063e2:	2310      	movs	r3, #16
 80063e4:	603b      	str	r3, [r7, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80063e6:	2301      	movs	r3, #1
 80063e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80063ea:	2360      	movs	r3, #96	; 0x60
 80063ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80063ee:	2300      	movs	r3, #0
 80063f0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80063f2:	2302      	movs	r3, #2
 80063f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80063f6:	2301      	movs	r3, #1
 80063f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80063fa:	2301      	movs	r3, #1
 80063fc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 40;
 80063fe:	2328      	movs	r3, #40	; 0x28
 8006400:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006402:	2302      	movs	r3, #2
 8006404:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = 7;
 8006406:	2307      	movs	r3, #7
 8006408:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800640a:	2304      	movs	r3, #4
 800640c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800640e:	463b      	mov	r3, r7
 8006410:	4618      	mov	r0, r3
 8006412:	f7fc f90f 	bl	8002634 <HAL_RCC_OscConfig>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d000      	beq.n	800641e <SystemClock_Config+0x42>
  {
    /* Initialization Error */
    while(1);
 800641c:	e7fe      	b.n	800641c <SystemClock_Config+0x40>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800641e:	230f      	movs	r3, #15
 8006420:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006422:	2303      	movs	r3, #3
 8006424:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006426:	2300      	movs	r3, #0
 8006428:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800642a:	2300      	movs	r3, #0
 800642c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800642e:	2300      	movs	r3, #0
 8006430:	657b      	str	r3, [r7, #84]	; 0x54
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8006432:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006436:	2104      	movs	r1, #4
 8006438:	4618      	mov	r0, r3
 800643a:	f7fc fce3 	bl	8002e04 <HAL_RCC_ClockConfig>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d000      	beq.n	8006446 <SystemClock_Config+0x6a>
  {
    /* Initialization Error */
    while(1);
 8006444:	e7fe      	b.n	8006444 <SystemClock_Config+0x68>
  }
}
 8006446:	bf00      	nop
 8006448:	3758      	adds	r7, #88	; 0x58
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
	...

08006450 <__io_putchar>:
  * @brief  Retargets the C library TERMOUT function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 8006458:	1d39      	adds	r1, r7, #4
 800645a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800645e:	2201      	movs	r2, #1
 8006460:	4803      	ldr	r0, [pc, #12]	; (8006470 <__io_putchar+0x20>)
 8006462:	f7ff f960 	bl	8005726 <HAL_UART_Transmit>

  return ch;
 8006466:	687b      	ldr	r3, [r7, #4]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3708      	adds	r7, #8
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	20000a1c 	.word	0x20000a1c

08006474 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	4603      	mov	r3, r0
 800647c:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800647e:	88fb      	ldrh	r3, [r7, #6]
 8006480:	2b02      	cmp	r3, #2
 8006482:	d102      	bne.n	800648a <HAL_GPIO_EXTI_Callback+0x16>
  {
    case (GPIO_PIN_1):
    {
      SPI_WIFI_ISR();
 8006484:	f7fb fb74 	bl	8001b70 <SPI_WIFI_ISR>
      break;
 8006488:	e000      	b.n	800648c <HAL_GPIO_EXTI_Callback+0x18>
    }
    default:
    {
      break;
 800648a:	bf00      	nop
    }
  }
}
 800648c:	bf00      	nop
 800648e:	3708      	adds	r7, #8
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <SPI3_IRQHandler>:

void SPI3_IRQHandler(void)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8006498:	4802      	ldr	r0, [pc, #8]	; (80064a4 <SPI3_IRQHandler+0x10>)
 800649a:	f7fd ff0b 	bl	80042b4 <HAL_SPI_IRQHandler>
}
 800649e:	bf00      	nop
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	200000a8 	.word	0x200000a8

080064a8 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80064a8:	b480      	push	{r7}
 80064aa:	af00      	add	r7, sp, #0
}
 80064ac:	bf00      	nop
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bc80      	pop	{r7}
 80064b2:	4770      	bx	lr

080064b4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80064b4:	b480      	push	{r7}
 80064b6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80064b8:	e7fe      	b.n	80064b8 <HardFault_Handler+0x4>

080064ba <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80064ba:	b480      	push	{r7}
 80064bc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80064be:	e7fe      	b.n	80064be <MemManage_Handler+0x4>

080064c0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80064c0:	b480      	push	{r7}
 80064c2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80064c4:	e7fe      	b.n	80064c4 <BusFault_Handler+0x4>

080064c6 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80064c6:	b480      	push	{r7}
 80064c8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80064ca:	e7fe      	b.n	80064ca <UsageFault_Handler+0x4>

080064cc <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80064cc:	b480      	push	{r7}
 80064ce:	af00      	add	r7, sp, #0
}
 80064d0:	bf00      	nop
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bc80      	pop	{r7}
 80064d6:	4770      	bx	lr

080064d8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80064d8:	b480      	push	{r7}
 80064da:	af00      	add	r7, sp, #0
}
 80064dc:	bf00      	nop
 80064de:	46bd      	mov	sp, r7
 80064e0:	bc80      	pop	{r7}
 80064e2:	4770      	bx	lr

080064e4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80064e4:	b480      	push	{r7}
 80064e6:	af00      	add	r7, sp, #0
}
 80064e8:	bf00      	nop
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bc80      	pop	{r7}
 80064ee:	4770      	bx	lr

080064f0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80064f4:	f7fb fd3e 	bl	8001f74 <HAL_IncTick>
}
 80064f8:	bf00      	nop
 80064fa:	bd80      	pop	{r7, pc}

080064fc <EXTI1_IRQHandler>:
  * @brief  This function handles external lines 1interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8006500:	2002      	movs	r0, #2
 8006502:	f7fc f86d 	bl	80025e0 <HAL_GPIO_EXTI_IRQHandler>
}
 8006506:	bf00      	nop
 8006508:	bd80      	pop	{r7, pc}

0800650a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800650a:	b480      	push	{r7}
 800650c:	af00      	add	r7, sp, #0
	return 1;
 800650e:	2301      	movs	r3, #1
}
 8006510:	4618      	mov	r0, r3
 8006512:	46bd      	mov	sp, r7
 8006514:	bc80      	pop	{r7}
 8006516:	4770      	bx	lr

08006518 <_kill>:

int _kill(int pid, int sig)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006522:	f000 f8c9 	bl	80066b8 <__errno>
 8006526:	4603      	mov	r3, r0
 8006528:	2216      	movs	r2, #22
 800652a:	601a      	str	r2, [r3, #0]
	return -1;
 800652c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006530:	4618      	mov	r0, r3
 8006532:	3708      	adds	r7, #8
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <_exit>:

void _exit (int status)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006540:	f04f 31ff 	mov.w	r1, #4294967295
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7ff ffe7 	bl	8006518 <_kill>
	while (1) {}		/* Make sure we hang here */
 800654a:	e7fe      	b.n	800654a <_exit+0x12>

0800654c <_read>:
}

int _read (int file, char *ptr, int len)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
	/* The I/O library uses an internal buffer */
	/* It asks for 1024 characters even if only getc() is used. */
	/* If we use a for(;;) loop on the number of characters requested, */
	/* the user is forced to enter the exact number requested, even if only one is needed. */
	/* So here we return only 1 character even if requested length is > 1 */
	*ptr = __io_getchar();
 8006558:	f3af 8000 	nop.w
 800655c:	4603      	mov	r3, r0
 800655e:	b2da      	uxtb	r2, r3
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	701a      	strb	r2, [r3, #0]

	return 1;
 8006564:	2301      	movs	r3, #1
}
 8006566:	4618      	mov	r0, r3
 8006568:	3710      	adds	r7, #16
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <_write>:

int _write(int file, char *ptr, int len)
{
 800656e:	b580      	push	{r7, lr}
 8006570:	b086      	sub	sp, #24
 8006572:	af00      	add	r7, sp, #0
 8006574:	60f8      	str	r0, [r7, #12]
 8006576:	60b9      	str	r1, [r7, #8]
 8006578:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800657a:	2300      	movs	r3, #0
 800657c:	617b      	str	r3, [r7, #20]
 800657e:	e009      	b.n	8006594 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	1c5a      	adds	r2, r3, #1
 8006584:	60ba      	str	r2, [r7, #8]
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	4618      	mov	r0, r3
 800658a:	f7ff ff61 	bl	8006450 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	3301      	adds	r3, #1
 8006592:	617b      	str	r3, [r7, #20]
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	429a      	cmp	r2, r3
 800659a:	dbf1      	blt.n	8006580 <_write+0x12>
	}
	return len;
 800659c:	687b      	ldr	r3, [r7, #4]
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3718      	adds	r7, #24
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
	...

080065a8 <_sbrk>:

caddr_t _sbrk(int incr)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80065b0:	4b11      	ldr	r3, [pc, #68]	; (80065f8 <_sbrk+0x50>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d102      	bne.n	80065be <_sbrk+0x16>
		heap_end = &end;
 80065b8:	4b0f      	ldr	r3, [pc, #60]	; (80065f8 <_sbrk+0x50>)
 80065ba:	4a10      	ldr	r2, [pc, #64]	; (80065fc <_sbrk+0x54>)
 80065bc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80065be:	4b0e      	ldr	r3, [pc, #56]	; (80065f8 <_sbrk+0x50>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80065c4:	4b0c      	ldr	r3, [pc, #48]	; (80065f8 <_sbrk+0x50>)
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4413      	add	r3, r2
 80065cc:	466a      	mov	r2, sp
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d907      	bls.n	80065e2 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80065d2:	f000 f871 	bl	80066b8 <__errno>
 80065d6:	4603      	mov	r3, r0
 80065d8:	220c      	movs	r2, #12
 80065da:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80065dc:	f04f 33ff 	mov.w	r3, #4294967295
 80065e0:	e006      	b.n	80065f0 <_sbrk+0x48>
	}

	heap_end += incr;
 80065e2:	4b05      	ldr	r3, [pc, #20]	; (80065f8 <_sbrk+0x50>)
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4413      	add	r3, r2
 80065ea:	4a03      	ldr	r2, [pc, #12]	; (80065f8 <_sbrk+0x50>)
 80065ec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80065ee:	68fb      	ldr	r3, [r7, #12]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	20000ce4 	.word	0x20000ce4
 80065fc:	20000cf8 	.word	0x20000cf8

08006600 <_close>:

int _close(int file)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
	return -1;
 8006608:	f04f 33ff 	mov.w	r3, #4294967295
}
 800660c:	4618      	mov	r0, r3
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	bc80      	pop	{r7}
 8006614:	4770      	bx	lr

08006616 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006616:	b480      	push	{r7}
 8006618:	b083      	sub	sp, #12
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
 800661e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006626:	605a      	str	r2, [r3, #4]
	return 0;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	370c      	adds	r7, #12
 800662e:	46bd      	mov	sp, r7
 8006630:	bc80      	pop	{r7}
 8006632:	4770      	bx	lr

08006634 <_isatty>:

int _isatty(int file)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
	return 1;
 800663c:	2301      	movs	r3, #1
}
 800663e:	4618      	mov	r0, r3
 8006640:	370c      	adds	r7, #12
 8006642:	46bd      	mov	sp, r7
 8006644:	bc80      	pop	{r7}
 8006646:	4770      	bx	lr

08006648 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
	return 0;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3714      	adds	r7, #20
 800665a:	46bd      	mov	sp, r7
 800665c:	bc80      	pop	{r7}
 800665e:	4770      	bx	lr

08006660 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006660:	b480      	push	{r7}
 8006662:	af00      	add	r7, sp, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006664:	4b12      	ldr	r3, [pc, #72]	; (80066b0 <SystemInit+0x50>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a11      	ldr	r2, [pc, #68]	; (80066b0 <SystemInit+0x50>)
 800666a:	f043 0301 	orr.w	r3, r3, #1
 800666e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006670:	4b0f      	ldr	r3, [pc, #60]	; (80066b0 <SystemInit+0x50>)
 8006672:	2200      	movs	r2, #0
 8006674:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8006676:	4b0e      	ldr	r3, [pc, #56]	; (80066b0 <SystemInit+0x50>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a0d      	ldr	r2, [pc, #52]	; (80066b0 <SystemInit+0x50>)
 800667c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8006680:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8006684:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8006686:	4b0a      	ldr	r3, [pc, #40]	; (80066b0 <SystemInit+0x50>)
 8006688:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800668c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800668e:	4b08      	ldr	r3, [pc, #32]	; (80066b0 <SystemInit+0x50>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a07      	ldr	r2, [pc, #28]	; (80066b0 <SystemInit+0x50>)
 8006694:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006698:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800669a:	4b05      	ldr	r3, [pc, #20]	; (80066b0 <SystemInit+0x50>)
 800669c:	2200      	movs	r2, #0
 800669e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80066a0:	4b04      	ldr	r3, [pc, #16]	; (80066b4 <SystemInit+0x54>)
 80066a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80066a6:	609a      	str	r2, [r3, #8]
#endif
}
 80066a8:	bf00      	nop
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bc80      	pop	{r7}
 80066ae:	4770      	bx	lr
 80066b0:	40021000 	.word	0x40021000
 80066b4:	e000ed00 	.word	0xe000ed00

080066b8 <__errno>:
 80066b8:	4b01      	ldr	r3, [pc, #4]	; (80066c0 <__errno+0x8>)
 80066ba:	6818      	ldr	r0, [r3, #0]
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	20000020 	.word	0x20000020

080066c4 <__libc_init_array>:
 80066c4:	b570      	push	{r4, r5, r6, lr}
 80066c6:	4d0d      	ldr	r5, [pc, #52]	; (80066fc <__libc_init_array+0x38>)
 80066c8:	4c0d      	ldr	r4, [pc, #52]	; (8006700 <__libc_init_array+0x3c>)
 80066ca:	1b64      	subs	r4, r4, r5
 80066cc:	10a4      	asrs	r4, r4, #2
 80066ce:	2600      	movs	r6, #0
 80066d0:	42a6      	cmp	r6, r4
 80066d2:	d109      	bne.n	80066e8 <__libc_init_array+0x24>
 80066d4:	4d0b      	ldr	r5, [pc, #44]	; (8006704 <__libc_init_array+0x40>)
 80066d6:	4c0c      	ldr	r4, [pc, #48]	; (8006708 <__libc_init_array+0x44>)
 80066d8:	f001 fb12 	bl	8007d00 <_init>
 80066dc:	1b64      	subs	r4, r4, r5
 80066de:	10a4      	asrs	r4, r4, #2
 80066e0:	2600      	movs	r6, #0
 80066e2:	42a6      	cmp	r6, r4
 80066e4:	d105      	bne.n	80066f2 <__libc_init_array+0x2e>
 80066e6:	bd70      	pop	{r4, r5, r6, pc}
 80066e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ec:	4798      	blx	r3
 80066ee:	3601      	adds	r6, #1
 80066f0:	e7ee      	b.n	80066d0 <__libc_init_array+0xc>
 80066f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80066f6:	4798      	blx	r3
 80066f8:	3601      	adds	r6, #1
 80066fa:	e7f2      	b.n	80066e2 <__libc_init_array+0x1e>
 80066fc:	08008768 	.word	0x08008768
 8006700:	08008768 	.word	0x08008768
 8006704:	08008768 	.word	0x08008768
 8006708:	0800876c 	.word	0x0800876c

0800670c <memcmp>:
 800670c:	b510      	push	{r4, lr}
 800670e:	3901      	subs	r1, #1
 8006710:	4402      	add	r2, r0
 8006712:	4290      	cmp	r0, r2
 8006714:	d101      	bne.n	800671a <memcmp+0xe>
 8006716:	2000      	movs	r0, #0
 8006718:	e005      	b.n	8006726 <memcmp+0x1a>
 800671a:	7803      	ldrb	r3, [r0, #0]
 800671c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006720:	42a3      	cmp	r3, r4
 8006722:	d001      	beq.n	8006728 <memcmp+0x1c>
 8006724:	1b18      	subs	r0, r3, r4
 8006726:	bd10      	pop	{r4, pc}
 8006728:	3001      	adds	r0, #1
 800672a:	e7f2      	b.n	8006712 <memcmp+0x6>

0800672c <memcpy>:
 800672c:	440a      	add	r2, r1
 800672e:	4291      	cmp	r1, r2
 8006730:	f100 33ff 	add.w	r3, r0, #4294967295
 8006734:	d100      	bne.n	8006738 <memcpy+0xc>
 8006736:	4770      	bx	lr
 8006738:	b510      	push	{r4, lr}
 800673a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800673e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006742:	4291      	cmp	r1, r2
 8006744:	d1f9      	bne.n	800673a <memcpy+0xe>
 8006746:	bd10      	pop	{r4, pc}

08006748 <memset>:
 8006748:	4402      	add	r2, r0
 800674a:	4603      	mov	r3, r0
 800674c:	4293      	cmp	r3, r2
 800674e:	d100      	bne.n	8006752 <memset+0xa>
 8006750:	4770      	bx	lr
 8006752:	f803 1b01 	strb.w	r1, [r3], #1
 8006756:	e7f9      	b.n	800674c <memset+0x4>

08006758 <iprintf>:
 8006758:	b40f      	push	{r0, r1, r2, r3}
 800675a:	4b0a      	ldr	r3, [pc, #40]	; (8006784 <iprintf+0x2c>)
 800675c:	b513      	push	{r0, r1, r4, lr}
 800675e:	681c      	ldr	r4, [r3, #0]
 8006760:	b124      	cbz	r4, 800676c <iprintf+0x14>
 8006762:	69a3      	ldr	r3, [r4, #24]
 8006764:	b913      	cbnz	r3, 800676c <iprintf+0x14>
 8006766:	4620      	mov	r0, r4
 8006768:	f000 fb1e 	bl	8006da8 <__sinit>
 800676c:	ab05      	add	r3, sp, #20
 800676e:	9a04      	ldr	r2, [sp, #16]
 8006770:	68a1      	ldr	r1, [r4, #8]
 8006772:	9301      	str	r3, [sp, #4]
 8006774:	4620      	mov	r0, r4
 8006776:	f000 fe99 	bl	80074ac <_vfiprintf_r>
 800677a:	b002      	add	sp, #8
 800677c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006780:	b004      	add	sp, #16
 8006782:	4770      	bx	lr
 8006784:	20000020 	.word	0x20000020

08006788 <_puts_r>:
 8006788:	b570      	push	{r4, r5, r6, lr}
 800678a:	460e      	mov	r6, r1
 800678c:	4605      	mov	r5, r0
 800678e:	b118      	cbz	r0, 8006798 <_puts_r+0x10>
 8006790:	6983      	ldr	r3, [r0, #24]
 8006792:	b90b      	cbnz	r3, 8006798 <_puts_r+0x10>
 8006794:	f000 fb08 	bl	8006da8 <__sinit>
 8006798:	69ab      	ldr	r3, [r5, #24]
 800679a:	68ac      	ldr	r4, [r5, #8]
 800679c:	b913      	cbnz	r3, 80067a4 <_puts_r+0x1c>
 800679e:	4628      	mov	r0, r5
 80067a0:	f000 fb02 	bl	8006da8 <__sinit>
 80067a4:	4b2c      	ldr	r3, [pc, #176]	; (8006858 <_puts_r+0xd0>)
 80067a6:	429c      	cmp	r4, r3
 80067a8:	d120      	bne.n	80067ec <_puts_r+0x64>
 80067aa:	686c      	ldr	r4, [r5, #4]
 80067ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067ae:	07db      	lsls	r3, r3, #31
 80067b0:	d405      	bmi.n	80067be <_puts_r+0x36>
 80067b2:	89a3      	ldrh	r3, [r4, #12]
 80067b4:	0598      	lsls	r0, r3, #22
 80067b6:	d402      	bmi.n	80067be <_puts_r+0x36>
 80067b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067ba:	f000 fba5 	bl	8006f08 <__retarget_lock_acquire_recursive>
 80067be:	89a3      	ldrh	r3, [r4, #12]
 80067c0:	0719      	lsls	r1, r3, #28
 80067c2:	d51d      	bpl.n	8006800 <_puts_r+0x78>
 80067c4:	6923      	ldr	r3, [r4, #16]
 80067c6:	b1db      	cbz	r3, 8006800 <_puts_r+0x78>
 80067c8:	3e01      	subs	r6, #1
 80067ca:	68a3      	ldr	r3, [r4, #8]
 80067cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80067d0:	3b01      	subs	r3, #1
 80067d2:	60a3      	str	r3, [r4, #8]
 80067d4:	bb39      	cbnz	r1, 8006826 <_puts_r+0x9e>
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	da38      	bge.n	800684c <_puts_r+0xc4>
 80067da:	4622      	mov	r2, r4
 80067dc:	210a      	movs	r1, #10
 80067de:	4628      	mov	r0, r5
 80067e0:	f000 f8ee 	bl	80069c0 <__swbuf_r>
 80067e4:	3001      	adds	r0, #1
 80067e6:	d011      	beq.n	800680c <_puts_r+0x84>
 80067e8:	250a      	movs	r5, #10
 80067ea:	e011      	b.n	8006810 <_puts_r+0x88>
 80067ec:	4b1b      	ldr	r3, [pc, #108]	; (800685c <_puts_r+0xd4>)
 80067ee:	429c      	cmp	r4, r3
 80067f0:	d101      	bne.n	80067f6 <_puts_r+0x6e>
 80067f2:	68ac      	ldr	r4, [r5, #8]
 80067f4:	e7da      	b.n	80067ac <_puts_r+0x24>
 80067f6:	4b1a      	ldr	r3, [pc, #104]	; (8006860 <_puts_r+0xd8>)
 80067f8:	429c      	cmp	r4, r3
 80067fa:	bf08      	it	eq
 80067fc:	68ec      	ldreq	r4, [r5, #12]
 80067fe:	e7d5      	b.n	80067ac <_puts_r+0x24>
 8006800:	4621      	mov	r1, r4
 8006802:	4628      	mov	r0, r5
 8006804:	f000 f92e 	bl	8006a64 <__swsetup_r>
 8006808:	2800      	cmp	r0, #0
 800680a:	d0dd      	beq.n	80067c8 <_puts_r+0x40>
 800680c:	f04f 35ff 	mov.w	r5, #4294967295
 8006810:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006812:	07da      	lsls	r2, r3, #31
 8006814:	d405      	bmi.n	8006822 <_puts_r+0x9a>
 8006816:	89a3      	ldrh	r3, [r4, #12]
 8006818:	059b      	lsls	r3, r3, #22
 800681a:	d402      	bmi.n	8006822 <_puts_r+0x9a>
 800681c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800681e:	f000 fb74 	bl	8006f0a <__retarget_lock_release_recursive>
 8006822:	4628      	mov	r0, r5
 8006824:	bd70      	pop	{r4, r5, r6, pc}
 8006826:	2b00      	cmp	r3, #0
 8006828:	da04      	bge.n	8006834 <_puts_r+0xac>
 800682a:	69a2      	ldr	r2, [r4, #24]
 800682c:	429a      	cmp	r2, r3
 800682e:	dc06      	bgt.n	800683e <_puts_r+0xb6>
 8006830:	290a      	cmp	r1, #10
 8006832:	d004      	beq.n	800683e <_puts_r+0xb6>
 8006834:	6823      	ldr	r3, [r4, #0]
 8006836:	1c5a      	adds	r2, r3, #1
 8006838:	6022      	str	r2, [r4, #0]
 800683a:	7019      	strb	r1, [r3, #0]
 800683c:	e7c5      	b.n	80067ca <_puts_r+0x42>
 800683e:	4622      	mov	r2, r4
 8006840:	4628      	mov	r0, r5
 8006842:	f000 f8bd 	bl	80069c0 <__swbuf_r>
 8006846:	3001      	adds	r0, #1
 8006848:	d1bf      	bne.n	80067ca <_puts_r+0x42>
 800684a:	e7df      	b.n	800680c <_puts_r+0x84>
 800684c:	6823      	ldr	r3, [r4, #0]
 800684e:	250a      	movs	r5, #10
 8006850:	1c5a      	adds	r2, r3, #1
 8006852:	6022      	str	r2, [r4, #0]
 8006854:	701d      	strb	r5, [r3, #0]
 8006856:	e7db      	b.n	8006810 <_puts_r+0x88>
 8006858:	080086ec 	.word	0x080086ec
 800685c:	0800870c 	.word	0x0800870c
 8006860:	080086cc 	.word	0x080086cc

08006864 <puts>:
 8006864:	4b02      	ldr	r3, [pc, #8]	; (8006870 <puts+0xc>)
 8006866:	4601      	mov	r1, r0
 8006868:	6818      	ldr	r0, [r3, #0]
 800686a:	f7ff bf8d 	b.w	8006788 <_puts_r>
 800686e:	bf00      	nop
 8006870:	20000020 	.word	0x20000020

08006874 <siprintf>:
 8006874:	b40e      	push	{r1, r2, r3}
 8006876:	b500      	push	{lr}
 8006878:	b09c      	sub	sp, #112	; 0x70
 800687a:	ab1d      	add	r3, sp, #116	; 0x74
 800687c:	9002      	str	r0, [sp, #8]
 800687e:	9006      	str	r0, [sp, #24]
 8006880:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006884:	4809      	ldr	r0, [pc, #36]	; (80068ac <siprintf+0x38>)
 8006886:	9107      	str	r1, [sp, #28]
 8006888:	9104      	str	r1, [sp, #16]
 800688a:	4909      	ldr	r1, [pc, #36]	; (80068b0 <siprintf+0x3c>)
 800688c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006890:	9105      	str	r1, [sp, #20]
 8006892:	6800      	ldr	r0, [r0, #0]
 8006894:	9301      	str	r3, [sp, #4]
 8006896:	a902      	add	r1, sp, #8
 8006898:	f000 fce0 	bl	800725c <_svfiprintf_r>
 800689c:	9b02      	ldr	r3, [sp, #8]
 800689e:	2200      	movs	r2, #0
 80068a0:	701a      	strb	r2, [r3, #0]
 80068a2:	b01c      	add	sp, #112	; 0x70
 80068a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80068a8:	b003      	add	sp, #12
 80068aa:	4770      	bx	lr
 80068ac:	20000020 	.word	0x20000020
 80068b0:	ffff0208 	.word	0xffff0208

080068b4 <strncpy>:
 80068b4:	b510      	push	{r4, lr}
 80068b6:	3901      	subs	r1, #1
 80068b8:	4603      	mov	r3, r0
 80068ba:	b132      	cbz	r2, 80068ca <strncpy+0x16>
 80068bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80068c0:	f803 4b01 	strb.w	r4, [r3], #1
 80068c4:	3a01      	subs	r2, #1
 80068c6:	2c00      	cmp	r4, #0
 80068c8:	d1f7      	bne.n	80068ba <strncpy+0x6>
 80068ca:	441a      	add	r2, r3
 80068cc:	2100      	movs	r1, #0
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d100      	bne.n	80068d4 <strncpy+0x20>
 80068d2:	bd10      	pop	{r4, pc}
 80068d4:	f803 1b01 	strb.w	r1, [r3], #1
 80068d8:	e7f9      	b.n	80068ce <strncpy+0x1a>

080068da <strstr>:
 80068da:	780a      	ldrb	r2, [r1, #0]
 80068dc:	b570      	push	{r4, r5, r6, lr}
 80068de:	b96a      	cbnz	r2, 80068fc <strstr+0x22>
 80068e0:	bd70      	pop	{r4, r5, r6, pc}
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d109      	bne.n	80068fa <strstr+0x20>
 80068e6:	460c      	mov	r4, r1
 80068e8:	4605      	mov	r5, r0
 80068ea:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d0f6      	beq.n	80068e0 <strstr+0x6>
 80068f2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80068f6:	429e      	cmp	r6, r3
 80068f8:	d0f7      	beq.n	80068ea <strstr+0x10>
 80068fa:	3001      	adds	r0, #1
 80068fc:	7803      	ldrb	r3, [r0, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1ef      	bne.n	80068e2 <strstr+0x8>
 8006902:	4618      	mov	r0, r3
 8006904:	e7ec      	b.n	80068e0 <strstr+0x6>
	...

08006908 <strtok>:
 8006908:	4b16      	ldr	r3, [pc, #88]	; (8006964 <strtok+0x5c>)
 800690a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800690e:	681f      	ldr	r7, [r3, #0]
 8006910:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8006912:	4605      	mov	r5, r0
 8006914:	460e      	mov	r6, r1
 8006916:	b9ec      	cbnz	r4, 8006954 <strtok+0x4c>
 8006918:	2050      	movs	r0, #80	; 0x50
 800691a:	f000 fb5d 	bl	8006fd8 <malloc>
 800691e:	4602      	mov	r2, r0
 8006920:	65b8      	str	r0, [r7, #88]	; 0x58
 8006922:	b920      	cbnz	r0, 800692e <strtok+0x26>
 8006924:	4b10      	ldr	r3, [pc, #64]	; (8006968 <strtok+0x60>)
 8006926:	4811      	ldr	r0, [pc, #68]	; (800696c <strtok+0x64>)
 8006928:	2157      	movs	r1, #87	; 0x57
 800692a:	f000 f909 	bl	8006b40 <__assert_func>
 800692e:	e9c0 4400 	strd	r4, r4, [r0]
 8006932:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006936:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800693a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800693e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006942:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006946:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800694a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800694e:	6184      	str	r4, [r0, #24]
 8006950:	7704      	strb	r4, [r0, #28]
 8006952:	6244      	str	r4, [r0, #36]	; 0x24
 8006954:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006956:	4631      	mov	r1, r6
 8006958:	4628      	mov	r0, r5
 800695a:	2301      	movs	r3, #1
 800695c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006960:	f000 b806 	b.w	8006970 <__strtok_r>
 8006964:	20000020 	.word	0x20000020
 8006968:	0800861c 	.word	0x0800861c
 800696c:	08008633 	.word	0x08008633

08006970 <__strtok_r>:
 8006970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006972:	b908      	cbnz	r0, 8006978 <__strtok_r+0x8>
 8006974:	6810      	ldr	r0, [r2, #0]
 8006976:	b188      	cbz	r0, 800699c <__strtok_r+0x2c>
 8006978:	4604      	mov	r4, r0
 800697a:	4620      	mov	r0, r4
 800697c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006980:	460f      	mov	r7, r1
 8006982:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006986:	b91e      	cbnz	r6, 8006990 <__strtok_r+0x20>
 8006988:	b965      	cbnz	r5, 80069a4 <__strtok_r+0x34>
 800698a:	6015      	str	r5, [r2, #0]
 800698c:	4628      	mov	r0, r5
 800698e:	e005      	b.n	800699c <__strtok_r+0x2c>
 8006990:	42b5      	cmp	r5, r6
 8006992:	d1f6      	bne.n	8006982 <__strtok_r+0x12>
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1f0      	bne.n	800697a <__strtok_r+0xa>
 8006998:	6014      	str	r4, [r2, #0]
 800699a:	7003      	strb	r3, [r0, #0]
 800699c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800699e:	461c      	mov	r4, r3
 80069a0:	e00c      	b.n	80069bc <__strtok_r+0x4c>
 80069a2:	b915      	cbnz	r5, 80069aa <__strtok_r+0x3a>
 80069a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80069a8:	460e      	mov	r6, r1
 80069aa:	f816 5b01 	ldrb.w	r5, [r6], #1
 80069ae:	42ab      	cmp	r3, r5
 80069b0:	d1f7      	bne.n	80069a2 <__strtok_r+0x32>
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d0f3      	beq.n	800699e <__strtok_r+0x2e>
 80069b6:	2300      	movs	r3, #0
 80069b8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80069bc:	6014      	str	r4, [r2, #0]
 80069be:	e7ed      	b.n	800699c <__strtok_r+0x2c>

080069c0 <__swbuf_r>:
 80069c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c2:	460e      	mov	r6, r1
 80069c4:	4614      	mov	r4, r2
 80069c6:	4605      	mov	r5, r0
 80069c8:	b118      	cbz	r0, 80069d2 <__swbuf_r+0x12>
 80069ca:	6983      	ldr	r3, [r0, #24]
 80069cc:	b90b      	cbnz	r3, 80069d2 <__swbuf_r+0x12>
 80069ce:	f000 f9eb 	bl	8006da8 <__sinit>
 80069d2:	4b21      	ldr	r3, [pc, #132]	; (8006a58 <__swbuf_r+0x98>)
 80069d4:	429c      	cmp	r4, r3
 80069d6:	d12b      	bne.n	8006a30 <__swbuf_r+0x70>
 80069d8:	686c      	ldr	r4, [r5, #4]
 80069da:	69a3      	ldr	r3, [r4, #24]
 80069dc:	60a3      	str	r3, [r4, #8]
 80069de:	89a3      	ldrh	r3, [r4, #12]
 80069e0:	071a      	lsls	r2, r3, #28
 80069e2:	d52f      	bpl.n	8006a44 <__swbuf_r+0x84>
 80069e4:	6923      	ldr	r3, [r4, #16]
 80069e6:	b36b      	cbz	r3, 8006a44 <__swbuf_r+0x84>
 80069e8:	6923      	ldr	r3, [r4, #16]
 80069ea:	6820      	ldr	r0, [r4, #0]
 80069ec:	1ac0      	subs	r0, r0, r3
 80069ee:	6963      	ldr	r3, [r4, #20]
 80069f0:	b2f6      	uxtb	r6, r6
 80069f2:	4283      	cmp	r3, r0
 80069f4:	4637      	mov	r7, r6
 80069f6:	dc04      	bgt.n	8006a02 <__swbuf_r+0x42>
 80069f8:	4621      	mov	r1, r4
 80069fa:	4628      	mov	r0, r5
 80069fc:	f000 f940 	bl	8006c80 <_fflush_r>
 8006a00:	bb30      	cbnz	r0, 8006a50 <__swbuf_r+0x90>
 8006a02:	68a3      	ldr	r3, [r4, #8]
 8006a04:	3b01      	subs	r3, #1
 8006a06:	60a3      	str	r3, [r4, #8]
 8006a08:	6823      	ldr	r3, [r4, #0]
 8006a0a:	1c5a      	adds	r2, r3, #1
 8006a0c:	6022      	str	r2, [r4, #0]
 8006a0e:	701e      	strb	r6, [r3, #0]
 8006a10:	6963      	ldr	r3, [r4, #20]
 8006a12:	3001      	adds	r0, #1
 8006a14:	4283      	cmp	r3, r0
 8006a16:	d004      	beq.n	8006a22 <__swbuf_r+0x62>
 8006a18:	89a3      	ldrh	r3, [r4, #12]
 8006a1a:	07db      	lsls	r3, r3, #31
 8006a1c:	d506      	bpl.n	8006a2c <__swbuf_r+0x6c>
 8006a1e:	2e0a      	cmp	r6, #10
 8006a20:	d104      	bne.n	8006a2c <__swbuf_r+0x6c>
 8006a22:	4621      	mov	r1, r4
 8006a24:	4628      	mov	r0, r5
 8006a26:	f000 f92b 	bl	8006c80 <_fflush_r>
 8006a2a:	b988      	cbnz	r0, 8006a50 <__swbuf_r+0x90>
 8006a2c:	4638      	mov	r0, r7
 8006a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a30:	4b0a      	ldr	r3, [pc, #40]	; (8006a5c <__swbuf_r+0x9c>)
 8006a32:	429c      	cmp	r4, r3
 8006a34:	d101      	bne.n	8006a3a <__swbuf_r+0x7a>
 8006a36:	68ac      	ldr	r4, [r5, #8]
 8006a38:	e7cf      	b.n	80069da <__swbuf_r+0x1a>
 8006a3a:	4b09      	ldr	r3, [pc, #36]	; (8006a60 <__swbuf_r+0xa0>)
 8006a3c:	429c      	cmp	r4, r3
 8006a3e:	bf08      	it	eq
 8006a40:	68ec      	ldreq	r4, [r5, #12]
 8006a42:	e7ca      	b.n	80069da <__swbuf_r+0x1a>
 8006a44:	4621      	mov	r1, r4
 8006a46:	4628      	mov	r0, r5
 8006a48:	f000 f80c 	bl	8006a64 <__swsetup_r>
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	d0cb      	beq.n	80069e8 <__swbuf_r+0x28>
 8006a50:	f04f 37ff 	mov.w	r7, #4294967295
 8006a54:	e7ea      	b.n	8006a2c <__swbuf_r+0x6c>
 8006a56:	bf00      	nop
 8006a58:	080086ec 	.word	0x080086ec
 8006a5c:	0800870c 	.word	0x0800870c
 8006a60:	080086cc 	.word	0x080086cc

08006a64 <__swsetup_r>:
 8006a64:	4b32      	ldr	r3, [pc, #200]	; (8006b30 <__swsetup_r+0xcc>)
 8006a66:	b570      	push	{r4, r5, r6, lr}
 8006a68:	681d      	ldr	r5, [r3, #0]
 8006a6a:	4606      	mov	r6, r0
 8006a6c:	460c      	mov	r4, r1
 8006a6e:	b125      	cbz	r5, 8006a7a <__swsetup_r+0x16>
 8006a70:	69ab      	ldr	r3, [r5, #24]
 8006a72:	b913      	cbnz	r3, 8006a7a <__swsetup_r+0x16>
 8006a74:	4628      	mov	r0, r5
 8006a76:	f000 f997 	bl	8006da8 <__sinit>
 8006a7a:	4b2e      	ldr	r3, [pc, #184]	; (8006b34 <__swsetup_r+0xd0>)
 8006a7c:	429c      	cmp	r4, r3
 8006a7e:	d10f      	bne.n	8006aa0 <__swsetup_r+0x3c>
 8006a80:	686c      	ldr	r4, [r5, #4]
 8006a82:	89a3      	ldrh	r3, [r4, #12]
 8006a84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a88:	0719      	lsls	r1, r3, #28
 8006a8a:	d42c      	bmi.n	8006ae6 <__swsetup_r+0x82>
 8006a8c:	06dd      	lsls	r5, r3, #27
 8006a8e:	d411      	bmi.n	8006ab4 <__swsetup_r+0x50>
 8006a90:	2309      	movs	r3, #9
 8006a92:	6033      	str	r3, [r6, #0]
 8006a94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a98:	81a3      	strh	r3, [r4, #12]
 8006a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a9e:	e03e      	b.n	8006b1e <__swsetup_r+0xba>
 8006aa0:	4b25      	ldr	r3, [pc, #148]	; (8006b38 <__swsetup_r+0xd4>)
 8006aa2:	429c      	cmp	r4, r3
 8006aa4:	d101      	bne.n	8006aaa <__swsetup_r+0x46>
 8006aa6:	68ac      	ldr	r4, [r5, #8]
 8006aa8:	e7eb      	b.n	8006a82 <__swsetup_r+0x1e>
 8006aaa:	4b24      	ldr	r3, [pc, #144]	; (8006b3c <__swsetup_r+0xd8>)
 8006aac:	429c      	cmp	r4, r3
 8006aae:	bf08      	it	eq
 8006ab0:	68ec      	ldreq	r4, [r5, #12]
 8006ab2:	e7e6      	b.n	8006a82 <__swsetup_r+0x1e>
 8006ab4:	0758      	lsls	r0, r3, #29
 8006ab6:	d512      	bpl.n	8006ade <__swsetup_r+0x7a>
 8006ab8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006aba:	b141      	cbz	r1, 8006ace <__swsetup_r+0x6a>
 8006abc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ac0:	4299      	cmp	r1, r3
 8006ac2:	d002      	beq.n	8006aca <__swsetup_r+0x66>
 8006ac4:	4630      	mov	r0, r6
 8006ac6:	f000 fa8f 	bl	8006fe8 <_free_r>
 8006aca:	2300      	movs	r3, #0
 8006acc:	6363      	str	r3, [r4, #52]	; 0x34
 8006ace:	89a3      	ldrh	r3, [r4, #12]
 8006ad0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ad4:	81a3      	strh	r3, [r4, #12]
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	6063      	str	r3, [r4, #4]
 8006ada:	6923      	ldr	r3, [r4, #16]
 8006adc:	6023      	str	r3, [r4, #0]
 8006ade:	89a3      	ldrh	r3, [r4, #12]
 8006ae0:	f043 0308 	orr.w	r3, r3, #8
 8006ae4:	81a3      	strh	r3, [r4, #12]
 8006ae6:	6923      	ldr	r3, [r4, #16]
 8006ae8:	b94b      	cbnz	r3, 8006afe <__swsetup_r+0x9a>
 8006aea:	89a3      	ldrh	r3, [r4, #12]
 8006aec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006af0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006af4:	d003      	beq.n	8006afe <__swsetup_r+0x9a>
 8006af6:	4621      	mov	r1, r4
 8006af8:	4630      	mov	r0, r6
 8006afa:	f000 fa2d 	bl	8006f58 <__smakebuf_r>
 8006afe:	89a0      	ldrh	r0, [r4, #12]
 8006b00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b04:	f010 0301 	ands.w	r3, r0, #1
 8006b08:	d00a      	beq.n	8006b20 <__swsetup_r+0xbc>
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	60a3      	str	r3, [r4, #8]
 8006b0e:	6963      	ldr	r3, [r4, #20]
 8006b10:	425b      	negs	r3, r3
 8006b12:	61a3      	str	r3, [r4, #24]
 8006b14:	6923      	ldr	r3, [r4, #16]
 8006b16:	b943      	cbnz	r3, 8006b2a <__swsetup_r+0xc6>
 8006b18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b1c:	d1ba      	bne.n	8006a94 <__swsetup_r+0x30>
 8006b1e:	bd70      	pop	{r4, r5, r6, pc}
 8006b20:	0781      	lsls	r1, r0, #30
 8006b22:	bf58      	it	pl
 8006b24:	6963      	ldrpl	r3, [r4, #20]
 8006b26:	60a3      	str	r3, [r4, #8]
 8006b28:	e7f4      	b.n	8006b14 <__swsetup_r+0xb0>
 8006b2a:	2000      	movs	r0, #0
 8006b2c:	e7f7      	b.n	8006b1e <__swsetup_r+0xba>
 8006b2e:	bf00      	nop
 8006b30:	20000020 	.word	0x20000020
 8006b34:	080086ec 	.word	0x080086ec
 8006b38:	0800870c 	.word	0x0800870c
 8006b3c:	080086cc 	.word	0x080086cc

08006b40 <__assert_func>:
 8006b40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b42:	4614      	mov	r4, r2
 8006b44:	461a      	mov	r2, r3
 8006b46:	4b09      	ldr	r3, [pc, #36]	; (8006b6c <__assert_func+0x2c>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4605      	mov	r5, r0
 8006b4c:	68d8      	ldr	r0, [r3, #12]
 8006b4e:	b14c      	cbz	r4, 8006b64 <__assert_func+0x24>
 8006b50:	4b07      	ldr	r3, [pc, #28]	; (8006b70 <__assert_func+0x30>)
 8006b52:	9100      	str	r1, [sp, #0]
 8006b54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b58:	4906      	ldr	r1, [pc, #24]	; (8006b74 <__assert_func+0x34>)
 8006b5a:	462b      	mov	r3, r5
 8006b5c:	f000 f9a2 	bl	8006ea4 <fiprintf>
 8006b60:	f000 ffce 	bl	8007b00 <abort>
 8006b64:	4b04      	ldr	r3, [pc, #16]	; (8006b78 <__assert_func+0x38>)
 8006b66:	461c      	mov	r4, r3
 8006b68:	e7f3      	b.n	8006b52 <__assert_func+0x12>
 8006b6a:	bf00      	nop
 8006b6c:	20000020 	.word	0x20000020
 8006b70:	08008690 	.word	0x08008690
 8006b74:	0800869d 	.word	0x0800869d
 8006b78:	080086cb 	.word	0x080086cb

08006b7c <__sflush_r>:
 8006b7c:	898a      	ldrh	r2, [r1, #12]
 8006b7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b80:	4605      	mov	r5, r0
 8006b82:	0710      	lsls	r0, r2, #28
 8006b84:	460c      	mov	r4, r1
 8006b86:	d457      	bmi.n	8006c38 <__sflush_r+0xbc>
 8006b88:	684b      	ldr	r3, [r1, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	dc04      	bgt.n	8006b98 <__sflush_r+0x1c>
 8006b8e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	dc01      	bgt.n	8006b98 <__sflush_r+0x1c>
 8006b94:	2000      	movs	r0, #0
 8006b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b9a:	2e00      	cmp	r6, #0
 8006b9c:	d0fa      	beq.n	8006b94 <__sflush_r+0x18>
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ba4:	682f      	ldr	r7, [r5, #0]
 8006ba6:	602b      	str	r3, [r5, #0]
 8006ba8:	d032      	beq.n	8006c10 <__sflush_r+0x94>
 8006baa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006bac:	89a3      	ldrh	r3, [r4, #12]
 8006bae:	075a      	lsls	r2, r3, #29
 8006bb0:	d505      	bpl.n	8006bbe <__sflush_r+0x42>
 8006bb2:	6863      	ldr	r3, [r4, #4]
 8006bb4:	1ac0      	subs	r0, r0, r3
 8006bb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006bb8:	b10b      	cbz	r3, 8006bbe <__sflush_r+0x42>
 8006bba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006bbc:	1ac0      	subs	r0, r0, r3
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bc4:	6a21      	ldr	r1, [r4, #32]
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	47b0      	blx	r6
 8006bca:	1c43      	adds	r3, r0, #1
 8006bcc:	89a3      	ldrh	r3, [r4, #12]
 8006bce:	d106      	bne.n	8006bde <__sflush_r+0x62>
 8006bd0:	6829      	ldr	r1, [r5, #0]
 8006bd2:	291d      	cmp	r1, #29
 8006bd4:	d82c      	bhi.n	8006c30 <__sflush_r+0xb4>
 8006bd6:	4a29      	ldr	r2, [pc, #164]	; (8006c7c <__sflush_r+0x100>)
 8006bd8:	40ca      	lsrs	r2, r1
 8006bda:	07d6      	lsls	r6, r2, #31
 8006bdc:	d528      	bpl.n	8006c30 <__sflush_r+0xb4>
 8006bde:	2200      	movs	r2, #0
 8006be0:	6062      	str	r2, [r4, #4]
 8006be2:	04d9      	lsls	r1, r3, #19
 8006be4:	6922      	ldr	r2, [r4, #16]
 8006be6:	6022      	str	r2, [r4, #0]
 8006be8:	d504      	bpl.n	8006bf4 <__sflush_r+0x78>
 8006bea:	1c42      	adds	r2, r0, #1
 8006bec:	d101      	bne.n	8006bf2 <__sflush_r+0x76>
 8006bee:	682b      	ldr	r3, [r5, #0]
 8006bf0:	b903      	cbnz	r3, 8006bf4 <__sflush_r+0x78>
 8006bf2:	6560      	str	r0, [r4, #84]	; 0x54
 8006bf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bf6:	602f      	str	r7, [r5, #0]
 8006bf8:	2900      	cmp	r1, #0
 8006bfa:	d0cb      	beq.n	8006b94 <__sflush_r+0x18>
 8006bfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c00:	4299      	cmp	r1, r3
 8006c02:	d002      	beq.n	8006c0a <__sflush_r+0x8e>
 8006c04:	4628      	mov	r0, r5
 8006c06:	f000 f9ef 	bl	8006fe8 <_free_r>
 8006c0a:	2000      	movs	r0, #0
 8006c0c:	6360      	str	r0, [r4, #52]	; 0x34
 8006c0e:	e7c2      	b.n	8006b96 <__sflush_r+0x1a>
 8006c10:	6a21      	ldr	r1, [r4, #32]
 8006c12:	2301      	movs	r3, #1
 8006c14:	4628      	mov	r0, r5
 8006c16:	47b0      	blx	r6
 8006c18:	1c41      	adds	r1, r0, #1
 8006c1a:	d1c7      	bne.n	8006bac <__sflush_r+0x30>
 8006c1c:	682b      	ldr	r3, [r5, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d0c4      	beq.n	8006bac <__sflush_r+0x30>
 8006c22:	2b1d      	cmp	r3, #29
 8006c24:	d001      	beq.n	8006c2a <__sflush_r+0xae>
 8006c26:	2b16      	cmp	r3, #22
 8006c28:	d101      	bne.n	8006c2e <__sflush_r+0xb2>
 8006c2a:	602f      	str	r7, [r5, #0]
 8006c2c:	e7b2      	b.n	8006b94 <__sflush_r+0x18>
 8006c2e:	89a3      	ldrh	r3, [r4, #12]
 8006c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c34:	81a3      	strh	r3, [r4, #12]
 8006c36:	e7ae      	b.n	8006b96 <__sflush_r+0x1a>
 8006c38:	690f      	ldr	r7, [r1, #16]
 8006c3a:	2f00      	cmp	r7, #0
 8006c3c:	d0aa      	beq.n	8006b94 <__sflush_r+0x18>
 8006c3e:	0793      	lsls	r3, r2, #30
 8006c40:	680e      	ldr	r6, [r1, #0]
 8006c42:	bf08      	it	eq
 8006c44:	694b      	ldreq	r3, [r1, #20]
 8006c46:	600f      	str	r7, [r1, #0]
 8006c48:	bf18      	it	ne
 8006c4a:	2300      	movne	r3, #0
 8006c4c:	1bf6      	subs	r6, r6, r7
 8006c4e:	608b      	str	r3, [r1, #8]
 8006c50:	2e00      	cmp	r6, #0
 8006c52:	dd9f      	ble.n	8006b94 <__sflush_r+0x18>
 8006c54:	6a21      	ldr	r1, [r4, #32]
 8006c56:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006c5a:	4633      	mov	r3, r6
 8006c5c:	463a      	mov	r2, r7
 8006c5e:	4628      	mov	r0, r5
 8006c60:	47e0      	blx	ip
 8006c62:	2800      	cmp	r0, #0
 8006c64:	dc06      	bgt.n	8006c74 <__sflush_r+0xf8>
 8006c66:	89a3      	ldrh	r3, [r4, #12]
 8006c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c6c:	81a3      	strh	r3, [r4, #12]
 8006c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c72:	e790      	b.n	8006b96 <__sflush_r+0x1a>
 8006c74:	4407      	add	r7, r0
 8006c76:	1a36      	subs	r6, r6, r0
 8006c78:	e7ea      	b.n	8006c50 <__sflush_r+0xd4>
 8006c7a:	bf00      	nop
 8006c7c:	20400001 	.word	0x20400001

08006c80 <_fflush_r>:
 8006c80:	b538      	push	{r3, r4, r5, lr}
 8006c82:	690b      	ldr	r3, [r1, #16]
 8006c84:	4605      	mov	r5, r0
 8006c86:	460c      	mov	r4, r1
 8006c88:	b913      	cbnz	r3, 8006c90 <_fflush_r+0x10>
 8006c8a:	2500      	movs	r5, #0
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	bd38      	pop	{r3, r4, r5, pc}
 8006c90:	b118      	cbz	r0, 8006c9a <_fflush_r+0x1a>
 8006c92:	6983      	ldr	r3, [r0, #24]
 8006c94:	b90b      	cbnz	r3, 8006c9a <_fflush_r+0x1a>
 8006c96:	f000 f887 	bl	8006da8 <__sinit>
 8006c9a:	4b14      	ldr	r3, [pc, #80]	; (8006cec <_fflush_r+0x6c>)
 8006c9c:	429c      	cmp	r4, r3
 8006c9e:	d11b      	bne.n	8006cd8 <_fflush_r+0x58>
 8006ca0:	686c      	ldr	r4, [r5, #4]
 8006ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d0ef      	beq.n	8006c8a <_fflush_r+0xa>
 8006caa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006cac:	07d0      	lsls	r0, r2, #31
 8006cae:	d404      	bmi.n	8006cba <_fflush_r+0x3a>
 8006cb0:	0599      	lsls	r1, r3, #22
 8006cb2:	d402      	bmi.n	8006cba <_fflush_r+0x3a>
 8006cb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cb6:	f000 f927 	bl	8006f08 <__retarget_lock_acquire_recursive>
 8006cba:	4628      	mov	r0, r5
 8006cbc:	4621      	mov	r1, r4
 8006cbe:	f7ff ff5d 	bl	8006b7c <__sflush_r>
 8006cc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cc4:	07da      	lsls	r2, r3, #31
 8006cc6:	4605      	mov	r5, r0
 8006cc8:	d4e0      	bmi.n	8006c8c <_fflush_r+0xc>
 8006cca:	89a3      	ldrh	r3, [r4, #12]
 8006ccc:	059b      	lsls	r3, r3, #22
 8006cce:	d4dd      	bmi.n	8006c8c <_fflush_r+0xc>
 8006cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cd2:	f000 f91a 	bl	8006f0a <__retarget_lock_release_recursive>
 8006cd6:	e7d9      	b.n	8006c8c <_fflush_r+0xc>
 8006cd8:	4b05      	ldr	r3, [pc, #20]	; (8006cf0 <_fflush_r+0x70>)
 8006cda:	429c      	cmp	r4, r3
 8006cdc:	d101      	bne.n	8006ce2 <_fflush_r+0x62>
 8006cde:	68ac      	ldr	r4, [r5, #8]
 8006ce0:	e7df      	b.n	8006ca2 <_fflush_r+0x22>
 8006ce2:	4b04      	ldr	r3, [pc, #16]	; (8006cf4 <_fflush_r+0x74>)
 8006ce4:	429c      	cmp	r4, r3
 8006ce6:	bf08      	it	eq
 8006ce8:	68ec      	ldreq	r4, [r5, #12]
 8006cea:	e7da      	b.n	8006ca2 <_fflush_r+0x22>
 8006cec:	080086ec 	.word	0x080086ec
 8006cf0:	0800870c 	.word	0x0800870c
 8006cf4:	080086cc 	.word	0x080086cc

08006cf8 <std>:
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	b510      	push	{r4, lr}
 8006cfc:	4604      	mov	r4, r0
 8006cfe:	e9c0 3300 	strd	r3, r3, [r0]
 8006d02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d06:	6083      	str	r3, [r0, #8]
 8006d08:	8181      	strh	r1, [r0, #12]
 8006d0a:	6643      	str	r3, [r0, #100]	; 0x64
 8006d0c:	81c2      	strh	r2, [r0, #14]
 8006d0e:	6183      	str	r3, [r0, #24]
 8006d10:	4619      	mov	r1, r3
 8006d12:	2208      	movs	r2, #8
 8006d14:	305c      	adds	r0, #92	; 0x5c
 8006d16:	f7ff fd17 	bl	8006748 <memset>
 8006d1a:	4b05      	ldr	r3, [pc, #20]	; (8006d30 <std+0x38>)
 8006d1c:	6263      	str	r3, [r4, #36]	; 0x24
 8006d1e:	4b05      	ldr	r3, [pc, #20]	; (8006d34 <std+0x3c>)
 8006d20:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d22:	4b05      	ldr	r3, [pc, #20]	; (8006d38 <std+0x40>)
 8006d24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d26:	4b05      	ldr	r3, [pc, #20]	; (8006d3c <std+0x44>)
 8006d28:	6224      	str	r4, [r4, #32]
 8006d2a:	6323      	str	r3, [r4, #48]	; 0x30
 8006d2c:	bd10      	pop	{r4, pc}
 8006d2e:	bf00      	nop
 8006d30:	08007a55 	.word	0x08007a55
 8006d34:	08007a77 	.word	0x08007a77
 8006d38:	08007aaf 	.word	0x08007aaf
 8006d3c:	08007ad3 	.word	0x08007ad3

08006d40 <_cleanup_r>:
 8006d40:	4901      	ldr	r1, [pc, #4]	; (8006d48 <_cleanup_r+0x8>)
 8006d42:	f000 b8c1 	b.w	8006ec8 <_fwalk_reent>
 8006d46:	bf00      	nop
 8006d48:	08006c81 	.word	0x08006c81

08006d4c <__sfmoreglue>:
 8006d4c:	b570      	push	{r4, r5, r6, lr}
 8006d4e:	2268      	movs	r2, #104	; 0x68
 8006d50:	1e4d      	subs	r5, r1, #1
 8006d52:	4355      	muls	r5, r2
 8006d54:	460e      	mov	r6, r1
 8006d56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d5a:	f000 f9af 	bl	80070bc <_malloc_r>
 8006d5e:	4604      	mov	r4, r0
 8006d60:	b140      	cbz	r0, 8006d74 <__sfmoreglue+0x28>
 8006d62:	2100      	movs	r1, #0
 8006d64:	e9c0 1600 	strd	r1, r6, [r0]
 8006d68:	300c      	adds	r0, #12
 8006d6a:	60a0      	str	r0, [r4, #8]
 8006d6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d70:	f7ff fcea 	bl	8006748 <memset>
 8006d74:	4620      	mov	r0, r4
 8006d76:	bd70      	pop	{r4, r5, r6, pc}

08006d78 <__sfp_lock_acquire>:
 8006d78:	4801      	ldr	r0, [pc, #4]	; (8006d80 <__sfp_lock_acquire+0x8>)
 8006d7a:	f000 b8c5 	b.w	8006f08 <__retarget_lock_acquire_recursive>
 8006d7e:	bf00      	nop
 8006d80:	20000ce9 	.word	0x20000ce9

08006d84 <__sfp_lock_release>:
 8006d84:	4801      	ldr	r0, [pc, #4]	; (8006d8c <__sfp_lock_release+0x8>)
 8006d86:	f000 b8c0 	b.w	8006f0a <__retarget_lock_release_recursive>
 8006d8a:	bf00      	nop
 8006d8c:	20000ce9 	.word	0x20000ce9

08006d90 <__sinit_lock_acquire>:
 8006d90:	4801      	ldr	r0, [pc, #4]	; (8006d98 <__sinit_lock_acquire+0x8>)
 8006d92:	f000 b8b9 	b.w	8006f08 <__retarget_lock_acquire_recursive>
 8006d96:	bf00      	nop
 8006d98:	20000cea 	.word	0x20000cea

08006d9c <__sinit_lock_release>:
 8006d9c:	4801      	ldr	r0, [pc, #4]	; (8006da4 <__sinit_lock_release+0x8>)
 8006d9e:	f000 b8b4 	b.w	8006f0a <__retarget_lock_release_recursive>
 8006da2:	bf00      	nop
 8006da4:	20000cea 	.word	0x20000cea

08006da8 <__sinit>:
 8006da8:	b510      	push	{r4, lr}
 8006daa:	4604      	mov	r4, r0
 8006dac:	f7ff fff0 	bl	8006d90 <__sinit_lock_acquire>
 8006db0:	69a3      	ldr	r3, [r4, #24]
 8006db2:	b11b      	cbz	r3, 8006dbc <__sinit+0x14>
 8006db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006db8:	f7ff bff0 	b.w	8006d9c <__sinit_lock_release>
 8006dbc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006dc0:	6523      	str	r3, [r4, #80]	; 0x50
 8006dc2:	4b13      	ldr	r3, [pc, #76]	; (8006e10 <__sinit+0x68>)
 8006dc4:	4a13      	ldr	r2, [pc, #76]	; (8006e14 <__sinit+0x6c>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	62a2      	str	r2, [r4, #40]	; 0x28
 8006dca:	42a3      	cmp	r3, r4
 8006dcc:	bf04      	itt	eq
 8006dce:	2301      	moveq	r3, #1
 8006dd0:	61a3      	streq	r3, [r4, #24]
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	f000 f820 	bl	8006e18 <__sfp>
 8006dd8:	6060      	str	r0, [r4, #4]
 8006dda:	4620      	mov	r0, r4
 8006ddc:	f000 f81c 	bl	8006e18 <__sfp>
 8006de0:	60a0      	str	r0, [r4, #8]
 8006de2:	4620      	mov	r0, r4
 8006de4:	f000 f818 	bl	8006e18 <__sfp>
 8006de8:	2200      	movs	r2, #0
 8006dea:	60e0      	str	r0, [r4, #12]
 8006dec:	2104      	movs	r1, #4
 8006dee:	6860      	ldr	r0, [r4, #4]
 8006df0:	f7ff ff82 	bl	8006cf8 <std>
 8006df4:	68a0      	ldr	r0, [r4, #8]
 8006df6:	2201      	movs	r2, #1
 8006df8:	2109      	movs	r1, #9
 8006dfa:	f7ff ff7d 	bl	8006cf8 <std>
 8006dfe:	68e0      	ldr	r0, [r4, #12]
 8006e00:	2202      	movs	r2, #2
 8006e02:	2112      	movs	r1, #18
 8006e04:	f7ff ff78 	bl	8006cf8 <std>
 8006e08:	2301      	movs	r3, #1
 8006e0a:	61a3      	str	r3, [r4, #24]
 8006e0c:	e7d2      	b.n	8006db4 <__sinit+0xc>
 8006e0e:	bf00      	nop
 8006e10:	08008618 	.word	0x08008618
 8006e14:	08006d41 	.word	0x08006d41

08006e18 <__sfp>:
 8006e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e1a:	4607      	mov	r7, r0
 8006e1c:	f7ff ffac 	bl	8006d78 <__sfp_lock_acquire>
 8006e20:	4b1e      	ldr	r3, [pc, #120]	; (8006e9c <__sfp+0x84>)
 8006e22:	681e      	ldr	r6, [r3, #0]
 8006e24:	69b3      	ldr	r3, [r6, #24]
 8006e26:	b913      	cbnz	r3, 8006e2e <__sfp+0x16>
 8006e28:	4630      	mov	r0, r6
 8006e2a:	f7ff ffbd 	bl	8006da8 <__sinit>
 8006e2e:	3648      	adds	r6, #72	; 0x48
 8006e30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e34:	3b01      	subs	r3, #1
 8006e36:	d503      	bpl.n	8006e40 <__sfp+0x28>
 8006e38:	6833      	ldr	r3, [r6, #0]
 8006e3a:	b30b      	cbz	r3, 8006e80 <__sfp+0x68>
 8006e3c:	6836      	ldr	r6, [r6, #0]
 8006e3e:	e7f7      	b.n	8006e30 <__sfp+0x18>
 8006e40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e44:	b9d5      	cbnz	r5, 8006e7c <__sfp+0x64>
 8006e46:	4b16      	ldr	r3, [pc, #88]	; (8006ea0 <__sfp+0x88>)
 8006e48:	60e3      	str	r3, [r4, #12]
 8006e4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e4e:	6665      	str	r5, [r4, #100]	; 0x64
 8006e50:	f000 f859 	bl	8006f06 <__retarget_lock_init_recursive>
 8006e54:	f7ff ff96 	bl	8006d84 <__sfp_lock_release>
 8006e58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e60:	6025      	str	r5, [r4, #0]
 8006e62:	61a5      	str	r5, [r4, #24]
 8006e64:	2208      	movs	r2, #8
 8006e66:	4629      	mov	r1, r5
 8006e68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e6c:	f7ff fc6c 	bl	8006748 <memset>
 8006e70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e78:	4620      	mov	r0, r4
 8006e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e7c:	3468      	adds	r4, #104	; 0x68
 8006e7e:	e7d9      	b.n	8006e34 <__sfp+0x1c>
 8006e80:	2104      	movs	r1, #4
 8006e82:	4638      	mov	r0, r7
 8006e84:	f7ff ff62 	bl	8006d4c <__sfmoreglue>
 8006e88:	4604      	mov	r4, r0
 8006e8a:	6030      	str	r0, [r6, #0]
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	d1d5      	bne.n	8006e3c <__sfp+0x24>
 8006e90:	f7ff ff78 	bl	8006d84 <__sfp_lock_release>
 8006e94:	230c      	movs	r3, #12
 8006e96:	603b      	str	r3, [r7, #0]
 8006e98:	e7ee      	b.n	8006e78 <__sfp+0x60>
 8006e9a:	bf00      	nop
 8006e9c:	08008618 	.word	0x08008618
 8006ea0:	ffff0001 	.word	0xffff0001

08006ea4 <fiprintf>:
 8006ea4:	b40e      	push	{r1, r2, r3}
 8006ea6:	b503      	push	{r0, r1, lr}
 8006ea8:	4601      	mov	r1, r0
 8006eaa:	ab03      	add	r3, sp, #12
 8006eac:	4805      	ldr	r0, [pc, #20]	; (8006ec4 <fiprintf+0x20>)
 8006eae:	f853 2b04 	ldr.w	r2, [r3], #4
 8006eb2:	6800      	ldr	r0, [r0, #0]
 8006eb4:	9301      	str	r3, [sp, #4]
 8006eb6:	f000 faf9 	bl	80074ac <_vfiprintf_r>
 8006eba:	b002      	add	sp, #8
 8006ebc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ec0:	b003      	add	sp, #12
 8006ec2:	4770      	bx	lr
 8006ec4:	20000020 	.word	0x20000020

08006ec8 <_fwalk_reent>:
 8006ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ecc:	4606      	mov	r6, r0
 8006ece:	4688      	mov	r8, r1
 8006ed0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ed4:	2700      	movs	r7, #0
 8006ed6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006eda:	f1b9 0901 	subs.w	r9, r9, #1
 8006ede:	d505      	bpl.n	8006eec <_fwalk_reent+0x24>
 8006ee0:	6824      	ldr	r4, [r4, #0]
 8006ee2:	2c00      	cmp	r4, #0
 8006ee4:	d1f7      	bne.n	8006ed6 <_fwalk_reent+0xe>
 8006ee6:	4638      	mov	r0, r7
 8006ee8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eec:	89ab      	ldrh	r3, [r5, #12]
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d907      	bls.n	8006f02 <_fwalk_reent+0x3a>
 8006ef2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	d003      	beq.n	8006f02 <_fwalk_reent+0x3a>
 8006efa:	4629      	mov	r1, r5
 8006efc:	4630      	mov	r0, r6
 8006efe:	47c0      	blx	r8
 8006f00:	4307      	orrs	r7, r0
 8006f02:	3568      	adds	r5, #104	; 0x68
 8006f04:	e7e9      	b.n	8006eda <_fwalk_reent+0x12>

08006f06 <__retarget_lock_init_recursive>:
 8006f06:	4770      	bx	lr

08006f08 <__retarget_lock_acquire_recursive>:
 8006f08:	4770      	bx	lr

08006f0a <__retarget_lock_release_recursive>:
 8006f0a:	4770      	bx	lr

08006f0c <__swhatbuf_r>:
 8006f0c:	b570      	push	{r4, r5, r6, lr}
 8006f0e:	460e      	mov	r6, r1
 8006f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f14:	2900      	cmp	r1, #0
 8006f16:	b096      	sub	sp, #88	; 0x58
 8006f18:	4614      	mov	r4, r2
 8006f1a:	461d      	mov	r5, r3
 8006f1c:	da08      	bge.n	8006f30 <__swhatbuf_r+0x24>
 8006f1e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006f22:	2200      	movs	r2, #0
 8006f24:	602a      	str	r2, [r5, #0]
 8006f26:	061a      	lsls	r2, r3, #24
 8006f28:	d410      	bmi.n	8006f4c <__swhatbuf_r+0x40>
 8006f2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f2e:	e00e      	b.n	8006f4e <__swhatbuf_r+0x42>
 8006f30:	466a      	mov	r2, sp
 8006f32:	f000 fdfd 	bl	8007b30 <_fstat_r>
 8006f36:	2800      	cmp	r0, #0
 8006f38:	dbf1      	blt.n	8006f1e <__swhatbuf_r+0x12>
 8006f3a:	9a01      	ldr	r2, [sp, #4]
 8006f3c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006f40:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006f44:	425a      	negs	r2, r3
 8006f46:	415a      	adcs	r2, r3
 8006f48:	602a      	str	r2, [r5, #0]
 8006f4a:	e7ee      	b.n	8006f2a <__swhatbuf_r+0x1e>
 8006f4c:	2340      	movs	r3, #64	; 0x40
 8006f4e:	2000      	movs	r0, #0
 8006f50:	6023      	str	r3, [r4, #0]
 8006f52:	b016      	add	sp, #88	; 0x58
 8006f54:	bd70      	pop	{r4, r5, r6, pc}
	...

08006f58 <__smakebuf_r>:
 8006f58:	898b      	ldrh	r3, [r1, #12]
 8006f5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f5c:	079d      	lsls	r5, r3, #30
 8006f5e:	4606      	mov	r6, r0
 8006f60:	460c      	mov	r4, r1
 8006f62:	d507      	bpl.n	8006f74 <__smakebuf_r+0x1c>
 8006f64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f68:	6023      	str	r3, [r4, #0]
 8006f6a:	6123      	str	r3, [r4, #16]
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	6163      	str	r3, [r4, #20]
 8006f70:	b002      	add	sp, #8
 8006f72:	bd70      	pop	{r4, r5, r6, pc}
 8006f74:	ab01      	add	r3, sp, #4
 8006f76:	466a      	mov	r2, sp
 8006f78:	f7ff ffc8 	bl	8006f0c <__swhatbuf_r>
 8006f7c:	9900      	ldr	r1, [sp, #0]
 8006f7e:	4605      	mov	r5, r0
 8006f80:	4630      	mov	r0, r6
 8006f82:	f000 f89b 	bl	80070bc <_malloc_r>
 8006f86:	b948      	cbnz	r0, 8006f9c <__smakebuf_r+0x44>
 8006f88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f8c:	059a      	lsls	r2, r3, #22
 8006f8e:	d4ef      	bmi.n	8006f70 <__smakebuf_r+0x18>
 8006f90:	f023 0303 	bic.w	r3, r3, #3
 8006f94:	f043 0302 	orr.w	r3, r3, #2
 8006f98:	81a3      	strh	r3, [r4, #12]
 8006f9a:	e7e3      	b.n	8006f64 <__smakebuf_r+0xc>
 8006f9c:	4b0d      	ldr	r3, [pc, #52]	; (8006fd4 <__smakebuf_r+0x7c>)
 8006f9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006fa0:	89a3      	ldrh	r3, [r4, #12]
 8006fa2:	6020      	str	r0, [r4, #0]
 8006fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fa8:	81a3      	strh	r3, [r4, #12]
 8006faa:	9b00      	ldr	r3, [sp, #0]
 8006fac:	6163      	str	r3, [r4, #20]
 8006fae:	9b01      	ldr	r3, [sp, #4]
 8006fb0:	6120      	str	r0, [r4, #16]
 8006fb2:	b15b      	cbz	r3, 8006fcc <__smakebuf_r+0x74>
 8006fb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fb8:	4630      	mov	r0, r6
 8006fba:	f000 fdcb 	bl	8007b54 <_isatty_r>
 8006fbe:	b128      	cbz	r0, 8006fcc <__smakebuf_r+0x74>
 8006fc0:	89a3      	ldrh	r3, [r4, #12]
 8006fc2:	f023 0303 	bic.w	r3, r3, #3
 8006fc6:	f043 0301 	orr.w	r3, r3, #1
 8006fca:	81a3      	strh	r3, [r4, #12]
 8006fcc:	89a0      	ldrh	r0, [r4, #12]
 8006fce:	4305      	orrs	r5, r0
 8006fd0:	81a5      	strh	r5, [r4, #12]
 8006fd2:	e7cd      	b.n	8006f70 <__smakebuf_r+0x18>
 8006fd4:	08006d41 	.word	0x08006d41

08006fd8 <malloc>:
 8006fd8:	4b02      	ldr	r3, [pc, #8]	; (8006fe4 <malloc+0xc>)
 8006fda:	4601      	mov	r1, r0
 8006fdc:	6818      	ldr	r0, [r3, #0]
 8006fde:	f000 b86d 	b.w	80070bc <_malloc_r>
 8006fe2:	bf00      	nop
 8006fe4:	20000020 	.word	0x20000020

08006fe8 <_free_r>:
 8006fe8:	b538      	push	{r3, r4, r5, lr}
 8006fea:	4605      	mov	r5, r0
 8006fec:	2900      	cmp	r1, #0
 8006fee:	d041      	beq.n	8007074 <_free_r+0x8c>
 8006ff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ff4:	1f0c      	subs	r4, r1, #4
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	bfb8      	it	lt
 8006ffa:	18e4      	addlt	r4, r4, r3
 8006ffc:	f000 fde6 	bl	8007bcc <__malloc_lock>
 8007000:	4a1d      	ldr	r2, [pc, #116]	; (8007078 <_free_r+0x90>)
 8007002:	6813      	ldr	r3, [r2, #0]
 8007004:	b933      	cbnz	r3, 8007014 <_free_r+0x2c>
 8007006:	6063      	str	r3, [r4, #4]
 8007008:	6014      	str	r4, [r2, #0]
 800700a:	4628      	mov	r0, r5
 800700c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007010:	f000 bde2 	b.w	8007bd8 <__malloc_unlock>
 8007014:	42a3      	cmp	r3, r4
 8007016:	d908      	bls.n	800702a <_free_r+0x42>
 8007018:	6820      	ldr	r0, [r4, #0]
 800701a:	1821      	adds	r1, r4, r0
 800701c:	428b      	cmp	r3, r1
 800701e:	bf01      	itttt	eq
 8007020:	6819      	ldreq	r1, [r3, #0]
 8007022:	685b      	ldreq	r3, [r3, #4]
 8007024:	1809      	addeq	r1, r1, r0
 8007026:	6021      	streq	r1, [r4, #0]
 8007028:	e7ed      	b.n	8007006 <_free_r+0x1e>
 800702a:	461a      	mov	r2, r3
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	b10b      	cbz	r3, 8007034 <_free_r+0x4c>
 8007030:	42a3      	cmp	r3, r4
 8007032:	d9fa      	bls.n	800702a <_free_r+0x42>
 8007034:	6811      	ldr	r1, [r2, #0]
 8007036:	1850      	adds	r0, r2, r1
 8007038:	42a0      	cmp	r0, r4
 800703a:	d10b      	bne.n	8007054 <_free_r+0x6c>
 800703c:	6820      	ldr	r0, [r4, #0]
 800703e:	4401      	add	r1, r0
 8007040:	1850      	adds	r0, r2, r1
 8007042:	4283      	cmp	r3, r0
 8007044:	6011      	str	r1, [r2, #0]
 8007046:	d1e0      	bne.n	800700a <_free_r+0x22>
 8007048:	6818      	ldr	r0, [r3, #0]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	6053      	str	r3, [r2, #4]
 800704e:	4401      	add	r1, r0
 8007050:	6011      	str	r1, [r2, #0]
 8007052:	e7da      	b.n	800700a <_free_r+0x22>
 8007054:	d902      	bls.n	800705c <_free_r+0x74>
 8007056:	230c      	movs	r3, #12
 8007058:	602b      	str	r3, [r5, #0]
 800705a:	e7d6      	b.n	800700a <_free_r+0x22>
 800705c:	6820      	ldr	r0, [r4, #0]
 800705e:	1821      	adds	r1, r4, r0
 8007060:	428b      	cmp	r3, r1
 8007062:	bf04      	itt	eq
 8007064:	6819      	ldreq	r1, [r3, #0]
 8007066:	685b      	ldreq	r3, [r3, #4]
 8007068:	6063      	str	r3, [r4, #4]
 800706a:	bf04      	itt	eq
 800706c:	1809      	addeq	r1, r1, r0
 800706e:	6021      	streq	r1, [r4, #0]
 8007070:	6054      	str	r4, [r2, #4]
 8007072:	e7ca      	b.n	800700a <_free_r+0x22>
 8007074:	bd38      	pop	{r3, r4, r5, pc}
 8007076:	bf00      	nop
 8007078:	20000cec 	.word	0x20000cec

0800707c <sbrk_aligned>:
 800707c:	b570      	push	{r4, r5, r6, lr}
 800707e:	4e0e      	ldr	r6, [pc, #56]	; (80070b8 <sbrk_aligned+0x3c>)
 8007080:	460c      	mov	r4, r1
 8007082:	6831      	ldr	r1, [r6, #0]
 8007084:	4605      	mov	r5, r0
 8007086:	b911      	cbnz	r1, 800708e <sbrk_aligned+0x12>
 8007088:	f000 fcd4 	bl	8007a34 <_sbrk_r>
 800708c:	6030      	str	r0, [r6, #0]
 800708e:	4621      	mov	r1, r4
 8007090:	4628      	mov	r0, r5
 8007092:	f000 fccf 	bl	8007a34 <_sbrk_r>
 8007096:	1c43      	adds	r3, r0, #1
 8007098:	d00a      	beq.n	80070b0 <sbrk_aligned+0x34>
 800709a:	1cc4      	adds	r4, r0, #3
 800709c:	f024 0403 	bic.w	r4, r4, #3
 80070a0:	42a0      	cmp	r0, r4
 80070a2:	d007      	beq.n	80070b4 <sbrk_aligned+0x38>
 80070a4:	1a21      	subs	r1, r4, r0
 80070a6:	4628      	mov	r0, r5
 80070a8:	f000 fcc4 	bl	8007a34 <_sbrk_r>
 80070ac:	3001      	adds	r0, #1
 80070ae:	d101      	bne.n	80070b4 <sbrk_aligned+0x38>
 80070b0:	f04f 34ff 	mov.w	r4, #4294967295
 80070b4:	4620      	mov	r0, r4
 80070b6:	bd70      	pop	{r4, r5, r6, pc}
 80070b8:	20000cf0 	.word	0x20000cf0

080070bc <_malloc_r>:
 80070bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070c0:	1ccd      	adds	r5, r1, #3
 80070c2:	f025 0503 	bic.w	r5, r5, #3
 80070c6:	3508      	adds	r5, #8
 80070c8:	2d0c      	cmp	r5, #12
 80070ca:	bf38      	it	cc
 80070cc:	250c      	movcc	r5, #12
 80070ce:	2d00      	cmp	r5, #0
 80070d0:	4607      	mov	r7, r0
 80070d2:	db01      	blt.n	80070d8 <_malloc_r+0x1c>
 80070d4:	42a9      	cmp	r1, r5
 80070d6:	d905      	bls.n	80070e4 <_malloc_r+0x28>
 80070d8:	230c      	movs	r3, #12
 80070da:	603b      	str	r3, [r7, #0]
 80070dc:	2600      	movs	r6, #0
 80070de:	4630      	mov	r0, r6
 80070e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070e4:	4e2e      	ldr	r6, [pc, #184]	; (80071a0 <_malloc_r+0xe4>)
 80070e6:	f000 fd71 	bl	8007bcc <__malloc_lock>
 80070ea:	6833      	ldr	r3, [r6, #0]
 80070ec:	461c      	mov	r4, r3
 80070ee:	bb34      	cbnz	r4, 800713e <_malloc_r+0x82>
 80070f0:	4629      	mov	r1, r5
 80070f2:	4638      	mov	r0, r7
 80070f4:	f7ff ffc2 	bl	800707c <sbrk_aligned>
 80070f8:	1c43      	adds	r3, r0, #1
 80070fa:	4604      	mov	r4, r0
 80070fc:	d14d      	bne.n	800719a <_malloc_r+0xde>
 80070fe:	6834      	ldr	r4, [r6, #0]
 8007100:	4626      	mov	r6, r4
 8007102:	2e00      	cmp	r6, #0
 8007104:	d140      	bne.n	8007188 <_malloc_r+0xcc>
 8007106:	6823      	ldr	r3, [r4, #0]
 8007108:	4631      	mov	r1, r6
 800710a:	4638      	mov	r0, r7
 800710c:	eb04 0803 	add.w	r8, r4, r3
 8007110:	f000 fc90 	bl	8007a34 <_sbrk_r>
 8007114:	4580      	cmp	r8, r0
 8007116:	d13a      	bne.n	800718e <_malloc_r+0xd2>
 8007118:	6821      	ldr	r1, [r4, #0]
 800711a:	3503      	adds	r5, #3
 800711c:	1a6d      	subs	r5, r5, r1
 800711e:	f025 0503 	bic.w	r5, r5, #3
 8007122:	3508      	adds	r5, #8
 8007124:	2d0c      	cmp	r5, #12
 8007126:	bf38      	it	cc
 8007128:	250c      	movcc	r5, #12
 800712a:	4629      	mov	r1, r5
 800712c:	4638      	mov	r0, r7
 800712e:	f7ff ffa5 	bl	800707c <sbrk_aligned>
 8007132:	3001      	adds	r0, #1
 8007134:	d02b      	beq.n	800718e <_malloc_r+0xd2>
 8007136:	6823      	ldr	r3, [r4, #0]
 8007138:	442b      	add	r3, r5
 800713a:	6023      	str	r3, [r4, #0]
 800713c:	e00e      	b.n	800715c <_malloc_r+0xa0>
 800713e:	6822      	ldr	r2, [r4, #0]
 8007140:	1b52      	subs	r2, r2, r5
 8007142:	d41e      	bmi.n	8007182 <_malloc_r+0xc6>
 8007144:	2a0b      	cmp	r2, #11
 8007146:	d916      	bls.n	8007176 <_malloc_r+0xba>
 8007148:	1961      	adds	r1, r4, r5
 800714a:	42a3      	cmp	r3, r4
 800714c:	6025      	str	r5, [r4, #0]
 800714e:	bf18      	it	ne
 8007150:	6059      	strne	r1, [r3, #4]
 8007152:	6863      	ldr	r3, [r4, #4]
 8007154:	bf08      	it	eq
 8007156:	6031      	streq	r1, [r6, #0]
 8007158:	5162      	str	r2, [r4, r5]
 800715a:	604b      	str	r3, [r1, #4]
 800715c:	4638      	mov	r0, r7
 800715e:	f104 060b 	add.w	r6, r4, #11
 8007162:	f000 fd39 	bl	8007bd8 <__malloc_unlock>
 8007166:	f026 0607 	bic.w	r6, r6, #7
 800716a:	1d23      	adds	r3, r4, #4
 800716c:	1af2      	subs	r2, r6, r3
 800716e:	d0b6      	beq.n	80070de <_malloc_r+0x22>
 8007170:	1b9b      	subs	r3, r3, r6
 8007172:	50a3      	str	r3, [r4, r2]
 8007174:	e7b3      	b.n	80070de <_malloc_r+0x22>
 8007176:	6862      	ldr	r2, [r4, #4]
 8007178:	42a3      	cmp	r3, r4
 800717a:	bf0c      	ite	eq
 800717c:	6032      	streq	r2, [r6, #0]
 800717e:	605a      	strne	r2, [r3, #4]
 8007180:	e7ec      	b.n	800715c <_malloc_r+0xa0>
 8007182:	4623      	mov	r3, r4
 8007184:	6864      	ldr	r4, [r4, #4]
 8007186:	e7b2      	b.n	80070ee <_malloc_r+0x32>
 8007188:	4634      	mov	r4, r6
 800718a:	6876      	ldr	r6, [r6, #4]
 800718c:	e7b9      	b.n	8007102 <_malloc_r+0x46>
 800718e:	230c      	movs	r3, #12
 8007190:	603b      	str	r3, [r7, #0]
 8007192:	4638      	mov	r0, r7
 8007194:	f000 fd20 	bl	8007bd8 <__malloc_unlock>
 8007198:	e7a1      	b.n	80070de <_malloc_r+0x22>
 800719a:	6025      	str	r5, [r4, #0]
 800719c:	e7de      	b.n	800715c <_malloc_r+0xa0>
 800719e:	bf00      	nop
 80071a0:	20000cec 	.word	0x20000cec

080071a4 <__ssputs_r>:
 80071a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071a8:	688e      	ldr	r6, [r1, #8]
 80071aa:	429e      	cmp	r6, r3
 80071ac:	4682      	mov	sl, r0
 80071ae:	460c      	mov	r4, r1
 80071b0:	4690      	mov	r8, r2
 80071b2:	461f      	mov	r7, r3
 80071b4:	d838      	bhi.n	8007228 <__ssputs_r+0x84>
 80071b6:	898a      	ldrh	r2, [r1, #12]
 80071b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80071bc:	d032      	beq.n	8007224 <__ssputs_r+0x80>
 80071be:	6825      	ldr	r5, [r4, #0]
 80071c0:	6909      	ldr	r1, [r1, #16]
 80071c2:	eba5 0901 	sub.w	r9, r5, r1
 80071c6:	6965      	ldr	r5, [r4, #20]
 80071c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80071d0:	3301      	adds	r3, #1
 80071d2:	444b      	add	r3, r9
 80071d4:	106d      	asrs	r5, r5, #1
 80071d6:	429d      	cmp	r5, r3
 80071d8:	bf38      	it	cc
 80071da:	461d      	movcc	r5, r3
 80071dc:	0553      	lsls	r3, r2, #21
 80071de:	d531      	bpl.n	8007244 <__ssputs_r+0xa0>
 80071e0:	4629      	mov	r1, r5
 80071e2:	f7ff ff6b 	bl	80070bc <_malloc_r>
 80071e6:	4606      	mov	r6, r0
 80071e8:	b950      	cbnz	r0, 8007200 <__ssputs_r+0x5c>
 80071ea:	230c      	movs	r3, #12
 80071ec:	f8ca 3000 	str.w	r3, [sl]
 80071f0:	89a3      	ldrh	r3, [r4, #12]
 80071f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071f6:	81a3      	strh	r3, [r4, #12]
 80071f8:	f04f 30ff 	mov.w	r0, #4294967295
 80071fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007200:	6921      	ldr	r1, [r4, #16]
 8007202:	464a      	mov	r2, r9
 8007204:	f7ff fa92 	bl	800672c <memcpy>
 8007208:	89a3      	ldrh	r3, [r4, #12]
 800720a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800720e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007212:	81a3      	strh	r3, [r4, #12]
 8007214:	6126      	str	r6, [r4, #16]
 8007216:	6165      	str	r5, [r4, #20]
 8007218:	444e      	add	r6, r9
 800721a:	eba5 0509 	sub.w	r5, r5, r9
 800721e:	6026      	str	r6, [r4, #0]
 8007220:	60a5      	str	r5, [r4, #8]
 8007222:	463e      	mov	r6, r7
 8007224:	42be      	cmp	r6, r7
 8007226:	d900      	bls.n	800722a <__ssputs_r+0x86>
 8007228:	463e      	mov	r6, r7
 800722a:	6820      	ldr	r0, [r4, #0]
 800722c:	4632      	mov	r2, r6
 800722e:	4641      	mov	r1, r8
 8007230:	f000 fcb2 	bl	8007b98 <memmove>
 8007234:	68a3      	ldr	r3, [r4, #8]
 8007236:	1b9b      	subs	r3, r3, r6
 8007238:	60a3      	str	r3, [r4, #8]
 800723a:	6823      	ldr	r3, [r4, #0]
 800723c:	4433      	add	r3, r6
 800723e:	6023      	str	r3, [r4, #0]
 8007240:	2000      	movs	r0, #0
 8007242:	e7db      	b.n	80071fc <__ssputs_r+0x58>
 8007244:	462a      	mov	r2, r5
 8007246:	f000 fccd 	bl	8007be4 <_realloc_r>
 800724a:	4606      	mov	r6, r0
 800724c:	2800      	cmp	r0, #0
 800724e:	d1e1      	bne.n	8007214 <__ssputs_r+0x70>
 8007250:	6921      	ldr	r1, [r4, #16]
 8007252:	4650      	mov	r0, sl
 8007254:	f7ff fec8 	bl	8006fe8 <_free_r>
 8007258:	e7c7      	b.n	80071ea <__ssputs_r+0x46>
	...

0800725c <_svfiprintf_r>:
 800725c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007260:	4698      	mov	r8, r3
 8007262:	898b      	ldrh	r3, [r1, #12]
 8007264:	061b      	lsls	r3, r3, #24
 8007266:	b09d      	sub	sp, #116	; 0x74
 8007268:	4607      	mov	r7, r0
 800726a:	460d      	mov	r5, r1
 800726c:	4614      	mov	r4, r2
 800726e:	d50e      	bpl.n	800728e <_svfiprintf_r+0x32>
 8007270:	690b      	ldr	r3, [r1, #16]
 8007272:	b963      	cbnz	r3, 800728e <_svfiprintf_r+0x32>
 8007274:	2140      	movs	r1, #64	; 0x40
 8007276:	f7ff ff21 	bl	80070bc <_malloc_r>
 800727a:	6028      	str	r0, [r5, #0]
 800727c:	6128      	str	r0, [r5, #16]
 800727e:	b920      	cbnz	r0, 800728a <_svfiprintf_r+0x2e>
 8007280:	230c      	movs	r3, #12
 8007282:	603b      	str	r3, [r7, #0]
 8007284:	f04f 30ff 	mov.w	r0, #4294967295
 8007288:	e0d1      	b.n	800742e <_svfiprintf_r+0x1d2>
 800728a:	2340      	movs	r3, #64	; 0x40
 800728c:	616b      	str	r3, [r5, #20]
 800728e:	2300      	movs	r3, #0
 8007290:	9309      	str	r3, [sp, #36]	; 0x24
 8007292:	2320      	movs	r3, #32
 8007294:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007298:	f8cd 800c 	str.w	r8, [sp, #12]
 800729c:	2330      	movs	r3, #48	; 0x30
 800729e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007448 <_svfiprintf_r+0x1ec>
 80072a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072a6:	f04f 0901 	mov.w	r9, #1
 80072aa:	4623      	mov	r3, r4
 80072ac:	469a      	mov	sl, r3
 80072ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072b2:	b10a      	cbz	r2, 80072b8 <_svfiprintf_r+0x5c>
 80072b4:	2a25      	cmp	r2, #37	; 0x25
 80072b6:	d1f9      	bne.n	80072ac <_svfiprintf_r+0x50>
 80072b8:	ebba 0b04 	subs.w	fp, sl, r4
 80072bc:	d00b      	beq.n	80072d6 <_svfiprintf_r+0x7a>
 80072be:	465b      	mov	r3, fp
 80072c0:	4622      	mov	r2, r4
 80072c2:	4629      	mov	r1, r5
 80072c4:	4638      	mov	r0, r7
 80072c6:	f7ff ff6d 	bl	80071a4 <__ssputs_r>
 80072ca:	3001      	adds	r0, #1
 80072cc:	f000 80aa 	beq.w	8007424 <_svfiprintf_r+0x1c8>
 80072d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072d2:	445a      	add	r2, fp
 80072d4:	9209      	str	r2, [sp, #36]	; 0x24
 80072d6:	f89a 3000 	ldrb.w	r3, [sl]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f000 80a2 	beq.w	8007424 <_svfiprintf_r+0x1c8>
 80072e0:	2300      	movs	r3, #0
 80072e2:	f04f 32ff 	mov.w	r2, #4294967295
 80072e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072ea:	f10a 0a01 	add.w	sl, sl, #1
 80072ee:	9304      	str	r3, [sp, #16]
 80072f0:	9307      	str	r3, [sp, #28]
 80072f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072f6:	931a      	str	r3, [sp, #104]	; 0x68
 80072f8:	4654      	mov	r4, sl
 80072fa:	2205      	movs	r2, #5
 80072fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007300:	4851      	ldr	r0, [pc, #324]	; (8007448 <_svfiprintf_r+0x1ec>)
 8007302:	f7f8 ff6d 	bl	80001e0 <memchr>
 8007306:	9a04      	ldr	r2, [sp, #16]
 8007308:	b9d8      	cbnz	r0, 8007342 <_svfiprintf_r+0xe6>
 800730a:	06d0      	lsls	r0, r2, #27
 800730c:	bf44      	itt	mi
 800730e:	2320      	movmi	r3, #32
 8007310:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007314:	0711      	lsls	r1, r2, #28
 8007316:	bf44      	itt	mi
 8007318:	232b      	movmi	r3, #43	; 0x2b
 800731a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800731e:	f89a 3000 	ldrb.w	r3, [sl]
 8007322:	2b2a      	cmp	r3, #42	; 0x2a
 8007324:	d015      	beq.n	8007352 <_svfiprintf_r+0xf6>
 8007326:	9a07      	ldr	r2, [sp, #28]
 8007328:	4654      	mov	r4, sl
 800732a:	2000      	movs	r0, #0
 800732c:	f04f 0c0a 	mov.w	ip, #10
 8007330:	4621      	mov	r1, r4
 8007332:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007336:	3b30      	subs	r3, #48	; 0x30
 8007338:	2b09      	cmp	r3, #9
 800733a:	d94e      	bls.n	80073da <_svfiprintf_r+0x17e>
 800733c:	b1b0      	cbz	r0, 800736c <_svfiprintf_r+0x110>
 800733e:	9207      	str	r2, [sp, #28]
 8007340:	e014      	b.n	800736c <_svfiprintf_r+0x110>
 8007342:	eba0 0308 	sub.w	r3, r0, r8
 8007346:	fa09 f303 	lsl.w	r3, r9, r3
 800734a:	4313      	orrs	r3, r2
 800734c:	9304      	str	r3, [sp, #16]
 800734e:	46a2      	mov	sl, r4
 8007350:	e7d2      	b.n	80072f8 <_svfiprintf_r+0x9c>
 8007352:	9b03      	ldr	r3, [sp, #12]
 8007354:	1d19      	adds	r1, r3, #4
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	9103      	str	r1, [sp, #12]
 800735a:	2b00      	cmp	r3, #0
 800735c:	bfbb      	ittet	lt
 800735e:	425b      	neglt	r3, r3
 8007360:	f042 0202 	orrlt.w	r2, r2, #2
 8007364:	9307      	strge	r3, [sp, #28]
 8007366:	9307      	strlt	r3, [sp, #28]
 8007368:	bfb8      	it	lt
 800736a:	9204      	strlt	r2, [sp, #16]
 800736c:	7823      	ldrb	r3, [r4, #0]
 800736e:	2b2e      	cmp	r3, #46	; 0x2e
 8007370:	d10c      	bne.n	800738c <_svfiprintf_r+0x130>
 8007372:	7863      	ldrb	r3, [r4, #1]
 8007374:	2b2a      	cmp	r3, #42	; 0x2a
 8007376:	d135      	bne.n	80073e4 <_svfiprintf_r+0x188>
 8007378:	9b03      	ldr	r3, [sp, #12]
 800737a:	1d1a      	adds	r2, r3, #4
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	9203      	str	r2, [sp, #12]
 8007380:	2b00      	cmp	r3, #0
 8007382:	bfb8      	it	lt
 8007384:	f04f 33ff 	movlt.w	r3, #4294967295
 8007388:	3402      	adds	r4, #2
 800738a:	9305      	str	r3, [sp, #20]
 800738c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800744c <_svfiprintf_r+0x1f0>
 8007390:	7821      	ldrb	r1, [r4, #0]
 8007392:	2203      	movs	r2, #3
 8007394:	4650      	mov	r0, sl
 8007396:	f7f8 ff23 	bl	80001e0 <memchr>
 800739a:	b140      	cbz	r0, 80073ae <_svfiprintf_r+0x152>
 800739c:	2340      	movs	r3, #64	; 0x40
 800739e:	eba0 000a 	sub.w	r0, r0, sl
 80073a2:	fa03 f000 	lsl.w	r0, r3, r0
 80073a6:	9b04      	ldr	r3, [sp, #16]
 80073a8:	4303      	orrs	r3, r0
 80073aa:	3401      	adds	r4, #1
 80073ac:	9304      	str	r3, [sp, #16]
 80073ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073b2:	4827      	ldr	r0, [pc, #156]	; (8007450 <_svfiprintf_r+0x1f4>)
 80073b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073b8:	2206      	movs	r2, #6
 80073ba:	f7f8 ff11 	bl	80001e0 <memchr>
 80073be:	2800      	cmp	r0, #0
 80073c0:	d038      	beq.n	8007434 <_svfiprintf_r+0x1d8>
 80073c2:	4b24      	ldr	r3, [pc, #144]	; (8007454 <_svfiprintf_r+0x1f8>)
 80073c4:	bb1b      	cbnz	r3, 800740e <_svfiprintf_r+0x1b2>
 80073c6:	9b03      	ldr	r3, [sp, #12]
 80073c8:	3307      	adds	r3, #7
 80073ca:	f023 0307 	bic.w	r3, r3, #7
 80073ce:	3308      	adds	r3, #8
 80073d0:	9303      	str	r3, [sp, #12]
 80073d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073d4:	4433      	add	r3, r6
 80073d6:	9309      	str	r3, [sp, #36]	; 0x24
 80073d8:	e767      	b.n	80072aa <_svfiprintf_r+0x4e>
 80073da:	fb0c 3202 	mla	r2, ip, r2, r3
 80073de:	460c      	mov	r4, r1
 80073e0:	2001      	movs	r0, #1
 80073e2:	e7a5      	b.n	8007330 <_svfiprintf_r+0xd4>
 80073e4:	2300      	movs	r3, #0
 80073e6:	3401      	adds	r4, #1
 80073e8:	9305      	str	r3, [sp, #20]
 80073ea:	4619      	mov	r1, r3
 80073ec:	f04f 0c0a 	mov.w	ip, #10
 80073f0:	4620      	mov	r0, r4
 80073f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073f6:	3a30      	subs	r2, #48	; 0x30
 80073f8:	2a09      	cmp	r2, #9
 80073fa:	d903      	bls.n	8007404 <_svfiprintf_r+0x1a8>
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d0c5      	beq.n	800738c <_svfiprintf_r+0x130>
 8007400:	9105      	str	r1, [sp, #20]
 8007402:	e7c3      	b.n	800738c <_svfiprintf_r+0x130>
 8007404:	fb0c 2101 	mla	r1, ip, r1, r2
 8007408:	4604      	mov	r4, r0
 800740a:	2301      	movs	r3, #1
 800740c:	e7f0      	b.n	80073f0 <_svfiprintf_r+0x194>
 800740e:	ab03      	add	r3, sp, #12
 8007410:	9300      	str	r3, [sp, #0]
 8007412:	462a      	mov	r2, r5
 8007414:	4b10      	ldr	r3, [pc, #64]	; (8007458 <_svfiprintf_r+0x1fc>)
 8007416:	a904      	add	r1, sp, #16
 8007418:	4638      	mov	r0, r7
 800741a:	f3af 8000 	nop.w
 800741e:	1c42      	adds	r2, r0, #1
 8007420:	4606      	mov	r6, r0
 8007422:	d1d6      	bne.n	80073d2 <_svfiprintf_r+0x176>
 8007424:	89ab      	ldrh	r3, [r5, #12]
 8007426:	065b      	lsls	r3, r3, #25
 8007428:	f53f af2c 	bmi.w	8007284 <_svfiprintf_r+0x28>
 800742c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800742e:	b01d      	add	sp, #116	; 0x74
 8007430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007434:	ab03      	add	r3, sp, #12
 8007436:	9300      	str	r3, [sp, #0]
 8007438:	462a      	mov	r2, r5
 800743a:	4b07      	ldr	r3, [pc, #28]	; (8007458 <_svfiprintf_r+0x1fc>)
 800743c:	a904      	add	r1, sp, #16
 800743e:	4638      	mov	r0, r7
 8007440:	f000 f9d2 	bl	80077e8 <_printf_i>
 8007444:	e7eb      	b.n	800741e <_svfiprintf_r+0x1c2>
 8007446:	bf00      	nop
 8007448:	0800872c 	.word	0x0800872c
 800744c:	08008732 	.word	0x08008732
 8007450:	08008736 	.word	0x08008736
 8007454:	00000000 	.word	0x00000000
 8007458:	080071a5 	.word	0x080071a5

0800745c <__sfputc_r>:
 800745c:	6893      	ldr	r3, [r2, #8]
 800745e:	3b01      	subs	r3, #1
 8007460:	2b00      	cmp	r3, #0
 8007462:	b410      	push	{r4}
 8007464:	6093      	str	r3, [r2, #8]
 8007466:	da07      	bge.n	8007478 <__sfputc_r+0x1c>
 8007468:	6994      	ldr	r4, [r2, #24]
 800746a:	42a3      	cmp	r3, r4
 800746c:	db01      	blt.n	8007472 <__sfputc_r+0x16>
 800746e:	290a      	cmp	r1, #10
 8007470:	d102      	bne.n	8007478 <__sfputc_r+0x1c>
 8007472:	bc10      	pop	{r4}
 8007474:	f7ff baa4 	b.w	80069c0 <__swbuf_r>
 8007478:	6813      	ldr	r3, [r2, #0]
 800747a:	1c58      	adds	r0, r3, #1
 800747c:	6010      	str	r0, [r2, #0]
 800747e:	7019      	strb	r1, [r3, #0]
 8007480:	4608      	mov	r0, r1
 8007482:	bc10      	pop	{r4}
 8007484:	4770      	bx	lr

08007486 <__sfputs_r>:
 8007486:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007488:	4606      	mov	r6, r0
 800748a:	460f      	mov	r7, r1
 800748c:	4614      	mov	r4, r2
 800748e:	18d5      	adds	r5, r2, r3
 8007490:	42ac      	cmp	r4, r5
 8007492:	d101      	bne.n	8007498 <__sfputs_r+0x12>
 8007494:	2000      	movs	r0, #0
 8007496:	e007      	b.n	80074a8 <__sfputs_r+0x22>
 8007498:	f814 1b01 	ldrb.w	r1, [r4], #1
 800749c:	463a      	mov	r2, r7
 800749e:	4630      	mov	r0, r6
 80074a0:	f7ff ffdc 	bl	800745c <__sfputc_r>
 80074a4:	1c43      	adds	r3, r0, #1
 80074a6:	d1f3      	bne.n	8007490 <__sfputs_r+0xa>
 80074a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080074ac <_vfiprintf_r>:
 80074ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b0:	460d      	mov	r5, r1
 80074b2:	b09d      	sub	sp, #116	; 0x74
 80074b4:	4614      	mov	r4, r2
 80074b6:	4698      	mov	r8, r3
 80074b8:	4606      	mov	r6, r0
 80074ba:	b118      	cbz	r0, 80074c4 <_vfiprintf_r+0x18>
 80074bc:	6983      	ldr	r3, [r0, #24]
 80074be:	b90b      	cbnz	r3, 80074c4 <_vfiprintf_r+0x18>
 80074c0:	f7ff fc72 	bl	8006da8 <__sinit>
 80074c4:	4b89      	ldr	r3, [pc, #548]	; (80076ec <_vfiprintf_r+0x240>)
 80074c6:	429d      	cmp	r5, r3
 80074c8:	d11b      	bne.n	8007502 <_vfiprintf_r+0x56>
 80074ca:	6875      	ldr	r5, [r6, #4]
 80074cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074ce:	07d9      	lsls	r1, r3, #31
 80074d0:	d405      	bmi.n	80074de <_vfiprintf_r+0x32>
 80074d2:	89ab      	ldrh	r3, [r5, #12]
 80074d4:	059a      	lsls	r2, r3, #22
 80074d6:	d402      	bmi.n	80074de <_vfiprintf_r+0x32>
 80074d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074da:	f7ff fd15 	bl	8006f08 <__retarget_lock_acquire_recursive>
 80074de:	89ab      	ldrh	r3, [r5, #12]
 80074e0:	071b      	lsls	r3, r3, #28
 80074e2:	d501      	bpl.n	80074e8 <_vfiprintf_r+0x3c>
 80074e4:	692b      	ldr	r3, [r5, #16]
 80074e6:	b9eb      	cbnz	r3, 8007524 <_vfiprintf_r+0x78>
 80074e8:	4629      	mov	r1, r5
 80074ea:	4630      	mov	r0, r6
 80074ec:	f7ff faba 	bl	8006a64 <__swsetup_r>
 80074f0:	b1c0      	cbz	r0, 8007524 <_vfiprintf_r+0x78>
 80074f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074f4:	07dc      	lsls	r4, r3, #31
 80074f6:	d50e      	bpl.n	8007516 <_vfiprintf_r+0x6a>
 80074f8:	f04f 30ff 	mov.w	r0, #4294967295
 80074fc:	b01d      	add	sp, #116	; 0x74
 80074fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007502:	4b7b      	ldr	r3, [pc, #492]	; (80076f0 <_vfiprintf_r+0x244>)
 8007504:	429d      	cmp	r5, r3
 8007506:	d101      	bne.n	800750c <_vfiprintf_r+0x60>
 8007508:	68b5      	ldr	r5, [r6, #8]
 800750a:	e7df      	b.n	80074cc <_vfiprintf_r+0x20>
 800750c:	4b79      	ldr	r3, [pc, #484]	; (80076f4 <_vfiprintf_r+0x248>)
 800750e:	429d      	cmp	r5, r3
 8007510:	bf08      	it	eq
 8007512:	68f5      	ldreq	r5, [r6, #12]
 8007514:	e7da      	b.n	80074cc <_vfiprintf_r+0x20>
 8007516:	89ab      	ldrh	r3, [r5, #12]
 8007518:	0598      	lsls	r0, r3, #22
 800751a:	d4ed      	bmi.n	80074f8 <_vfiprintf_r+0x4c>
 800751c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800751e:	f7ff fcf4 	bl	8006f0a <__retarget_lock_release_recursive>
 8007522:	e7e9      	b.n	80074f8 <_vfiprintf_r+0x4c>
 8007524:	2300      	movs	r3, #0
 8007526:	9309      	str	r3, [sp, #36]	; 0x24
 8007528:	2320      	movs	r3, #32
 800752a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800752e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007532:	2330      	movs	r3, #48	; 0x30
 8007534:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80076f8 <_vfiprintf_r+0x24c>
 8007538:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800753c:	f04f 0901 	mov.w	r9, #1
 8007540:	4623      	mov	r3, r4
 8007542:	469a      	mov	sl, r3
 8007544:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007548:	b10a      	cbz	r2, 800754e <_vfiprintf_r+0xa2>
 800754a:	2a25      	cmp	r2, #37	; 0x25
 800754c:	d1f9      	bne.n	8007542 <_vfiprintf_r+0x96>
 800754e:	ebba 0b04 	subs.w	fp, sl, r4
 8007552:	d00b      	beq.n	800756c <_vfiprintf_r+0xc0>
 8007554:	465b      	mov	r3, fp
 8007556:	4622      	mov	r2, r4
 8007558:	4629      	mov	r1, r5
 800755a:	4630      	mov	r0, r6
 800755c:	f7ff ff93 	bl	8007486 <__sfputs_r>
 8007560:	3001      	adds	r0, #1
 8007562:	f000 80aa 	beq.w	80076ba <_vfiprintf_r+0x20e>
 8007566:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007568:	445a      	add	r2, fp
 800756a:	9209      	str	r2, [sp, #36]	; 0x24
 800756c:	f89a 3000 	ldrb.w	r3, [sl]
 8007570:	2b00      	cmp	r3, #0
 8007572:	f000 80a2 	beq.w	80076ba <_vfiprintf_r+0x20e>
 8007576:	2300      	movs	r3, #0
 8007578:	f04f 32ff 	mov.w	r2, #4294967295
 800757c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007580:	f10a 0a01 	add.w	sl, sl, #1
 8007584:	9304      	str	r3, [sp, #16]
 8007586:	9307      	str	r3, [sp, #28]
 8007588:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800758c:	931a      	str	r3, [sp, #104]	; 0x68
 800758e:	4654      	mov	r4, sl
 8007590:	2205      	movs	r2, #5
 8007592:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007596:	4858      	ldr	r0, [pc, #352]	; (80076f8 <_vfiprintf_r+0x24c>)
 8007598:	f7f8 fe22 	bl	80001e0 <memchr>
 800759c:	9a04      	ldr	r2, [sp, #16]
 800759e:	b9d8      	cbnz	r0, 80075d8 <_vfiprintf_r+0x12c>
 80075a0:	06d1      	lsls	r1, r2, #27
 80075a2:	bf44      	itt	mi
 80075a4:	2320      	movmi	r3, #32
 80075a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075aa:	0713      	lsls	r3, r2, #28
 80075ac:	bf44      	itt	mi
 80075ae:	232b      	movmi	r3, #43	; 0x2b
 80075b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075b4:	f89a 3000 	ldrb.w	r3, [sl]
 80075b8:	2b2a      	cmp	r3, #42	; 0x2a
 80075ba:	d015      	beq.n	80075e8 <_vfiprintf_r+0x13c>
 80075bc:	9a07      	ldr	r2, [sp, #28]
 80075be:	4654      	mov	r4, sl
 80075c0:	2000      	movs	r0, #0
 80075c2:	f04f 0c0a 	mov.w	ip, #10
 80075c6:	4621      	mov	r1, r4
 80075c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075cc:	3b30      	subs	r3, #48	; 0x30
 80075ce:	2b09      	cmp	r3, #9
 80075d0:	d94e      	bls.n	8007670 <_vfiprintf_r+0x1c4>
 80075d2:	b1b0      	cbz	r0, 8007602 <_vfiprintf_r+0x156>
 80075d4:	9207      	str	r2, [sp, #28]
 80075d6:	e014      	b.n	8007602 <_vfiprintf_r+0x156>
 80075d8:	eba0 0308 	sub.w	r3, r0, r8
 80075dc:	fa09 f303 	lsl.w	r3, r9, r3
 80075e0:	4313      	orrs	r3, r2
 80075e2:	9304      	str	r3, [sp, #16]
 80075e4:	46a2      	mov	sl, r4
 80075e6:	e7d2      	b.n	800758e <_vfiprintf_r+0xe2>
 80075e8:	9b03      	ldr	r3, [sp, #12]
 80075ea:	1d19      	adds	r1, r3, #4
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	9103      	str	r1, [sp, #12]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	bfbb      	ittet	lt
 80075f4:	425b      	neglt	r3, r3
 80075f6:	f042 0202 	orrlt.w	r2, r2, #2
 80075fa:	9307      	strge	r3, [sp, #28]
 80075fc:	9307      	strlt	r3, [sp, #28]
 80075fe:	bfb8      	it	lt
 8007600:	9204      	strlt	r2, [sp, #16]
 8007602:	7823      	ldrb	r3, [r4, #0]
 8007604:	2b2e      	cmp	r3, #46	; 0x2e
 8007606:	d10c      	bne.n	8007622 <_vfiprintf_r+0x176>
 8007608:	7863      	ldrb	r3, [r4, #1]
 800760a:	2b2a      	cmp	r3, #42	; 0x2a
 800760c:	d135      	bne.n	800767a <_vfiprintf_r+0x1ce>
 800760e:	9b03      	ldr	r3, [sp, #12]
 8007610:	1d1a      	adds	r2, r3, #4
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	9203      	str	r2, [sp, #12]
 8007616:	2b00      	cmp	r3, #0
 8007618:	bfb8      	it	lt
 800761a:	f04f 33ff 	movlt.w	r3, #4294967295
 800761e:	3402      	adds	r4, #2
 8007620:	9305      	str	r3, [sp, #20]
 8007622:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80076fc <_vfiprintf_r+0x250>
 8007626:	7821      	ldrb	r1, [r4, #0]
 8007628:	2203      	movs	r2, #3
 800762a:	4650      	mov	r0, sl
 800762c:	f7f8 fdd8 	bl	80001e0 <memchr>
 8007630:	b140      	cbz	r0, 8007644 <_vfiprintf_r+0x198>
 8007632:	2340      	movs	r3, #64	; 0x40
 8007634:	eba0 000a 	sub.w	r0, r0, sl
 8007638:	fa03 f000 	lsl.w	r0, r3, r0
 800763c:	9b04      	ldr	r3, [sp, #16]
 800763e:	4303      	orrs	r3, r0
 8007640:	3401      	adds	r4, #1
 8007642:	9304      	str	r3, [sp, #16]
 8007644:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007648:	482d      	ldr	r0, [pc, #180]	; (8007700 <_vfiprintf_r+0x254>)
 800764a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800764e:	2206      	movs	r2, #6
 8007650:	f7f8 fdc6 	bl	80001e0 <memchr>
 8007654:	2800      	cmp	r0, #0
 8007656:	d03f      	beq.n	80076d8 <_vfiprintf_r+0x22c>
 8007658:	4b2a      	ldr	r3, [pc, #168]	; (8007704 <_vfiprintf_r+0x258>)
 800765a:	bb1b      	cbnz	r3, 80076a4 <_vfiprintf_r+0x1f8>
 800765c:	9b03      	ldr	r3, [sp, #12]
 800765e:	3307      	adds	r3, #7
 8007660:	f023 0307 	bic.w	r3, r3, #7
 8007664:	3308      	adds	r3, #8
 8007666:	9303      	str	r3, [sp, #12]
 8007668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800766a:	443b      	add	r3, r7
 800766c:	9309      	str	r3, [sp, #36]	; 0x24
 800766e:	e767      	b.n	8007540 <_vfiprintf_r+0x94>
 8007670:	fb0c 3202 	mla	r2, ip, r2, r3
 8007674:	460c      	mov	r4, r1
 8007676:	2001      	movs	r0, #1
 8007678:	e7a5      	b.n	80075c6 <_vfiprintf_r+0x11a>
 800767a:	2300      	movs	r3, #0
 800767c:	3401      	adds	r4, #1
 800767e:	9305      	str	r3, [sp, #20]
 8007680:	4619      	mov	r1, r3
 8007682:	f04f 0c0a 	mov.w	ip, #10
 8007686:	4620      	mov	r0, r4
 8007688:	f810 2b01 	ldrb.w	r2, [r0], #1
 800768c:	3a30      	subs	r2, #48	; 0x30
 800768e:	2a09      	cmp	r2, #9
 8007690:	d903      	bls.n	800769a <_vfiprintf_r+0x1ee>
 8007692:	2b00      	cmp	r3, #0
 8007694:	d0c5      	beq.n	8007622 <_vfiprintf_r+0x176>
 8007696:	9105      	str	r1, [sp, #20]
 8007698:	e7c3      	b.n	8007622 <_vfiprintf_r+0x176>
 800769a:	fb0c 2101 	mla	r1, ip, r1, r2
 800769e:	4604      	mov	r4, r0
 80076a0:	2301      	movs	r3, #1
 80076a2:	e7f0      	b.n	8007686 <_vfiprintf_r+0x1da>
 80076a4:	ab03      	add	r3, sp, #12
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	462a      	mov	r2, r5
 80076aa:	4b17      	ldr	r3, [pc, #92]	; (8007708 <_vfiprintf_r+0x25c>)
 80076ac:	a904      	add	r1, sp, #16
 80076ae:	4630      	mov	r0, r6
 80076b0:	f3af 8000 	nop.w
 80076b4:	4607      	mov	r7, r0
 80076b6:	1c78      	adds	r0, r7, #1
 80076b8:	d1d6      	bne.n	8007668 <_vfiprintf_r+0x1bc>
 80076ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076bc:	07d9      	lsls	r1, r3, #31
 80076be:	d405      	bmi.n	80076cc <_vfiprintf_r+0x220>
 80076c0:	89ab      	ldrh	r3, [r5, #12]
 80076c2:	059a      	lsls	r2, r3, #22
 80076c4:	d402      	bmi.n	80076cc <_vfiprintf_r+0x220>
 80076c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076c8:	f7ff fc1f 	bl	8006f0a <__retarget_lock_release_recursive>
 80076cc:	89ab      	ldrh	r3, [r5, #12]
 80076ce:	065b      	lsls	r3, r3, #25
 80076d0:	f53f af12 	bmi.w	80074f8 <_vfiprintf_r+0x4c>
 80076d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076d6:	e711      	b.n	80074fc <_vfiprintf_r+0x50>
 80076d8:	ab03      	add	r3, sp, #12
 80076da:	9300      	str	r3, [sp, #0]
 80076dc:	462a      	mov	r2, r5
 80076de:	4b0a      	ldr	r3, [pc, #40]	; (8007708 <_vfiprintf_r+0x25c>)
 80076e0:	a904      	add	r1, sp, #16
 80076e2:	4630      	mov	r0, r6
 80076e4:	f000 f880 	bl	80077e8 <_printf_i>
 80076e8:	e7e4      	b.n	80076b4 <_vfiprintf_r+0x208>
 80076ea:	bf00      	nop
 80076ec:	080086ec 	.word	0x080086ec
 80076f0:	0800870c 	.word	0x0800870c
 80076f4:	080086cc 	.word	0x080086cc
 80076f8:	0800872c 	.word	0x0800872c
 80076fc:	08008732 	.word	0x08008732
 8007700:	08008736 	.word	0x08008736
 8007704:	00000000 	.word	0x00000000
 8007708:	08007487 	.word	0x08007487

0800770c <_printf_common>:
 800770c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007710:	4616      	mov	r6, r2
 8007712:	4699      	mov	r9, r3
 8007714:	688a      	ldr	r2, [r1, #8]
 8007716:	690b      	ldr	r3, [r1, #16]
 8007718:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800771c:	4293      	cmp	r3, r2
 800771e:	bfb8      	it	lt
 8007720:	4613      	movlt	r3, r2
 8007722:	6033      	str	r3, [r6, #0]
 8007724:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007728:	4607      	mov	r7, r0
 800772a:	460c      	mov	r4, r1
 800772c:	b10a      	cbz	r2, 8007732 <_printf_common+0x26>
 800772e:	3301      	adds	r3, #1
 8007730:	6033      	str	r3, [r6, #0]
 8007732:	6823      	ldr	r3, [r4, #0]
 8007734:	0699      	lsls	r1, r3, #26
 8007736:	bf42      	ittt	mi
 8007738:	6833      	ldrmi	r3, [r6, #0]
 800773a:	3302      	addmi	r3, #2
 800773c:	6033      	strmi	r3, [r6, #0]
 800773e:	6825      	ldr	r5, [r4, #0]
 8007740:	f015 0506 	ands.w	r5, r5, #6
 8007744:	d106      	bne.n	8007754 <_printf_common+0x48>
 8007746:	f104 0a19 	add.w	sl, r4, #25
 800774a:	68e3      	ldr	r3, [r4, #12]
 800774c:	6832      	ldr	r2, [r6, #0]
 800774e:	1a9b      	subs	r3, r3, r2
 8007750:	42ab      	cmp	r3, r5
 8007752:	dc26      	bgt.n	80077a2 <_printf_common+0x96>
 8007754:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007758:	1e13      	subs	r3, r2, #0
 800775a:	6822      	ldr	r2, [r4, #0]
 800775c:	bf18      	it	ne
 800775e:	2301      	movne	r3, #1
 8007760:	0692      	lsls	r2, r2, #26
 8007762:	d42b      	bmi.n	80077bc <_printf_common+0xb0>
 8007764:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007768:	4649      	mov	r1, r9
 800776a:	4638      	mov	r0, r7
 800776c:	47c0      	blx	r8
 800776e:	3001      	adds	r0, #1
 8007770:	d01e      	beq.n	80077b0 <_printf_common+0xa4>
 8007772:	6823      	ldr	r3, [r4, #0]
 8007774:	68e5      	ldr	r5, [r4, #12]
 8007776:	6832      	ldr	r2, [r6, #0]
 8007778:	f003 0306 	and.w	r3, r3, #6
 800777c:	2b04      	cmp	r3, #4
 800777e:	bf08      	it	eq
 8007780:	1aad      	subeq	r5, r5, r2
 8007782:	68a3      	ldr	r3, [r4, #8]
 8007784:	6922      	ldr	r2, [r4, #16]
 8007786:	bf0c      	ite	eq
 8007788:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800778c:	2500      	movne	r5, #0
 800778e:	4293      	cmp	r3, r2
 8007790:	bfc4      	itt	gt
 8007792:	1a9b      	subgt	r3, r3, r2
 8007794:	18ed      	addgt	r5, r5, r3
 8007796:	2600      	movs	r6, #0
 8007798:	341a      	adds	r4, #26
 800779a:	42b5      	cmp	r5, r6
 800779c:	d11a      	bne.n	80077d4 <_printf_common+0xc8>
 800779e:	2000      	movs	r0, #0
 80077a0:	e008      	b.n	80077b4 <_printf_common+0xa8>
 80077a2:	2301      	movs	r3, #1
 80077a4:	4652      	mov	r2, sl
 80077a6:	4649      	mov	r1, r9
 80077a8:	4638      	mov	r0, r7
 80077aa:	47c0      	blx	r8
 80077ac:	3001      	adds	r0, #1
 80077ae:	d103      	bne.n	80077b8 <_printf_common+0xac>
 80077b0:	f04f 30ff 	mov.w	r0, #4294967295
 80077b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077b8:	3501      	adds	r5, #1
 80077ba:	e7c6      	b.n	800774a <_printf_common+0x3e>
 80077bc:	18e1      	adds	r1, r4, r3
 80077be:	1c5a      	adds	r2, r3, #1
 80077c0:	2030      	movs	r0, #48	; 0x30
 80077c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077c6:	4422      	add	r2, r4
 80077c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077d0:	3302      	adds	r3, #2
 80077d2:	e7c7      	b.n	8007764 <_printf_common+0x58>
 80077d4:	2301      	movs	r3, #1
 80077d6:	4622      	mov	r2, r4
 80077d8:	4649      	mov	r1, r9
 80077da:	4638      	mov	r0, r7
 80077dc:	47c0      	blx	r8
 80077de:	3001      	adds	r0, #1
 80077e0:	d0e6      	beq.n	80077b0 <_printf_common+0xa4>
 80077e2:	3601      	adds	r6, #1
 80077e4:	e7d9      	b.n	800779a <_printf_common+0x8e>
	...

080077e8 <_printf_i>:
 80077e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077ec:	7e0f      	ldrb	r7, [r1, #24]
 80077ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80077f0:	2f78      	cmp	r7, #120	; 0x78
 80077f2:	4691      	mov	r9, r2
 80077f4:	4680      	mov	r8, r0
 80077f6:	460c      	mov	r4, r1
 80077f8:	469a      	mov	sl, r3
 80077fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80077fe:	d807      	bhi.n	8007810 <_printf_i+0x28>
 8007800:	2f62      	cmp	r7, #98	; 0x62
 8007802:	d80a      	bhi.n	800781a <_printf_i+0x32>
 8007804:	2f00      	cmp	r7, #0
 8007806:	f000 80d8 	beq.w	80079ba <_printf_i+0x1d2>
 800780a:	2f58      	cmp	r7, #88	; 0x58
 800780c:	f000 80a3 	beq.w	8007956 <_printf_i+0x16e>
 8007810:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007814:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007818:	e03a      	b.n	8007890 <_printf_i+0xa8>
 800781a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800781e:	2b15      	cmp	r3, #21
 8007820:	d8f6      	bhi.n	8007810 <_printf_i+0x28>
 8007822:	a101      	add	r1, pc, #4	; (adr r1, 8007828 <_printf_i+0x40>)
 8007824:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007828:	08007881 	.word	0x08007881
 800782c:	08007895 	.word	0x08007895
 8007830:	08007811 	.word	0x08007811
 8007834:	08007811 	.word	0x08007811
 8007838:	08007811 	.word	0x08007811
 800783c:	08007811 	.word	0x08007811
 8007840:	08007895 	.word	0x08007895
 8007844:	08007811 	.word	0x08007811
 8007848:	08007811 	.word	0x08007811
 800784c:	08007811 	.word	0x08007811
 8007850:	08007811 	.word	0x08007811
 8007854:	080079a1 	.word	0x080079a1
 8007858:	080078c5 	.word	0x080078c5
 800785c:	08007983 	.word	0x08007983
 8007860:	08007811 	.word	0x08007811
 8007864:	08007811 	.word	0x08007811
 8007868:	080079c3 	.word	0x080079c3
 800786c:	08007811 	.word	0x08007811
 8007870:	080078c5 	.word	0x080078c5
 8007874:	08007811 	.word	0x08007811
 8007878:	08007811 	.word	0x08007811
 800787c:	0800798b 	.word	0x0800798b
 8007880:	682b      	ldr	r3, [r5, #0]
 8007882:	1d1a      	adds	r2, r3, #4
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	602a      	str	r2, [r5, #0]
 8007888:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800788c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007890:	2301      	movs	r3, #1
 8007892:	e0a3      	b.n	80079dc <_printf_i+0x1f4>
 8007894:	6820      	ldr	r0, [r4, #0]
 8007896:	6829      	ldr	r1, [r5, #0]
 8007898:	0606      	lsls	r6, r0, #24
 800789a:	f101 0304 	add.w	r3, r1, #4
 800789e:	d50a      	bpl.n	80078b6 <_printf_i+0xce>
 80078a0:	680e      	ldr	r6, [r1, #0]
 80078a2:	602b      	str	r3, [r5, #0]
 80078a4:	2e00      	cmp	r6, #0
 80078a6:	da03      	bge.n	80078b0 <_printf_i+0xc8>
 80078a8:	232d      	movs	r3, #45	; 0x2d
 80078aa:	4276      	negs	r6, r6
 80078ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078b0:	485e      	ldr	r0, [pc, #376]	; (8007a2c <_printf_i+0x244>)
 80078b2:	230a      	movs	r3, #10
 80078b4:	e019      	b.n	80078ea <_printf_i+0x102>
 80078b6:	680e      	ldr	r6, [r1, #0]
 80078b8:	602b      	str	r3, [r5, #0]
 80078ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80078be:	bf18      	it	ne
 80078c0:	b236      	sxthne	r6, r6
 80078c2:	e7ef      	b.n	80078a4 <_printf_i+0xbc>
 80078c4:	682b      	ldr	r3, [r5, #0]
 80078c6:	6820      	ldr	r0, [r4, #0]
 80078c8:	1d19      	adds	r1, r3, #4
 80078ca:	6029      	str	r1, [r5, #0]
 80078cc:	0601      	lsls	r1, r0, #24
 80078ce:	d501      	bpl.n	80078d4 <_printf_i+0xec>
 80078d0:	681e      	ldr	r6, [r3, #0]
 80078d2:	e002      	b.n	80078da <_printf_i+0xf2>
 80078d4:	0646      	lsls	r6, r0, #25
 80078d6:	d5fb      	bpl.n	80078d0 <_printf_i+0xe8>
 80078d8:	881e      	ldrh	r6, [r3, #0]
 80078da:	4854      	ldr	r0, [pc, #336]	; (8007a2c <_printf_i+0x244>)
 80078dc:	2f6f      	cmp	r7, #111	; 0x6f
 80078de:	bf0c      	ite	eq
 80078e0:	2308      	moveq	r3, #8
 80078e2:	230a      	movne	r3, #10
 80078e4:	2100      	movs	r1, #0
 80078e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80078ea:	6865      	ldr	r5, [r4, #4]
 80078ec:	60a5      	str	r5, [r4, #8]
 80078ee:	2d00      	cmp	r5, #0
 80078f0:	bfa2      	ittt	ge
 80078f2:	6821      	ldrge	r1, [r4, #0]
 80078f4:	f021 0104 	bicge.w	r1, r1, #4
 80078f8:	6021      	strge	r1, [r4, #0]
 80078fa:	b90e      	cbnz	r6, 8007900 <_printf_i+0x118>
 80078fc:	2d00      	cmp	r5, #0
 80078fe:	d04d      	beq.n	800799c <_printf_i+0x1b4>
 8007900:	4615      	mov	r5, r2
 8007902:	fbb6 f1f3 	udiv	r1, r6, r3
 8007906:	fb03 6711 	mls	r7, r3, r1, r6
 800790a:	5dc7      	ldrb	r7, [r0, r7]
 800790c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007910:	4637      	mov	r7, r6
 8007912:	42bb      	cmp	r3, r7
 8007914:	460e      	mov	r6, r1
 8007916:	d9f4      	bls.n	8007902 <_printf_i+0x11a>
 8007918:	2b08      	cmp	r3, #8
 800791a:	d10b      	bne.n	8007934 <_printf_i+0x14c>
 800791c:	6823      	ldr	r3, [r4, #0]
 800791e:	07de      	lsls	r6, r3, #31
 8007920:	d508      	bpl.n	8007934 <_printf_i+0x14c>
 8007922:	6923      	ldr	r3, [r4, #16]
 8007924:	6861      	ldr	r1, [r4, #4]
 8007926:	4299      	cmp	r1, r3
 8007928:	bfde      	ittt	le
 800792a:	2330      	movle	r3, #48	; 0x30
 800792c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007930:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007934:	1b52      	subs	r2, r2, r5
 8007936:	6122      	str	r2, [r4, #16]
 8007938:	f8cd a000 	str.w	sl, [sp]
 800793c:	464b      	mov	r3, r9
 800793e:	aa03      	add	r2, sp, #12
 8007940:	4621      	mov	r1, r4
 8007942:	4640      	mov	r0, r8
 8007944:	f7ff fee2 	bl	800770c <_printf_common>
 8007948:	3001      	adds	r0, #1
 800794a:	d14c      	bne.n	80079e6 <_printf_i+0x1fe>
 800794c:	f04f 30ff 	mov.w	r0, #4294967295
 8007950:	b004      	add	sp, #16
 8007952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007956:	4835      	ldr	r0, [pc, #212]	; (8007a2c <_printf_i+0x244>)
 8007958:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800795c:	6829      	ldr	r1, [r5, #0]
 800795e:	6823      	ldr	r3, [r4, #0]
 8007960:	f851 6b04 	ldr.w	r6, [r1], #4
 8007964:	6029      	str	r1, [r5, #0]
 8007966:	061d      	lsls	r5, r3, #24
 8007968:	d514      	bpl.n	8007994 <_printf_i+0x1ac>
 800796a:	07df      	lsls	r7, r3, #31
 800796c:	bf44      	itt	mi
 800796e:	f043 0320 	orrmi.w	r3, r3, #32
 8007972:	6023      	strmi	r3, [r4, #0]
 8007974:	b91e      	cbnz	r6, 800797e <_printf_i+0x196>
 8007976:	6823      	ldr	r3, [r4, #0]
 8007978:	f023 0320 	bic.w	r3, r3, #32
 800797c:	6023      	str	r3, [r4, #0]
 800797e:	2310      	movs	r3, #16
 8007980:	e7b0      	b.n	80078e4 <_printf_i+0xfc>
 8007982:	6823      	ldr	r3, [r4, #0]
 8007984:	f043 0320 	orr.w	r3, r3, #32
 8007988:	6023      	str	r3, [r4, #0]
 800798a:	2378      	movs	r3, #120	; 0x78
 800798c:	4828      	ldr	r0, [pc, #160]	; (8007a30 <_printf_i+0x248>)
 800798e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007992:	e7e3      	b.n	800795c <_printf_i+0x174>
 8007994:	0659      	lsls	r1, r3, #25
 8007996:	bf48      	it	mi
 8007998:	b2b6      	uxthmi	r6, r6
 800799a:	e7e6      	b.n	800796a <_printf_i+0x182>
 800799c:	4615      	mov	r5, r2
 800799e:	e7bb      	b.n	8007918 <_printf_i+0x130>
 80079a0:	682b      	ldr	r3, [r5, #0]
 80079a2:	6826      	ldr	r6, [r4, #0]
 80079a4:	6961      	ldr	r1, [r4, #20]
 80079a6:	1d18      	adds	r0, r3, #4
 80079a8:	6028      	str	r0, [r5, #0]
 80079aa:	0635      	lsls	r5, r6, #24
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	d501      	bpl.n	80079b4 <_printf_i+0x1cc>
 80079b0:	6019      	str	r1, [r3, #0]
 80079b2:	e002      	b.n	80079ba <_printf_i+0x1d2>
 80079b4:	0670      	lsls	r0, r6, #25
 80079b6:	d5fb      	bpl.n	80079b0 <_printf_i+0x1c8>
 80079b8:	8019      	strh	r1, [r3, #0]
 80079ba:	2300      	movs	r3, #0
 80079bc:	6123      	str	r3, [r4, #16]
 80079be:	4615      	mov	r5, r2
 80079c0:	e7ba      	b.n	8007938 <_printf_i+0x150>
 80079c2:	682b      	ldr	r3, [r5, #0]
 80079c4:	1d1a      	adds	r2, r3, #4
 80079c6:	602a      	str	r2, [r5, #0]
 80079c8:	681d      	ldr	r5, [r3, #0]
 80079ca:	6862      	ldr	r2, [r4, #4]
 80079cc:	2100      	movs	r1, #0
 80079ce:	4628      	mov	r0, r5
 80079d0:	f7f8 fc06 	bl	80001e0 <memchr>
 80079d4:	b108      	cbz	r0, 80079da <_printf_i+0x1f2>
 80079d6:	1b40      	subs	r0, r0, r5
 80079d8:	6060      	str	r0, [r4, #4]
 80079da:	6863      	ldr	r3, [r4, #4]
 80079dc:	6123      	str	r3, [r4, #16]
 80079de:	2300      	movs	r3, #0
 80079e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079e4:	e7a8      	b.n	8007938 <_printf_i+0x150>
 80079e6:	6923      	ldr	r3, [r4, #16]
 80079e8:	462a      	mov	r2, r5
 80079ea:	4649      	mov	r1, r9
 80079ec:	4640      	mov	r0, r8
 80079ee:	47d0      	blx	sl
 80079f0:	3001      	adds	r0, #1
 80079f2:	d0ab      	beq.n	800794c <_printf_i+0x164>
 80079f4:	6823      	ldr	r3, [r4, #0]
 80079f6:	079b      	lsls	r3, r3, #30
 80079f8:	d413      	bmi.n	8007a22 <_printf_i+0x23a>
 80079fa:	68e0      	ldr	r0, [r4, #12]
 80079fc:	9b03      	ldr	r3, [sp, #12]
 80079fe:	4298      	cmp	r0, r3
 8007a00:	bfb8      	it	lt
 8007a02:	4618      	movlt	r0, r3
 8007a04:	e7a4      	b.n	8007950 <_printf_i+0x168>
 8007a06:	2301      	movs	r3, #1
 8007a08:	4632      	mov	r2, r6
 8007a0a:	4649      	mov	r1, r9
 8007a0c:	4640      	mov	r0, r8
 8007a0e:	47d0      	blx	sl
 8007a10:	3001      	adds	r0, #1
 8007a12:	d09b      	beq.n	800794c <_printf_i+0x164>
 8007a14:	3501      	adds	r5, #1
 8007a16:	68e3      	ldr	r3, [r4, #12]
 8007a18:	9903      	ldr	r1, [sp, #12]
 8007a1a:	1a5b      	subs	r3, r3, r1
 8007a1c:	42ab      	cmp	r3, r5
 8007a1e:	dcf2      	bgt.n	8007a06 <_printf_i+0x21e>
 8007a20:	e7eb      	b.n	80079fa <_printf_i+0x212>
 8007a22:	2500      	movs	r5, #0
 8007a24:	f104 0619 	add.w	r6, r4, #25
 8007a28:	e7f5      	b.n	8007a16 <_printf_i+0x22e>
 8007a2a:	bf00      	nop
 8007a2c:	0800873d 	.word	0x0800873d
 8007a30:	0800874e 	.word	0x0800874e

08007a34 <_sbrk_r>:
 8007a34:	b538      	push	{r3, r4, r5, lr}
 8007a36:	4d06      	ldr	r5, [pc, #24]	; (8007a50 <_sbrk_r+0x1c>)
 8007a38:	2300      	movs	r3, #0
 8007a3a:	4604      	mov	r4, r0
 8007a3c:	4608      	mov	r0, r1
 8007a3e:	602b      	str	r3, [r5, #0]
 8007a40:	f7fe fdb2 	bl	80065a8 <_sbrk>
 8007a44:	1c43      	adds	r3, r0, #1
 8007a46:	d102      	bne.n	8007a4e <_sbrk_r+0x1a>
 8007a48:	682b      	ldr	r3, [r5, #0]
 8007a4a:	b103      	cbz	r3, 8007a4e <_sbrk_r+0x1a>
 8007a4c:	6023      	str	r3, [r4, #0]
 8007a4e:	bd38      	pop	{r3, r4, r5, pc}
 8007a50:	20000cf4 	.word	0x20000cf4

08007a54 <__sread>:
 8007a54:	b510      	push	{r4, lr}
 8007a56:	460c      	mov	r4, r1
 8007a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a5c:	f000 f8f2 	bl	8007c44 <_read_r>
 8007a60:	2800      	cmp	r0, #0
 8007a62:	bfab      	itete	ge
 8007a64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a66:	89a3      	ldrhlt	r3, [r4, #12]
 8007a68:	181b      	addge	r3, r3, r0
 8007a6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a6e:	bfac      	ite	ge
 8007a70:	6563      	strge	r3, [r4, #84]	; 0x54
 8007a72:	81a3      	strhlt	r3, [r4, #12]
 8007a74:	bd10      	pop	{r4, pc}

08007a76 <__swrite>:
 8007a76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a7a:	461f      	mov	r7, r3
 8007a7c:	898b      	ldrh	r3, [r1, #12]
 8007a7e:	05db      	lsls	r3, r3, #23
 8007a80:	4605      	mov	r5, r0
 8007a82:	460c      	mov	r4, r1
 8007a84:	4616      	mov	r6, r2
 8007a86:	d505      	bpl.n	8007a94 <__swrite+0x1e>
 8007a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f000 f870 	bl	8007b74 <_lseek_r>
 8007a94:	89a3      	ldrh	r3, [r4, #12]
 8007a96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a9e:	81a3      	strh	r3, [r4, #12]
 8007aa0:	4632      	mov	r2, r6
 8007aa2:	463b      	mov	r3, r7
 8007aa4:	4628      	mov	r0, r5
 8007aa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007aaa:	f000 b817 	b.w	8007adc <_write_r>

08007aae <__sseek>:
 8007aae:	b510      	push	{r4, lr}
 8007ab0:	460c      	mov	r4, r1
 8007ab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ab6:	f000 f85d 	bl	8007b74 <_lseek_r>
 8007aba:	1c43      	adds	r3, r0, #1
 8007abc:	89a3      	ldrh	r3, [r4, #12]
 8007abe:	bf15      	itete	ne
 8007ac0:	6560      	strne	r0, [r4, #84]	; 0x54
 8007ac2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007ac6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007aca:	81a3      	strheq	r3, [r4, #12]
 8007acc:	bf18      	it	ne
 8007ace:	81a3      	strhne	r3, [r4, #12]
 8007ad0:	bd10      	pop	{r4, pc}

08007ad2 <__sclose>:
 8007ad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ad6:	f000 b81b 	b.w	8007b10 <_close_r>
	...

08007adc <_write_r>:
 8007adc:	b538      	push	{r3, r4, r5, lr}
 8007ade:	4d07      	ldr	r5, [pc, #28]	; (8007afc <_write_r+0x20>)
 8007ae0:	4604      	mov	r4, r0
 8007ae2:	4608      	mov	r0, r1
 8007ae4:	4611      	mov	r1, r2
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	602a      	str	r2, [r5, #0]
 8007aea:	461a      	mov	r2, r3
 8007aec:	f7fe fd3f 	bl	800656e <_write>
 8007af0:	1c43      	adds	r3, r0, #1
 8007af2:	d102      	bne.n	8007afa <_write_r+0x1e>
 8007af4:	682b      	ldr	r3, [r5, #0]
 8007af6:	b103      	cbz	r3, 8007afa <_write_r+0x1e>
 8007af8:	6023      	str	r3, [r4, #0]
 8007afa:	bd38      	pop	{r3, r4, r5, pc}
 8007afc:	20000cf4 	.word	0x20000cf4

08007b00 <abort>:
 8007b00:	b508      	push	{r3, lr}
 8007b02:	2006      	movs	r0, #6
 8007b04:	f000 f8d8 	bl	8007cb8 <raise>
 8007b08:	2001      	movs	r0, #1
 8007b0a:	f7fe fd15 	bl	8006538 <_exit>
	...

08007b10 <_close_r>:
 8007b10:	b538      	push	{r3, r4, r5, lr}
 8007b12:	4d06      	ldr	r5, [pc, #24]	; (8007b2c <_close_r+0x1c>)
 8007b14:	2300      	movs	r3, #0
 8007b16:	4604      	mov	r4, r0
 8007b18:	4608      	mov	r0, r1
 8007b1a:	602b      	str	r3, [r5, #0]
 8007b1c:	f7fe fd70 	bl	8006600 <_close>
 8007b20:	1c43      	adds	r3, r0, #1
 8007b22:	d102      	bne.n	8007b2a <_close_r+0x1a>
 8007b24:	682b      	ldr	r3, [r5, #0]
 8007b26:	b103      	cbz	r3, 8007b2a <_close_r+0x1a>
 8007b28:	6023      	str	r3, [r4, #0]
 8007b2a:	bd38      	pop	{r3, r4, r5, pc}
 8007b2c:	20000cf4 	.word	0x20000cf4

08007b30 <_fstat_r>:
 8007b30:	b538      	push	{r3, r4, r5, lr}
 8007b32:	4d07      	ldr	r5, [pc, #28]	; (8007b50 <_fstat_r+0x20>)
 8007b34:	2300      	movs	r3, #0
 8007b36:	4604      	mov	r4, r0
 8007b38:	4608      	mov	r0, r1
 8007b3a:	4611      	mov	r1, r2
 8007b3c:	602b      	str	r3, [r5, #0]
 8007b3e:	f7fe fd6a 	bl	8006616 <_fstat>
 8007b42:	1c43      	adds	r3, r0, #1
 8007b44:	d102      	bne.n	8007b4c <_fstat_r+0x1c>
 8007b46:	682b      	ldr	r3, [r5, #0]
 8007b48:	b103      	cbz	r3, 8007b4c <_fstat_r+0x1c>
 8007b4a:	6023      	str	r3, [r4, #0]
 8007b4c:	bd38      	pop	{r3, r4, r5, pc}
 8007b4e:	bf00      	nop
 8007b50:	20000cf4 	.word	0x20000cf4

08007b54 <_isatty_r>:
 8007b54:	b538      	push	{r3, r4, r5, lr}
 8007b56:	4d06      	ldr	r5, [pc, #24]	; (8007b70 <_isatty_r+0x1c>)
 8007b58:	2300      	movs	r3, #0
 8007b5a:	4604      	mov	r4, r0
 8007b5c:	4608      	mov	r0, r1
 8007b5e:	602b      	str	r3, [r5, #0]
 8007b60:	f7fe fd68 	bl	8006634 <_isatty>
 8007b64:	1c43      	adds	r3, r0, #1
 8007b66:	d102      	bne.n	8007b6e <_isatty_r+0x1a>
 8007b68:	682b      	ldr	r3, [r5, #0]
 8007b6a:	b103      	cbz	r3, 8007b6e <_isatty_r+0x1a>
 8007b6c:	6023      	str	r3, [r4, #0]
 8007b6e:	bd38      	pop	{r3, r4, r5, pc}
 8007b70:	20000cf4 	.word	0x20000cf4

08007b74 <_lseek_r>:
 8007b74:	b538      	push	{r3, r4, r5, lr}
 8007b76:	4d07      	ldr	r5, [pc, #28]	; (8007b94 <_lseek_r+0x20>)
 8007b78:	4604      	mov	r4, r0
 8007b7a:	4608      	mov	r0, r1
 8007b7c:	4611      	mov	r1, r2
 8007b7e:	2200      	movs	r2, #0
 8007b80:	602a      	str	r2, [r5, #0]
 8007b82:	461a      	mov	r2, r3
 8007b84:	f7fe fd60 	bl	8006648 <_lseek>
 8007b88:	1c43      	adds	r3, r0, #1
 8007b8a:	d102      	bne.n	8007b92 <_lseek_r+0x1e>
 8007b8c:	682b      	ldr	r3, [r5, #0]
 8007b8e:	b103      	cbz	r3, 8007b92 <_lseek_r+0x1e>
 8007b90:	6023      	str	r3, [r4, #0]
 8007b92:	bd38      	pop	{r3, r4, r5, pc}
 8007b94:	20000cf4 	.word	0x20000cf4

08007b98 <memmove>:
 8007b98:	4288      	cmp	r0, r1
 8007b9a:	b510      	push	{r4, lr}
 8007b9c:	eb01 0402 	add.w	r4, r1, r2
 8007ba0:	d902      	bls.n	8007ba8 <memmove+0x10>
 8007ba2:	4284      	cmp	r4, r0
 8007ba4:	4623      	mov	r3, r4
 8007ba6:	d807      	bhi.n	8007bb8 <memmove+0x20>
 8007ba8:	1e43      	subs	r3, r0, #1
 8007baa:	42a1      	cmp	r1, r4
 8007bac:	d008      	beq.n	8007bc0 <memmove+0x28>
 8007bae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007bb6:	e7f8      	b.n	8007baa <memmove+0x12>
 8007bb8:	4402      	add	r2, r0
 8007bba:	4601      	mov	r1, r0
 8007bbc:	428a      	cmp	r2, r1
 8007bbe:	d100      	bne.n	8007bc2 <memmove+0x2a>
 8007bc0:	bd10      	pop	{r4, pc}
 8007bc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007bca:	e7f7      	b.n	8007bbc <memmove+0x24>

08007bcc <__malloc_lock>:
 8007bcc:	4801      	ldr	r0, [pc, #4]	; (8007bd4 <__malloc_lock+0x8>)
 8007bce:	f7ff b99b 	b.w	8006f08 <__retarget_lock_acquire_recursive>
 8007bd2:	bf00      	nop
 8007bd4:	20000ce8 	.word	0x20000ce8

08007bd8 <__malloc_unlock>:
 8007bd8:	4801      	ldr	r0, [pc, #4]	; (8007be0 <__malloc_unlock+0x8>)
 8007bda:	f7ff b996 	b.w	8006f0a <__retarget_lock_release_recursive>
 8007bde:	bf00      	nop
 8007be0:	20000ce8 	.word	0x20000ce8

08007be4 <_realloc_r>:
 8007be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007be8:	4680      	mov	r8, r0
 8007bea:	4614      	mov	r4, r2
 8007bec:	460e      	mov	r6, r1
 8007bee:	b921      	cbnz	r1, 8007bfa <_realloc_r+0x16>
 8007bf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bf4:	4611      	mov	r1, r2
 8007bf6:	f7ff ba61 	b.w	80070bc <_malloc_r>
 8007bfa:	b92a      	cbnz	r2, 8007c08 <_realloc_r+0x24>
 8007bfc:	f7ff f9f4 	bl	8006fe8 <_free_r>
 8007c00:	4625      	mov	r5, r4
 8007c02:	4628      	mov	r0, r5
 8007c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c08:	f000 f872 	bl	8007cf0 <_malloc_usable_size_r>
 8007c0c:	4284      	cmp	r4, r0
 8007c0e:	4607      	mov	r7, r0
 8007c10:	d802      	bhi.n	8007c18 <_realloc_r+0x34>
 8007c12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c16:	d812      	bhi.n	8007c3e <_realloc_r+0x5a>
 8007c18:	4621      	mov	r1, r4
 8007c1a:	4640      	mov	r0, r8
 8007c1c:	f7ff fa4e 	bl	80070bc <_malloc_r>
 8007c20:	4605      	mov	r5, r0
 8007c22:	2800      	cmp	r0, #0
 8007c24:	d0ed      	beq.n	8007c02 <_realloc_r+0x1e>
 8007c26:	42bc      	cmp	r4, r7
 8007c28:	4622      	mov	r2, r4
 8007c2a:	4631      	mov	r1, r6
 8007c2c:	bf28      	it	cs
 8007c2e:	463a      	movcs	r2, r7
 8007c30:	f7fe fd7c 	bl	800672c <memcpy>
 8007c34:	4631      	mov	r1, r6
 8007c36:	4640      	mov	r0, r8
 8007c38:	f7ff f9d6 	bl	8006fe8 <_free_r>
 8007c3c:	e7e1      	b.n	8007c02 <_realloc_r+0x1e>
 8007c3e:	4635      	mov	r5, r6
 8007c40:	e7df      	b.n	8007c02 <_realloc_r+0x1e>
	...

08007c44 <_read_r>:
 8007c44:	b538      	push	{r3, r4, r5, lr}
 8007c46:	4d07      	ldr	r5, [pc, #28]	; (8007c64 <_read_r+0x20>)
 8007c48:	4604      	mov	r4, r0
 8007c4a:	4608      	mov	r0, r1
 8007c4c:	4611      	mov	r1, r2
 8007c4e:	2200      	movs	r2, #0
 8007c50:	602a      	str	r2, [r5, #0]
 8007c52:	461a      	mov	r2, r3
 8007c54:	f7fe fc7a 	bl	800654c <_read>
 8007c58:	1c43      	adds	r3, r0, #1
 8007c5a:	d102      	bne.n	8007c62 <_read_r+0x1e>
 8007c5c:	682b      	ldr	r3, [r5, #0]
 8007c5e:	b103      	cbz	r3, 8007c62 <_read_r+0x1e>
 8007c60:	6023      	str	r3, [r4, #0]
 8007c62:	bd38      	pop	{r3, r4, r5, pc}
 8007c64:	20000cf4 	.word	0x20000cf4

08007c68 <_raise_r>:
 8007c68:	291f      	cmp	r1, #31
 8007c6a:	b538      	push	{r3, r4, r5, lr}
 8007c6c:	4604      	mov	r4, r0
 8007c6e:	460d      	mov	r5, r1
 8007c70:	d904      	bls.n	8007c7c <_raise_r+0x14>
 8007c72:	2316      	movs	r3, #22
 8007c74:	6003      	str	r3, [r0, #0]
 8007c76:	f04f 30ff 	mov.w	r0, #4294967295
 8007c7a:	bd38      	pop	{r3, r4, r5, pc}
 8007c7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007c7e:	b112      	cbz	r2, 8007c86 <_raise_r+0x1e>
 8007c80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c84:	b94b      	cbnz	r3, 8007c9a <_raise_r+0x32>
 8007c86:	4620      	mov	r0, r4
 8007c88:	f000 f830 	bl	8007cec <_getpid_r>
 8007c8c:	462a      	mov	r2, r5
 8007c8e:	4601      	mov	r1, r0
 8007c90:	4620      	mov	r0, r4
 8007c92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c96:	f000 b817 	b.w	8007cc8 <_kill_r>
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d00a      	beq.n	8007cb4 <_raise_r+0x4c>
 8007c9e:	1c59      	adds	r1, r3, #1
 8007ca0:	d103      	bne.n	8007caa <_raise_r+0x42>
 8007ca2:	2316      	movs	r3, #22
 8007ca4:	6003      	str	r3, [r0, #0]
 8007ca6:	2001      	movs	r0, #1
 8007ca8:	e7e7      	b.n	8007c7a <_raise_r+0x12>
 8007caa:	2400      	movs	r4, #0
 8007cac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	4798      	blx	r3
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	e7e0      	b.n	8007c7a <_raise_r+0x12>

08007cb8 <raise>:
 8007cb8:	4b02      	ldr	r3, [pc, #8]	; (8007cc4 <raise+0xc>)
 8007cba:	4601      	mov	r1, r0
 8007cbc:	6818      	ldr	r0, [r3, #0]
 8007cbe:	f7ff bfd3 	b.w	8007c68 <_raise_r>
 8007cc2:	bf00      	nop
 8007cc4:	20000020 	.word	0x20000020

08007cc8 <_kill_r>:
 8007cc8:	b538      	push	{r3, r4, r5, lr}
 8007cca:	4d07      	ldr	r5, [pc, #28]	; (8007ce8 <_kill_r+0x20>)
 8007ccc:	2300      	movs	r3, #0
 8007cce:	4604      	mov	r4, r0
 8007cd0:	4608      	mov	r0, r1
 8007cd2:	4611      	mov	r1, r2
 8007cd4:	602b      	str	r3, [r5, #0]
 8007cd6:	f7fe fc1f 	bl	8006518 <_kill>
 8007cda:	1c43      	adds	r3, r0, #1
 8007cdc:	d102      	bne.n	8007ce4 <_kill_r+0x1c>
 8007cde:	682b      	ldr	r3, [r5, #0]
 8007ce0:	b103      	cbz	r3, 8007ce4 <_kill_r+0x1c>
 8007ce2:	6023      	str	r3, [r4, #0]
 8007ce4:	bd38      	pop	{r3, r4, r5, pc}
 8007ce6:	bf00      	nop
 8007ce8:	20000cf4 	.word	0x20000cf4

08007cec <_getpid_r>:
 8007cec:	f7fe bc0d 	b.w	800650a <_getpid>

08007cf0 <_malloc_usable_size_r>:
 8007cf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cf4:	1f18      	subs	r0, r3, #4
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	bfbc      	itt	lt
 8007cfa:	580b      	ldrlt	r3, [r1, r0]
 8007cfc:	18c0      	addlt	r0, r0, r3
 8007cfe:	4770      	bx	lr

08007d00 <_init>:
 8007d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d02:	bf00      	nop
 8007d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d06:	bc08      	pop	{r3}
 8007d08:	469e      	mov	lr, r3
 8007d0a:	4770      	bx	lr

08007d0c <_fini>:
 8007d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d0e:	bf00      	nop
 8007d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d12:	bc08      	pop	{r3}
 8007d14:	469e      	mov	lr, r3
 8007d16:	4770      	bx	lr
