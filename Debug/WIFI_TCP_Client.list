
WIFI_TCP_Client.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009920  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a58  08009ab0  08009ab0  00019ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a508  0800a508  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a508  0800a508  0001a508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a510  0800a510  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a510  0800a510  0001a510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800a518  0800a518  0001a518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0800a520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ad0  200000b0  0800a5d0  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00017000  20000b80  0800a5d0  00020b80  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a7c5  00000000  00000000  000200da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003602  00000000  00000000  0003a89f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001938  00000000  00000000  0003dea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b0  00000000  00000000  0003f7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029b94  00000000  00000000  00040f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f1cb  00000000  00000000  0006ab24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa4a9  00000000  00000000  00089cef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00184198  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079d0  00000000  00000000  001841e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b0 	.word	0x200000b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009a98 	.word	0x08009a98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	08009a98 	.word	0x08009a98

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_d2iz>:
 80005f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000600:	d215      	bcs.n	800062e <__aeabi_d2iz+0x36>
 8000602:	d511      	bpl.n	8000628 <__aeabi_d2iz+0x30>
 8000604:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000608:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800060c:	d912      	bls.n	8000634 <__aeabi_d2iz+0x3c>
 800060e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000612:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000616:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800061a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800061e:	fa23 f002 	lsr.w	r0, r3, r2
 8000622:	bf18      	it	ne
 8000624:	4240      	negne	r0, r0
 8000626:	4770      	bx	lr
 8000628:	f04f 0000 	mov.w	r0, #0
 800062c:	4770      	bx	lr
 800062e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000632:	d105      	bne.n	8000640 <__aeabi_d2iz+0x48>
 8000634:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000638:	bf08      	it	eq
 800063a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <__aeabi_frsub>:
 8000648:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800064c:	e002      	b.n	8000654 <__addsf3>
 800064e:	bf00      	nop

08000650 <__aeabi_fsub>:
 8000650:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000654 <__addsf3>:
 8000654:	0042      	lsls	r2, r0, #1
 8000656:	bf1f      	itttt	ne
 8000658:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800065c:	ea92 0f03 	teqne	r2, r3
 8000660:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000664:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000668:	d06a      	beq.n	8000740 <__addsf3+0xec>
 800066a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800066e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000672:	bfc1      	itttt	gt
 8000674:	18d2      	addgt	r2, r2, r3
 8000676:	4041      	eorgt	r1, r0
 8000678:	4048      	eorgt	r0, r1
 800067a:	4041      	eorgt	r1, r0
 800067c:	bfb8      	it	lt
 800067e:	425b      	neglt	r3, r3
 8000680:	2b19      	cmp	r3, #25
 8000682:	bf88      	it	hi
 8000684:	4770      	bxhi	lr
 8000686:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800068a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800068e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000692:	bf18      	it	ne
 8000694:	4240      	negne	r0, r0
 8000696:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800069a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800069e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006a2:	bf18      	it	ne
 80006a4:	4249      	negne	r1, r1
 80006a6:	ea92 0f03 	teq	r2, r3
 80006aa:	d03f      	beq.n	800072c <__addsf3+0xd8>
 80006ac:	f1a2 0201 	sub.w	r2, r2, #1
 80006b0:	fa41 fc03 	asr.w	ip, r1, r3
 80006b4:	eb10 000c 	adds.w	r0, r0, ip
 80006b8:	f1c3 0320 	rsb	r3, r3, #32
 80006bc:	fa01 f103 	lsl.w	r1, r1, r3
 80006c0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006c4:	d502      	bpl.n	80006cc <__addsf3+0x78>
 80006c6:	4249      	negs	r1, r1
 80006c8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006cc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006d0:	d313      	bcc.n	80006fa <__addsf3+0xa6>
 80006d2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006d6:	d306      	bcc.n	80006e6 <__addsf3+0x92>
 80006d8:	0840      	lsrs	r0, r0, #1
 80006da:	ea4f 0131 	mov.w	r1, r1, rrx
 80006de:	f102 0201 	add.w	r2, r2, #1
 80006e2:	2afe      	cmp	r2, #254	; 0xfe
 80006e4:	d251      	bcs.n	800078a <__addsf3+0x136>
 80006e6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80006ea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006ee:	bf08      	it	eq
 80006f0:	f020 0001 	biceq.w	r0, r0, #1
 80006f4:	ea40 0003 	orr.w	r0, r0, r3
 80006f8:	4770      	bx	lr
 80006fa:	0049      	lsls	r1, r1, #1
 80006fc:	eb40 0000 	adc.w	r0, r0, r0
 8000700:	3a01      	subs	r2, #1
 8000702:	bf28      	it	cs
 8000704:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000708:	d2ed      	bcs.n	80006e6 <__addsf3+0x92>
 800070a:	fab0 fc80 	clz	ip, r0
 800070e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000712:	ebb2 020c 	subs.w	r2, r2, ip
 8000716:	fa00 f00c 	lsl.w	r0, r0, ip
 800071a:	bfaa      	itet	ge
 800071c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000720:	4252      	neglt	r2, r2
 8000722:	4318      	orrge	r0, r3
 8000724:	bfbc      	itt	lt
 8000726:	40d0      	lsrlt	r0, r2
 8000728:	4318      	orrlt	r0, r3
 800072a:	4770      	bx	lr
 800072c:	f092 0f00 	teq	r2, #0
 8000730:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000734:	bf06      	itte	eq
 8000736:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800073a:	3201      	addeq	r2, #1
 800073c:	3b01      	subne	r3, #1
 800073e:	e7b5      	b.n	80006ac <__addsf3+0x58>
 8000740:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000744:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000748:	bf18      	it	ne
 800074a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800074e:	d021      	beq.n	8000794 <__addsf3+0x140>
 8000750:	ea92 0f03 	teq	r2, r3
 8000754:	d004      	beq.n	8000760 <__addsf3+0x10c>
 8000756:	f092 0f00 	teq	r2, #0
 800075a:	bf08      	it	eq
 800075c:	4608      	moveq	r0, r1
 800075e:	4770      	bx	lr
 8000760:	ea90 0f01 	teq	r0, r1
 8000764:	bf1c      	itt	ne
 8000766:	2000      	movne	r0, #0
 8000768:	4770      	bxne	lr
 800076a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800076e:	d104      	bne.n	800077a <__addsf3+0x126>
 8000770:	0040      	lsls	r0, r0, #1
 8000772:	bf28      	it	cs
 8000774:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000778:	4770      	bx	lr
 800077a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800077e:	bf3c      	itt	cc
 8000780:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000784:	4770      	bxcc	lr
 8000786:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800078a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800078e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000792:	4770      	bx	lr
 8000794:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000798:	bf16      	itet	ne
 800079a:	4608      	movne	r0, r1
 800079c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007a0:	4601      	movne	r1, r0
 80007a2:	0242      	lsls	r2, r0, #9
 80007a4:	bf06      	itte	eq
 80007a6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007aa:	ea90 0f01 	teqeq	r0, r1
 80007ae:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007b2:	4770      	bx	lr

080007b4 <__aeabi_ui2f>:
 80007b4:	f04f 0300 	mov.w	r3, #0
 80007b8:	e004      	b.n	80007c4 <__aeabi_i2f+0x8>
 80007ba:	bf00      	nop

080007bc <__aeabi_i2f>:
 80007bc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	ea5f 0c00 	movs.w	ip, r0
 80007c8:	bf08      	it	eq
 80007ca:	4770      	bxeq	lr
 80007cc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007d0:	4601      	mov	r1, r0
 80007d2:	f04f 0000 	mov.w	r0, #0
 80007d6:	e01c      	b.n	8000812 <__aeabi_l2f+0x2a>

080007d8 <__aeabi_ul2f>:
 80007d8:	ea50 0201 	orrs.w	r2, r0, r1
 80007dc:	bf08      	it	eq
 80007de:	4770      	bxeq	lr
 80007e0:	f04f 0300 	mov.w	r3, #0
 80007e4:	e00a      	b.n	80007fc <__aeabi_l2f+0x14>
 80007e6:	bf00      	nop

080007e8 <__aeabi_l2f>:
 80007e8:	ea50 0201 	orrs.w	r2, r0, r1
 80007ec:	bf08      	it	eq
 80007ee:	4770      	bxeq	lr
 80007f0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80007f4:	d502      	bpl.n	80007fc <__aeabi_l2f+0x14>
 80007f6:	4240      	negs	r0, r0
 80007f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007fc:	ea5f 0c01 	movs.w	ip, r1
 8000800:	bf02      	ittt	eq
 8000802:	4684      	moveq	ip, r0
 8000804:	4601      	moveq	r1, r0
 8000806:	2000      	moveq	r0, #0
 8000808:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800080c:	bf08      	it	eq
 800080e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000812:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000816:	fabc f28c 	clz	r2, ip
 800081a:	3a08      	subs	r2, #8
 800081c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000820:	db10      	blt.n	8000844 <__aeabi_l2f+0x5c>
 8000822:	fa01 fc02 	lsl.w	ip, r1, r2
 8000826:	4463      	add	r3, ip
 8000828:	fa00 fc02 	lsl.w	ip, r0, r2
 800082c:	f1c2 0220 	rsb	r2, r2, #32
 8000830:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000834:	fa20 f202 	lsr.w	r2, r0, r2
 8000838:	eb43 0002 	adc.w	r0, r3, r2
 800083c:	bf08      	it	eq
 800083e:	f020 0001 	biceq.w	r0, r0, #1
 8000842:	4770      	bx	lr
 8000844:	f102 0220 	add.w	r2, r2, #32
 8000848:	fa01 fc02 	lsl.w	ip, r1, r2
 800084c:	f1c2 0220 	rsb	r2, r2, #32
 8000850:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000854:	fa21 f202 	lsr.w	r2, r1, r2
 8000858:	eb43 0002 	adc.w	r0, r3, r2
 800085c:	bf08      	it	eq
 800085e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000862:	4770      	bx	lr

08000864 <__aeabi_fmul>:
 8000864:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000868:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800086c:	bf1e      	ittt	ne
 800086e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000872:	ea92 0f0c 	teqne	r2, ip
 8000876:	ea93 0f0c 	teqne	r3, ip
 800087a:	d06f      	beq.n	800095c <__aeabi_fmul+0xf8>
 800087c:	441a      	add	r2, r3
 800087e:	ea80 0c01 	eor.w	ip, r0, r1
 8000882:	0240      	lsls	r0, r0, #9
 8000884:	bf18      	it	ne
 8000886:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800088a:	d01e      	beq.n	80008ca <__aeabi_fmul+0x66>
 800088c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000890:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000894:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000898:	fba0 3101 	umull	r3, r1, r0, r1
 800089c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008a0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008a4:	bf3e      	ittt	cc
 80008a6:	0049      	lslcc	r1, r1, #1
 80008a8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008ac:	005b      	lslcc	r3, r3, #1
 80008ae:	ea40 0001 	orr.w	r0, r0, r1
 80008b2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008b6:	2afd      	cmp	r2, #253	; 0xfd
 80008b8:	d81d      	bhi.n	80008f6 <__aeabi_fmul+0x92>
 80008ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008be:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008c2:	bf08      	it	eq
 80008c4:	f020 0001 	biceq.w	r0, r0, #1
 80008c8:	4770      	bx	lr
 80008ca:	f090 0f00 	teq	r0, #0
 80008ce:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008d2:	bf08      	it	eq
 80008d4:	0249      	lsleq	r1, r1, #9
 80008d6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008da:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008de:	3a7f      	subs	r2, #127	; 0x7f
 80008e0:	bfc2      	ittt	gt
 80008e2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008e6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80008ea:	4770      	bxgt	lr
 80008ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008f0:	f04f 0300 	mov.w	r3, #0
 80008f4:	3a01      	subs	r2, #1
 80008f6:	dc5d      	bgt.n	80009b4 <__aeabi_fmul+0x150>
 80008f8:	f112 0f19 	cmn.w	r2, #25
 80008fc:	bfdc      	itt	le
 80008fe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000902:	4770      	bxle	lr
 8000904:	f1c2 0200 	rsb	r2, r2, #0
 8000908:	0041      	lsls	r1, r0, #1
 800090a:	fa21 f102 	lsr.w	r1, r1, r2
 800090e:	f1c2 0220 	rsb	r2, r2, #32
 8000912:	fa00 fc02 	lsl.w	ip, r0, r2
 8000916:	ea5f 0031 	movs.w	r0, r1, rrx
 800091a:	f140 0000 	adc.w	r0, r0, #0
 800091e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000922:	bf08      	it	eq
 8000924:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000928:	4770      	bx	lr
 800092a:	f092 0f00 	teq	r2, #0
 800092e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000932:	bf02      	ittt	eq
 8000934:	0040      	lsleq	r0, r0, #1
 8000936:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800093a:	3a01      	subeq	r2, #1
 800093c:	d0f9      	beq.n	8000932 <__aeabi_fmul+0xce>
 800093e:	ea40 000c 	orr.w	r0, r0, ip
 8000942:	f093 0f00 	teq	r3, #0
 8000946:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0049      	lsleq	r1, r1, #1
 800094e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000952:	3b01      	subeq	r3, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xe6>
 8000956:	ea41 010c 	orr.w	r1, r1, ip
 800095a:	e78f      	b.n	800087c <__aeabi_fmul+0x18>
 800095c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000960:	ea92 0f0c 	teq	r2, ip
 8000964:	bf18      	it	ne
 8000966:	ea93 0f0c 	teqne	r3, ip
 800096a:	d00a      	beq.n	8000982 <__aeabi_fmul+0x11e>
 800096c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000970:	bf18      	it	ne
 8000972:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000976:	d1d8      	bne.n	800092a <__aeabi_fmul+0xc6>
 8000978:	ea80 0001 	eor.w	r0, r0, r1
 800097c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000980:	4770      	bx	lr
 8000982:	f090 0f00 	teq	r0, #0
 8000986:	bf17      	itett	ne
 8000988:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800098c:	4608      	moveq	r0, r1
 800098e:	f091 0f00 	teqne	r1, #0
 8000992:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000996:	d014      	beq.n	80009c2 <__aeabi_fmul+0x15e>
 8000998:	ea92 0f0c 	teq	r2, ip
 800099c:	d101      	bne.n	80009a2 <__aeabi_fmul+0x13e>
 800099e:	0242      	lsls	r2, r0, #9
 80009a0:	d10f      	bne.n	80009c2 <__aeabi_fmul+0x15e>
 80009a2:	ea93 0f0c 	teq	r3, ip
 80009a6:	d103      	bne.n	80009b0 <__aeabi_fmul+0x14c>
 80009a8:	024b      	lsls	r3, r1, #9
 80009aa:	bf18      	it	ne
 80009ac:	4608      	movne	r0, r1
 80009ae:	d108      	bne.n	80009c2 <__aeabi_fmul+0x15e>
 80009b0:	ea80 0001 	eor.w	r0, r0, r1
 80009b4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009b8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009bc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009c0:	4770      	bx	lr
 80009c2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009c6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009ca:	4770      	bx	lr

080009cc <__aeabi_fdiv>:
 80009cc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009d0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009d4:	bf1e      	ittt	ne
 80009d6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009da:	ea92 0f0c 	teqne	r2, ip
 80009de:	ea93 0f0c 	teqne	r3, ip
 80009e2:	d069      	beq.n	8000ab8 <__aeabi_fdiv+0xec>
 80009e4:	eba2 0203 	sub.w	r2, r2, r3
 80009e8:	ea80 0c01 	eor.w	ip, r0, r1
 80009ec:	0249      	lsls	r1, r1, #9
 80009ee:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80009f2:	d037      	beq.n	8000a64 <__aeabi_fdiv+0x98>
 80009f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009f8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80009fc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a00:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a04:	428b      	cmp	r3, r1
 8000a06:	bf38      	it	cc
 8000a08:	005b      	lslcc	r3, r3, #1
 8000a0a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a0e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a12:	428b      	cmp	r3, r1
 8000a14:	bf24      	itt	cs
 8000a16:	1a5b      	subcs	r3, r3, r1
 8000a18:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a1c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a20:	bf24      	itt	cs
 8000a22:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a26:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a2a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a2e:	bf24      	itt	cs
 8000a30:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a38:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a3c:	bf24      	itt	cs
 8000a3e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a42:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a46:	011b      	lsls	r3, r3, #4
 8000a48:	bf18      	it	ne
 8000a4a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a4e:	d1e0      	bne.n	8000a12 <__aeabi_fdiv+0x46>
 8000a50:	2afd      	cmp	r2, #253	; 0xfd
 8000a52:	f63f af50 	bhi.w	80008f6 <__aeabi_fmul+0x92>
 8000a56:	428b      	cmp	r3, r1
 8000a58:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a5c:	bf08      	it	eq
 8000a5e:	f020 0001 	biceq.w	r0, r0, #1
 8000a62:	4770      	bx	lr
 8000a64:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a68:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a6c:	327f      	adds	r2, #127	; 0x7f
 8000a6e:	bfc2      	ittt	gt
 8000a70:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a74:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a78:	4770      	bxgt	lr
 8000a7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a7e:	f04f 0300 	mov.w	r3, #0
 8000a82:	3a01      	subs	r2, #1
 8000a84:	e737      	b.n	80008f6 <__aeabi_fmul+0x92>
 8000a86:	f092 0f00 	teq	r2, #0
 8000a8a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a8e:	bf02      	ittt	eq
 8000a90:	0040      	lsleq	r0, r0, #1
 8000a92:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a96:	3a01      	subeq	r2, #1
 8000a98:	d0f9      	beq.n	8000a8e <__aeabi_fdiv+0xc2>
 8000a9a:	ea40 000c 	orr.w	r0, r0, ip
 8000a9e:	f093 0f00 	teq	r3, #0
 8000aa2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0049      	lsleq	r1, r1, #1
 8000aaa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000aae:	3b01      	subeq	r3, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xda>
 8000ab2:	ea41 010c 	orr.w	r1, r1, ip
 8000ab6:	e795      	b.n	80009e4 <__aeabi_fdiv+0x18>
 8000ab8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000abc:	ea92 0f0c 	teq	r2, ip
 8000ac0:	d108      	bne.n	8000ad4 <__aeabi_fdiv+0x108>
 8000ac2:	0242      	lsls	r2, r0, #9
 8000ac4:	f47f af7d 	bne.w	80009c2 <__aeabi_fmul+0x15e>
 8000ac8:	ea93 0f0c 	teq	r3, ip
 8000acc:	f47f af70 	bne.w	80009b0 <__aeabi_fmul+0x14c>
 8000ad0:	4608      	mov	r0, r1
 8000ad2:	e776      	b.n	80009c2 <__aeabi_fmul+0x15e>
 8000ad4:	ea93 0f0c 	teq	r3, ip
 8000ad8:	d104      	bne.n	8000ae4 <__aeabi_fdiv+0x118>
 8000ada:	024b      	lsls	r3, r1, #9
 8000adc:	f43f af4c 	beq.w	8000978 <__aeabi_fmul+0x114>
 8000ae0:	4608      	mov	r0, r1
 8000ae2:	e76e      	b.n	80009c2 <__aeabi_fmul+0x15e>
 8000ae4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ae8:	bf18      	it	ne
 8000aea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000aee:	d1ca      	bne.n	8000a86 <__aeabi_fdiv+0xba>
 8000af0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000af4:	f47f af5c 	bne.w	80009b0 <__aeabi_fmul+0x14c>
 8000af8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000afc:	f47f af3c 	bne.w	8000978 <__aeabi_fmul+0x114>
 8000b00:	e75f      	b.n	80009c2 <__aeabi_fmul+0x15e>
 8000b02:	bf00      	nop

08000b04 <__gesf2>:
 8000b04:	f04f 3cff 	mov.w	ip, #4294967295
 8000b08:	e006      	b.n	8000b18 <__cmpsf2+0x4>
 8000b0a:	bf00      	nop

08000b0c <__lesf2>:
 8000b0c:	f04f 0c01 	mov.w	ip, #1
 8000b10:	e002      	b.n	8000b18 <__cmpsf2+0x4>
 8000b12:	bf00      	nop

08000b14 <__cmpsf2>:
 8000b14:	f04f 0c01 	mov.w	ip, #1
 8000b18:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b1c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b28:	bf18      	it	ne
 8000b2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b2e:	d011      	beq.n	8000b54 <__cmpsf2+0x40>
 8000b30:	b001      	add	sp, #4
 8000b32:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b36:	bf18      	it	ne
 8000b38:	ea90 0f01 	teqne	r0, r1
 8000b3c:	bf58      	it	pl
 8000b3e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b42:	bf88      	it	hi
 8000b44:	17c8      	asrhi	r0, r1, #31
 8000b46:	bf38      	it	cc
 8000b48:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b4c:	bf18      	it	ne
 8000b4e:	f040 0001 	orrne.w	r0, r0, #1
 8000b52:	4770      	bx	lr
 8000b54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b58:	d102      	bne.n	8000b60 <__cmpsf2+0x4c>
 8000b5a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b5e:	d105      	bne.n	8000b6c <__cmpsf2+0x58>
 8000b60:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b64:	d1e4      	bne.n	8000b30 <__cmpsf2+0x1c>
 8000b66:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b6a:	d0e1      	beq.n	8000b30 <__cmpsf2+0x1c>
 8000b6c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_cfrcmple>:
 8000b74:	4684      	mov	ip, r0
 8000b76:	4608      	mov	r0, r1
 8000b78:	4661      	mov	r1, ip
 8000b7a:	e7ff      	b.n	8000b7c <__aeabi_cfcmpeq>

08000b7c <__aeabi_cfcmpeq>:
 8000b7c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000b7e:	f7ff ffc9 	bl	8000b14 <__cmpsf2>
 8000b82:	2800      	cmp	r0, #0
 8000b84:	bf48      	it	mi
 8000b86:	f110 0f00 	cmnmi.w	r0, #0
 8000b8a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000b8c <__aeabi_fcmpeq>:
 8000b8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b90:	f7ff fff4 	bl	8000b7c <__aeabi_cfcmpeq>
 8000b94:	bf0c      	ite	eq
 8000b96:	2001      	moveq	r0, #1
 8000b98:	2000      	movne	r0, #0
 8000b9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_fcmplt>:
 8000ba0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba4:	f7ff ffea 	bl	8000b7c <__aeabi_cfcmpeq>
 8000ba8:	bf34      	ite	cc
 8000baa:	2001      	movcc	r0, #1
 8000bac:	2000      	movcs	r0, #0
 8000bae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_fcmple>:
 8000bb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb8:	f7ff ffe0 	bl	8000b7c <__aeabi_cfcmpeq>
 8000bbc:	bf94      	ite	ls
 8000bbe:	2001      	movls	r0, #1
 8000bc0:	2000      	movhi	r0, #0
 8000bc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_fcmpge>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff ffd2 	bl	8000b74 <__aeabi_cfrcmple>
 8000bd0:	bf94      	ite	ls
 8000bd2:	2001      	movls	r0, #1
 8000bd4:	2000      	movhi	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_fcmpgt>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffc8 	bl	8000b74 <__aeabi_cfrcmple>
 8000be4:	bf34      	ite	cc
 8000be6:	2001      	movcc	r0, #1
 8000be8:	2000      	movcs	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_f2iz>:
 8000bf0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000bf4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000bf8:	d30f      	bcc.n	8000c1a <__aeabi_f2iz+0x2a>
 8000bfa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000bfe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_f2iz+0x30>
 8000c04:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c0c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c10:	fa23 f002 	lsr.w	r0, r3, r2
 8000c14:	bf18      	it	ne
 8000c16:	4240      	negne	r0, r0
 8000c18:	4770      	bx	lr
 8000c1a:	f04f 0000 	mov.w	r0, #0
 8000c1e:	4770      	bx	lr
 8000c20:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c24:	d101      	bne.n	8000c2a <__aeabi_f2iz+0x3a>
 8000c26:	0242      	lsls	r2, r0, #9
 8000c28:	d105      	bne.n	8000c36 <__aeabi_f2iz+0x46>
 8000c2a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000c2e:	bf08      	it	eq
 8000c30:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c34:	4770      	bx	lr
 8000c36:	f04f 0000 	mov.w	r0, #0
 8000c3a:	4770      	bx	lr

08000c3c <__aeabi_uldivmod>:
 8000c3c:	b953      	cbnz	r3, 8000c54 <__aeabi_uldivmod+0x18>
 8000c3e:	b94a      	cbnz	r2, 8000c54 <__aeabi_uldivmod+0x18>
 8000c40:	2900      	cmp	r1, #0
 8000c42:	bf08      	it	eq
 8000c44:	2800      	cmpeq	r0, #0
 8000c46:	bf1c      	itt	ne
 8000c48:	f04f 31ff 	movne.w	r1, #4294967295
 8000c4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c50:	f000 b974 	b.w	8000f3c <__aeabi_idiv0>
 8000c54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c5c:	f000 f806 	bl	8000c6c <__udivmoddi4>
 8000c60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c68:	b004      	add	sp, #16
 8000c6a:	4770      	bx	lr

08000c6c <__udivmoddi4>:
 8000c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c70:	9e08      	ldr	r6, [sp, #32]
 8000c72:	460d      	mov	r5, r1
 8000c74:	4604      	mov	r4, r0
 8000c76:	4688      	mov	r8, r1
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d14d      	bne.n	8000d18 <__udivmoddi4+0xac>
 8000c7c:	428a      	cmp	r2, r1
 8000c7e:	4694      	mov	ip, r2
 8000c80:	d968      	bls.n	8000d54 <__udivmoddi4+0xe8>
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	b152      	cbz	r2, 8000c9e <__udivmoddi4+0x32>
 8000c88:	fa01 f302 	lsl.w	r3, r1, r2
 8000c8c:	f1c2 0120 	rsb	r1, r2, #32
 8000c90:	fa20 f101 	lsr.w	r1, r0, r1
 8000c94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c98:	ea41 0803 	orr.w	r8, r1, r3
 8000c9c:	4094      	lsls	r4, r2
 8000c9e:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000ca2:	0c21      	lsrs	r1, r4, #16
 8000ca4:	fbb8 fef5 	udiv	lr, r8, r5
 8000ca8:	fa1f f78c 	uxth.w	r7, ip
 8000cac:	fb05 831e 	mls	r3, r5, lr, r8
 8000cb0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cb4:	fb0e f107 	mul.w	r1, lr, r7
 8000cb8:	4299      	cmp	r1, r3
 8000cba:	d90b      	bls.n	8000cd4 <__udivmoddi4+0x68>
 8000cbc:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc0:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000cc4:	f080 811e 	bcs.w	8000f04 <__udivmoddi4+0x298>
 8000cc8:	4299      	cmp	r1, r3
 8000cca:	f240 811b 	bls.w	8000f04 <__udivmoddi4+0x298>
 8000cce:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cd2:	4463      	add	r3, ip
 8000cd4:	1a5b      	subs	r3, r3, r1
 8000cd6:	b2a4      	uxth	r4, r4
 8000cd8:	fbb3 f0f5 	udiv	r0, r3, r5
 8000cdc:	fb05 3310 	mls	r3, r5, r0, r3
 8000ce0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce4:	fb00 f707 	mul.w	r7, r0, r7
 8000ce8:	42a7      	cmp	r7, r4
 8000cea:	d90a      	bls.n	8000d02 <__udivmoddi4+0x96>
 8000cec:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf4:	f080 8108 	bcs.w	8000f08 <__udivmoddi4+0x29c>
 8000cf8:	42a7      	cmp	r7, r4
 8000cfa:	f240 8105 	bls.w	8000f08 <__udivmoddi4+0x29c>
 8000cfe:	4464      	add	r4, ip
 8000d00:	3802      	subs	r0, #2
 8000d02:	1be4      	subs	r4, r4, r7
 8000d04:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000d08:	2100      	movs	r1, #0
 8000d0a:	b11e      	cbz	r6, 8000d14 <__udivmoddi4+0xa8>
 8000d0c:	40d4      	lsrs	r4, r2
 8000d0e:	2300      	movs	r3, #0
 8000d10:	e9c6 4300 	strd	r4, r3, [r6]
 8000d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d18:	428b      	cmp	r3, r1
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0xc2>
 8000d1c:	2e00      	cmp	r6, #0
 8000d1e:	f000 80ee 	beq.w	8000efe <__udivmoddi4+0x292>
 8000d22:	2100      	movs	r1, #0
 8000d24:	e9c6 0500 	strd	r0, r5, [r6]
 8000d28:	4608      	mov	r0, r1
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d14a      	bne.n	8000dcc <__udivmoddi4+0x160>
 8000d36:	42ab      	cmp	r3, r5
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xd4>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 80f9 	bhi.w	8000f32 <__udivmoddi4+0x2c6>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb65 0303 	sbc.w	r3, r5, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4698      	mov	r8, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d0e2      	beq.n	8000d14 <__udivmoddi4+0xa8>
 8000d4e:	e9c6 4800 	strd	r4, r8, [r6]
 8000d52:	e7df      	b.n	8000d14 <__udivmoddi4+0xa8>
 8000d54:	b902      	cbnz	r2, 8000d58 <__udivmoddi4+0xec>
 8000d56:	deff      	udf	#255	; 0xff
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	2a00      	cmp	r2, #0
 8000d5e:	f040 8091 	bne.w	8000e84 <__udivmoddi4+0x218>
 8000d62:	eba1 050c 	sub.w	r5, r1, ip
 8000d66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6a:	fa1f fe8c 	uxth.w	lr, ip
 8000d6e:	2101      	movs	r1, #1
 8000d70:	fbb5 f3f7 	udiv	r3, r5, r7
 8000d74:	fb07 5013 	mls	r0, r7, r3, r5
 8000d78:	0c25      	lsrs	r5, r4, #16
 8000d7a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000d7e:	fb0e f003 	mul.w	r0, lr, r3
 8000d82:	42a8      	cmp	r0, r5
 8000d84:	d908      	bls.n	8000d98 <__udivmoddi4+0x12c>
 8000d86:	eb1c 0505 	adds.w	r5, ip, r5
 8000d8a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d8e:	d202      	bcs.n	8000d96 <__udivmoddi4+0x12a>
 8000d90:	42a8      	cmp	r0, r5
 8000d92:	f200 80cb 	bhi.w	8000f2c <__udivmoddi4+0x2c0>
 8000d96:	4643      	mov	r3, r8
 8000d98:	1a2d      	subs	r5, r5, r0
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb5 f0f7 	udiv	r0, r5, r7
 8000da0:	fb07 5510 	mls	r5, r7, r0, r5
 8000da4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da8:	fb0e fe00 	mul.w	lr, lr, r0
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x156>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 35ff 	add.w	r5, r0, #4294967295
 8000db8:	d202      	bcs.n	8000dc0 <__udivmoddi4+0x154>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f200 80bb 	bhi.w	8000f36 <__udivmoddi4+0x2ca>
 8000dc0:	4628      	mov	r0, r5
 8000dc2:	eba4 040e 	sub.w	r4, r4, lr
 8000dc6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dca:	e79e      	b.n	8000d0a <__udivmoddi4+0x9e>
 8000dcc:	f1c1 0720 	rsb	r7, r1, #32
 8000dd0:	408b      	lsls	r3, r1
 8000dd2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dd6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dda:	fa20 f407 	lsr.w	r4, r0, r7
 8000dde:	fa05 f301 	lsl.w	r3, r5, r1
 8000de2:	431c      	orrs	r4, r3
 8000de4:	40fd      	lsrs	r5, r7
 8000de6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dea:	fa00 f301 	lsl.w	r3, r0, r1
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	0c20      	lsrs	r0, r4, #16
 8000df4:	fa1f fe8c 	uxth.w	lr, ip
 8000df8:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfc:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000e00:	fb08 f00e 	mul.w	r0, r8, lr
 8000e04:	42a8      	cmp	r0, r5
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	d90b      	bls.n	8000e24 <__udivmoddi4+0x1b8>
 8000e0c:	eb1c 0505 	adds.w	r5, ip, r5
 8000e10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e14:	f080 8088 	bcs.w	8000f28 <__udivmoddi4+0x2bc>
 8000e18:	42a8      	cmp	r0, r5
 8000e1a:	f240 8085 	bls.w	8000f28 <__udivmoddi4+0x2bc>
 8000e1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e22:	4465      	add	r5, ip
 8000e24:	1a2d      	subs	r5, r5, r0
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb5 f0f9 	udiv	r0, r5, r9
 8000e2c:	fb09 5510 	mls	r5, r9, r0, r5
 8000e30:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e34:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e38:	45ae      	cmp	lr, r5
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x1e2>
 8000e3c:	eb1c 0505 	adds.w	r5, ip, r5
 8000e40:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e44:	d26c      	bcs.n	8000f20 <__udivmoddi4+0x2b4>
 8000e46:	45ae      	cmp	lr, r5
 8000e48:	d96a      	bls.n	8000f20 <__udivmoddi4+0x2b4>
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	4465      	add	r5, ip
 8000e4e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e52:	fba0 9402 	umull	r9, r4, r0, r2
 8000e56:	eba5 050e 	sub.w	r5, r5, lr
 8000e5a:	42a5      	cmp	r5, r4
 8000e5c:	46c8      	mov	r8, r9
 8000e5e:	46a6      	mov	lr, r4
 8000e60:	d356      	bcc.n	8000f10 <__udivmoddi4+0x2a4>
 8000e62:	d053      	beq.n	8000f0c <__udivmoddi4+0x2a0>
 8000e64:	b15e      	cbz	r6, 8000e7e <__udivmoddi4+0x212>
 8000e66:	ebb3 0208 	subs.w	r2, r3, r8
 8000e6a:	eb65 050e 	sbc.w	r5, r5, lr
 8000e6e:	fa05 f707 	lsl.w	r7, r5, r7
 8000e72:	fa22 f301 	lsr.w	r3, r2, r1
 8000e76:	40cd      	lsrs	r5, r1
 8000e78:	431f      	orrs	r7, r3
 8000e7a:	e9c6 7500 	strd	r7, r5, [r6]
 8000e7e:	2100      	movs	r1, #0
 8000e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e84:	f1c2 0320 	rsb	r3, r2, #32
 8000e88:	fa20 f103 	lsr.w	r1, r0, r3
 8000e8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e90:	fa25 f303 	lsr.w	r3, r5, r3
 8000e94:	4095      	lsls	r5, r2
 8000e96:	430d      	orrs	r5, r1
 8000e98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e9c:	fa1f fe8c 	uxth.w	lr, ip
 8000ea0:	fbb3 f1f7 	udiv	r1, r3, r7
 8000ea4:	fb07 3011 	mls	r0, r7, r1, r3
 8000ea8:	0c2b      	lsrs	r3, r5, #16
 8000eaa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000eae:	fb01 f00e 	mul.w	r0, r1, lr
 8000eb2:	4298      	cmp	r0, r3
 8000eb4:	fa04 f402 	lsl.w	r4, r4, r2
 8000eb8:	d908      	bls.n	8000ecc <__udivmoddi4+0x260>
 8000eba:	eb1c 0303 	adds.w	r3, ip, r3
 8000ebe:	f101 38ff 	add.w	r8, r1, #4294967295
 8000ec2:	d22f      	bcs.n	8000f24 <__udivmoddi4+0x2b8>
 8000ec4:	4298      	cmp	r0, r3
 8000ec6:	d92d      	bls.n	8000f24 <__udivmoddi4+0x2b8>
 8000ec8:	3902      	subs	r1, #2
 8000eca:	4463      	add	r3, ip
 8000ecc:	1a1b      	subs	r3, r3, r0
 8000ece:	b2ad      	uxth	r5, r5
 8000ed0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ed4:	fb07 3310 	mls	r3, r7, r0, r3
 8000ed8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000edc:	fb00 f30e 	mul.w	r3, r0, lr
 8000ee0:	42ab      	cmp	r3, r5
 8000ee2:	d908      	bls.n	8000ef6 <__udivmoddi4+0x28a>
 8000ee4:	eb1c 0505 	adds.w	r5, ip, r5
 8000ee8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eec:	d216      	bcs.n	8000f1c <__udivmoddi4+0x2b0>
 8000eee:	42ab      	cmp	r3, r5
 8000ef0:	d914      	bls.n	8000f1c <__udivmoddi4+0x2b0>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4465      	add	r5, ip
 8000ef6:	1aed      	subs	r5, r5, r3
 8000ef8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000efc:	e738      	b.n	8000d70 <__udivmoddi4+0x104>
 8000efe:	4631      	mov	r1, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e707      	b.n	8000d14 <__udivmoddi4+0xa8>
 8000f04:	4686      	mov	lr, r0
 8000f06:	e6e5      	b.n	8000cd4 <__udivmoddi4+0x68>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fa      	b.n	8000d02 <__udivmoddi4+0x96>
 8000f0c:	454b      	cmp	r3, r9
 8000f0e:	d2a9      	bcs.n	8000e64 <__udivmoddi4+0x1f8>
 8000f10:	ebb9 0802 	subs.w	r8, r9, r2
 8000f14:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f18:	3801      	subs	r0, #1
 8000f1a:	e7a3      	b.n	8000e64 <__udivmoddi4+0x1f8>
 8000f1c:	4640      	mov	r0, r8
 8000f1e:	e7ea      	b.n	8000ef6 <__udivmoddi4+0x28a>
 8000f20:	4620      	mov	r0, r4
 8000f22:	e794      	b.n	8000e4e <__udivmoddi4+0x1e2>
 8000f24:	4641      	mov	r1, r8
 8000f26:	e7d1      	b.n	8000ecc <__udivmoddi4+0x260>
 8000f28:	46d0      	mov	r8, sl
 8000f2a:	e77b      	b.n	8000e24 <__udivmoddi4+0x1b8>
 8000f2c:	3b02      	subs	r3, #2
 8000f2e:	4465      	add	r5, ip
 8000f30:	e732      	b.n	8000d98 <__udivmoddi4+0x12c>
 8000f32:	4608      	mov	r0, r1
 8000f34:	e709      	b.n	8000d4a <__udivmoddi4+0xde>
 8000f36:	4464      	add	r4, ip
 8000f38:	3802      	subs	r0, #2
 8000f3a:	e742      	b.n	8000dc2 <__udivmoddi4+0x156>

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	2b2f      	cmp	r3, #47	; 0x2f
 8000f4e:	d906      	bls.n	8000f5e <Hex2Num+0x1e>
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	2b39      	cmp	r3, #57	; 0x39
 8000f54:	d803      	bhi.n	8000f5e <Hex2Num+0x1e>
        return a - '0';
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	3b30      	subs	r3, #48	; 0x30
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	e014      	b.n	8000f88 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	2b60      	cmp	r3, #96	; 0x60
 8000f62:	d906      	bls.n	8000f72 <Hex2Num+0x32>
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	2b66      	cmp	r3, #102	; 0x66
 8000f68:	d803      	bhi.n	8000f72 <Hex2Num+0x32>
        return (a - 'a') + 10;
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	3b57      	subs	r3, #87	; 0x57
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	e00a      	b.n	8000f88 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	2b40      	cmp	r3, #64	; 0x40
 8000f76:	d906      	bls.n	8000f86 <Hex2Num+0x46>
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	2b46      	cmp	r3, #70	; 0x46
 8000f7c:	d803      	bhi.n	8000f86 <Hex2Num+0x46>
        return (a - 'A') + 10;
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	3b37      	subs	r3, #55	; 0x37
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	e000      	b.n	8000f88 <Hex2Num+0x48>
    }

    return 0;
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr

08000f92 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b084      	sub	sp, #16
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8000fa4:	e012      	b.n	8000fcc <ParseHexNumber+0x3a>
        sum <<= 4;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	011b      	lsls	r3, r3, #4
 8000faa:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ffc5 	bl	8000f40 <Hex2Num>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	461a      	mov	r2, r3
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	60fb      	str	r3, [r7, #12]
        ptr++;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	607b      	str	r3, [r7, #4]
        i++;
 8000fc6:	7afb      	ldrb	r3, [r7, #11]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b2f      	cmp	r3, #47	; 0x2f
 8000fd2:	d903      	bls.n	8000fdc <ParseHexNumber+0x4a>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b39      	cmp	r3, #57	; 0x39
 8000fda:	d9e4      	bls.n	8000fa6 <ParseHexNumber+0x14>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b60      	cmp	r3, #96	; 0x60
 8000fe2:	d903      	bls.n	8000fec <ParseHexNumber+0x5a>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b66      	cmp	r3, #102	; 0x66
 8000fea:	d9dc      	bls.n	8000fa6 <ParseHexNumber+0x14>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b40      	cmp	r3, #64	; 0x40
 8000ff2:	d903      	bls.n	8000ffc <ParseHexNumber+0x6a>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b46      	cmp	r3, #70	; 0x46
 8000ffa:	d9d4      	bls.n	8000fa6 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d002      	beq.n	8001008 <ParseHexNumber+0x76>
        *cnt = i;
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	7afa      	ldrb	r2, [r7, #11]
 8001006:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 8001008:	68fb      	ldr	r3, [r7, #12]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8001012:	b480      	push	{r7}
 8001014:	b085      	sub	sp, #20
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
 800101a:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	73fb      	strb	r3, [r7, #15]
 8001020:	2300      	movs	r3, #0
 8001022:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b2d      	cmp	r3, #45	; 0x2d
 800102e:	d119      	bne.n	8001064 <ParseNumber+0x52>
        minus = 1;
 8001030:	2301      	movs	r3, #1
 8001032:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3301      	adds	r3, #1
 8001038:	607b      	str	r3, [r7, #4]
        i++;
 800103a:	7bbb      	ldrb	r3, [r7, #14]
 800103c:	3301      	adds	r3, #1
 800103e:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8001040:	e010      	b.n	8001064 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	4613      	mov	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4413      	add	r3, r2
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	461a      	mov	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	3b30      	subs	r3, #48	; 0x30
 8001054:	4413      	add	r3, r2
 8001056:	60bb      	str	r3, [r7, #8]
        ptr++;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3301      	adds	r3, #1
 800105c:	607b      	str	r3, [r7, #4]
        i++;
 800105e:	7bbb      	ldrb	r3, [r7, #14]
 8001060:	3301      	adds	r3, #1
 8001062:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b2f      	cmp	r3, #47	; 0x2f
 800106a:	d903      	bls.n	8001074 <ParseNumber+0x62>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b39      	cmp	r3, #57	; 0x39
 8001072:	d9e6      	bls.n	8001042 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d002      	beq.n	8001080 <ParseNumber+0x6e>
        *cnt = i;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	7bba      	ldrb	r2, [r7, #14]
 800107e:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d002      	beq.n	800108c <ParseNumber+0x7a>
        return 0 - sum;
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	425b      	negs	r3, r3
 800108a:	e000      	b.n	800108e <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 800108c:	68bb      	ldr	r3, [r7, #8]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr

08001098 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 80010a2:	2300      	movs	r3, #0
 80010a4:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 80010a6:	e019      	b.n	80010dc <ParseMAC+0x44>
    hexcnt = 1;
 80010a8:	2301      	movs	r3, #1
 80010aa:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b3a      	cmp	r3, #58	; 0x3a
 80010b2:	d00e      	beq.n	80010d2 <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 80010b4:	f107 030e 	add.w	r3, r7, #14
 80010b8:	4619      	mov	r1, r3
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ff69 	bl	8000f92 <ParseHexNumber>
 80010c0:	4601      	mov	r1, r0
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	1c5a      	adds	r2, r3, #1
 80010c6:	73fa      	strb	r2, [r7, #15]
 80010c8:	461a      	mov	r2, r3
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	4413      	add	r3, r2
 80010ce:	b2ca      	uxtb	r2, r1
 80010d0:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 80010d2:	7bbb      	ldrb	r3, [r7, #14]
 80010d4:	461a      	mov	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1e1      	bne.n	80010a8 <ParseMAC+0x10>
  }
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b084      	sub	sp, #16
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
 80010f6:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 80010f8:	2300      	movs	r3, #0
 80010fa:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 80010fc:	e019      	b.n	8001132 <ParseIP+0x44>
    hexcnt = 1;
 80010fe:	2301      	movs	r3, #1
 8001100:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b2e      	cmp	r3, #46	; 0x2e
 8001108:	d00e      	beq.n	8001128 <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 800110a:	f107 030e 	add.w	r3, r7, #14
 800110e:	4619      	mov	r1, r3
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ff7e 	bl	8001012 <ParseNumber>
 8001116:	4601      	mov	r1, r0
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	1c5a      	adds	r2, r3, #1
 800111c:	73fa      	strb	r2, [r7, #15]
 800111e:	461a      	mov	r2, r3
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	4413      	add	r3, r2
 8001124:	b2ca      	uxtb	r2, r1
 8001126:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8001128:	7bbb      	ldrb	r3, [r7, #14]
 800112a:	461a      	mov	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4413      	add	r3, r2
 8001130:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1e1      	bne.n	80010fe <ParseIP+0x10>
  }
}
 800113a:	bf00      	nop
 800113c:	bf00      	nop
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	3302      	adds	r3, #2
 8001156:	4934      	ldr	r1, [pc, #208]	; (8001228 <AT_ParseInfo+0xe4>)
 8001158:	4618      	mov	r0, r3
 800115a:	f007 fa71 	bl	8008640 <strtok>
 800115e:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8001160:	e05a      	b.n	8001218 <AT_ParseInfo+0xd4>
    switch (num++) {
 8001162:	7afb      	ldrb	r3, [r7, #11]
 8001164:	1c5a      	adds	r2, r3, #1
 8001166:	72fa      	strb	r2, [r7, #11]
 8001168:	2b06      	cmp	r3, #6
 800116a:	d84f      	bhi.n	800120c <AT_ParseInfo+0xc8>
 800116c:	a201      	add	r2, pc, #4	; (adr r2, 8001174 <AT_ParseInfo+0x30>)
 800116e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001172:	bf00      	nop
 8001174:	08001191 	.word	0x08001191
 8001178:	0800119f 	.word	0x0800119f
 800117c:	080011af 	.word	0x080011af
 8001180:	080011bf 	.word	0x080011bf
 8001184:	080011cf 	.word	0x080011cf
 8001188:	080011df 	.word	0x080011df
 800118c:	080011f3 	.word	0x080011f3
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2220      	movs	r2, #32
 8001194:	68f9      	ldr	r1, [r7, #12]
 8001196:	4618      	mov	r0, r3
 8001198:	f007 fa28 	bl	80085ec <strncpy>
      break;
 800119c:	e037      	b.n	800120e <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	3320      	adds	r3, #32
 80011a2:	2218      	movs	r2, #24
 80011a4:	68f9      	ldr	r1, [r7, #12]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f007 fa20 	bl	80085ec <strncpy>
      break;
 80011ac:	e02f      	b.n	800120e <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3338      	adds	r3, #56	; 0x38
 80011b2:	2210      	movs	r2, #16
 80011b4:	68f9      	ldr	r1, [r7, #12]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f007 fa18 	bl	80085ec <strncpy>
      break;
 80011bc:	e027      	b.n	800120e <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	3348      	adds	r3, #72	; 0x48
 80011c2:	2210      	movs	r2, #16
 80011c4:	68f9      	ldr	r1, [r7, #12]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f007 fa10 	bl	80085ec <strncpy>
      break;
 80011cc:	e01f      	b.n	800120e <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3358      	adds	r3, #88	; 0x58
 80011d2:	2210      	movs	r2, #16
 80011d4:	68f9      	ldr	r1, [r7, #12]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f007 fa08 	bl	80085ec <strncpy>
      break;
 80011dc:	e017      	b.n	800120e <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 80011de:	2100      	movs	r1, #0
 80011e0:	68f8      	ldr	r0, [r7, #12]
 80011e2:	f7ff ff16 	bl	8001012 <ParseNumber>
 80011e6:	4603      	mov	r3, r0
 80011e8:	461a      	mov	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 80011f0:	e00d      	b.n	800120e <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 80011f2:	490e      	ldr	r1, [pc, #56]	; (800122c <AT_ParseInfo+0xe8>)
 80011f4:	68f8      	ldr	r0, [r7, #12]
 80011f6:	f007 fa23 	bl	8008640 <strtok>
 80011fa:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3368      	adds	r3, #104	; 0x68
 8001200:	2220      	movs	r2, #32
 8001202:	68f9      	ldr	r1, [r7, #12]
 8001204:	4618      	mov	r0, r3
 8001206:	f007 f9f1 	bl	80085ec <strncpy>
      break;
 800120a:	e000      	b.n	800120e <AT_ParseInfo+0xca>

    default: break;
 800120c:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 800120e:	4906      	ldr	r1, [pc, #24]	; (8001228 <AT_ParseInfo+0xe4>)
 8001210:	2000      	movs	r0, #0
 8001212:	f007 fa15 	bl	8008640 <strtok>
 8001216:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1a1      	bne.n	8001162 <AT_ParseInfo+0x1e>
  }
}
 800121e:	bf00      	nop
 8001220:	bf00      	nop
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	08009ae0 	.word	0x08009ae0
 800122c:	08009ae4 	.word	0x08009ae4

08001230 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3302      	adds	r3, #2
 8001242:	4952      	ldr	r1, [pc, #328]	; (800138c <AT_ParseConnSettings+0x15c>)
 8001244:	4618      	mov	r0, r3
 8001246:	f007 f9fb 	bl	8008640 <strtok>
 800124a:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 800124c:	e095      	b.n	800137a <AT_ParseConnSettings+0x14a>
    switch (num++) {
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	1c5a      	adds	r2, r3, #1
 8001252:	73fa      	strb	r2, [r7, #15]
 8001254:	2b0b      	cmp	r3, #11
 8001256:	d87f      	bhi.n	8001358 <AT_ParseConnSettings+0x128>
 8001258:	a201      	add	r2, pc, #4	; (adr r2, 8001260 <AT_ParseConnSettings+0x30>)
 800125a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800125e:	bf00      	nop
 8001260:	08001291 	.word	0x08001291
 8001264:	0800129f 	.word	0x0800129f
 8001268:	080012af 	.word	0x080012af
 800126c:	080012c3 	.word	0x080012c3
 8001270:	080012d7 	.word	0x080012d7
 8001274:	080012eb 	.word	0x080012eb
 8001278:	080012f9 	.word	0x080012f9
 800127c:	08001307 	.word	0x08001307
 8001280:	08001315 	.word	0x08001315
 8001284:	08001323 	.word	0x08001323
 8001288:	08001331 	.word	0x08001331
 800128c:	08001345 	.word	0x08001345
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	2221      	movs	r2, #33	; 0x21
 8001294:	68b9      	ldr	r1, [r7, #8]
 8001296:	4618      	mov	r0, r3
 8001298:	f007 f9a8 	bl	80085ec <strncpy>
      break;
 800129c:	e05d      	b.n	800135a <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	3321      	adds	r3, #33	; 0x21
 80012a2:	2221      	movs	r2, #33	; 0x21
 80012a4:	68b9      	ldr	r1, [r7, #8]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f007 f9a0 	bl	80085ec <strncpy>
      break;
 80012ac:	e055      	b.n	800135a <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 80012ae:	2100      	movs	r1, #0
 80012b0:	68b8      	ldr	r0, [r7, #8]
 80012b2:	f7ff feae 	bl	8001012 <ParseNumber>
 80012b6:	4603      	mov	r3, r0
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 80012c0:	e04b      	b.n	800135a <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 80012c2:	2100      	movs	r1, #0
 80012c4:	68b8      	ldr	r0, [r7, #8]
 80012c6:	f7ff fea4 	bl	8001012 <ParseNumber>
 80012ca:	4603      	mov	r3, r0
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 80012d4:	e041      	b.n	800135a <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 80012d6:	2100      	movs	r1, #0
 80012d8:	68b8      	ldr	r0, [r7, #8]
 80012da:	f7ff fe9a 	bl	8001012 <ParseNumber>
 80012de:	4603      	mov	r3, r0
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 80012e8:	e037      	b.n	800135a <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	3348      	adds	r3, #72	; 0x48
 80012ee:	4619      	mov	r1, r3
 80012f0:	68b8      	ldr	r0, [r7, #8]
 80012f2:	f7ff fefc 	bl	80010ee <ParseIP>
      break;
 80012f6:	e030      	b.n	800135a <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	334c      	adds	r3, #76	; 0x4c
 80012fc:	4619      	mov	r1, r3
 80012fe:	68b8      	ldr	r0, [r7, #8]
 8001300:	f7ff fef5 	bl	80010ee <ParseIP>
      break;
 8001304:	e029      	b.n	800135a <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	3350      	adds	r3, #80	; 0x50
 800130a:	4619      	mov	r1, r3
 800130c:	68b8      	ldr	r0, [r7, #8]
 800130e:	f7ff feee 	bl	80010ee <ParseIP>
      break;
 8001312:	e022      	b.n	800135a <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	3354      	adds	r3, #84	; 0x54
 8001318:	4619      	mov	r1, r3
 800131a:	68b8      	ldr	r0, [r7, #8]
 800131c:	f7ff fee7 	bl	80010ee <ParseIP>
      break;
 8001320:	e01b      	b.n	800135a <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	3358      	adds	r3, #88	; 0x58
 8001326:	4619      	mov	r1, r3
 8001328:	68b8      	ldr	r0, [r7, #8]
 800132a:	f7ff fee0 	bl	80010ee <ParseIP>
      break;
 800132e:	e014      	b.n	800135a <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8001330:	2100      	movs	r1, #0
 8001332:	68b8      	ldr	r0, [r7, #8]
 8001334:	f7ff fe6d 	bl	8001012 <ParseNumber>
 8001338:	4603      	mov	r3, r0
 800133a:	b2da      	uxtb	r2, r3
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 8001342:	e00a      	b.n	800135a <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8001344:	2100      	movs	r1, #0
 8001346:	68b8      	ldr	r0, [r7, #8]
 8001348:	f7ff fe63 	bl	8001012 <ParseNumber>
 800134c:	4603      	mov	r3, r0
 800134e:	b2da      	uxtb	r2, r3
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 8001356:	e000      	b.n	800135a <AT_ParseConnSettings+0x12a>

    default:
      break;
 8001358:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 800135a:	490c      	ldr	r1, [pc, #48]	; (800138c <AT_ParseConnSettings+0x15c>)
 800135c:	2000      	movs	r0, #0
 800135e:	f007 f96f 	bl	8008640 <strtok>
 8001362:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d007      	beq.n	800137a <AT_ParseConnSettings+0x14a>
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	3b01      	subs	r3, #1
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b2c      	cmp	r3, #44	; 0x2c
 8001372:	d102      	bne.n	800137a <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	3301      	adds	r3, #1
 8001378:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	2b00      	cmp	r3, #0
 800137e:	f47f af66 	bne.w	800124e <AT_ParseConnSettings+0x1e>
    }
  }
}
 8001382:	bf00      	nop
 8001384:	bf00      	nop
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	08009ae0 	.word	0x08009ae0

08001390 <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	3302      	adds	r3, #2
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b31      	cmp	r3, #49	; 0x31
 80013a2:	bf0c      	ite	eq
 80013a4:	2301      	moveq	r3, #1
 80013a6:	2300      	movne	r3, #0
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	461a      	mov	r2, r3
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	701a      	strb	r2, [r3, #0]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr
	...

080013bc <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 80013bc:	b590      	push	{r4, r7, lr}
 80013be:	b087      	sub	sp, #28
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  int ret = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	82fb      	strh	r3, [r7, #22]
  LOCK_WIFI();

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 80013d6:	68b8      	ldr	r0, [r7, #8]
 80013d8:	f7fe fefa 	bl	80001d0 <strlen>
 80013dc:	4603      	mov	r3, r0
 80013de:	b299      	uxth	r1, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80013e6:	461a      	mov	r2, r3
 80013e8:	68b8      	ldr	r0, [r7, #8]
 80013ea:	47a0      	blx	r4
 80013ec:	4603      	mov	r3, r0
 80013ee:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	dd3e      	ble.n	8001474 <AT_ExecuteCommand+0xb8>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001402:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	4798      	blx	r3
 800140a:	4603      	mov	r3, r0
 800140c:	82fb      	strh	r3, [r7, #22]
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 800140e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001412:	2b00      	cmp	r3, #0
 8001414:	dd27      	ble.n	8001466 <AT_ExecuteCommand+0xaa>
 8001416:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800141a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800141e:	dc22      	bgt.n	8001466 <AT_ExecuteCommand+0xaa>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8001420:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001424:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001428:	d105      	bne.n	8001436 <AT_ExecuteCommand+0x7a>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 800142a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800142e:	b29b      	uxth	r3, r3
 8001430:	3b01      	subs	r3, #1
 8001432:	b29b      	uxth	r3, r3
 8001434:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 8001436:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	4413      	add	r3, r2
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 8001442:	490f      	ldr	r1, [pc, #60]	; (8001480 <AT_ExecuteCommand+0xc4>)
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f007 f8e4 	bl	8008612 <strstr>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <AT_ExecuteCommand+0x98>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8001450:	2300      	movs	r3, #0
 8001452:	e010      	b.n	8001476 <AT_ExecuteCommand+0xba>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8001454:	490b      	ldr	r1, [pc, #44]	; (8001484 <AT_ExecuteCommand+0xc8>)
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f007 f8db 	bl	8008612 <strstr>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <AT_ExecuteCommand+0xaa>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001462:	2305      	movs	r3, #5
 8001464:	e007      	b.n	8001476 <AT_ExecuteCommand+0xba>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8001466:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800146a:	f113 0f04 	cmn.w	r3, #4
 800146e:	d101      	bne.n	8001474 <AT_ExecuteCommand+0xb8>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8001470:	2306      	movs	r3, #6
 8001472:	e000      	b.n	8001476 <AT_ExecuteCommand+0xba>
    }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8001474:	2304      	movs	r3, #4
}
 8001476:	4618      	mov	r0, r3
 8001478:	371c      	adds	r7, #28
 800147a:	46bd      	mov	sp, r7
 800147c:	bd90      	pop	{r4, r7, pc}
 800147e:	bf00      	nop
 8001480:	08009af4 	.word	0x08009af4
 8001484:	08009b00 	.word	0x08009b00

08001488 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
 8001494:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  LOCK_WIFI();
  cmd_len = strlen((char*)cmd);
 80014a2:	68b8      	ldr	r0, [r7, #8]
 80014a4:	f7fe fe94 	bl	80001d0 <strlen>
 80014a8:	4603      	mov	r3, r0
 80014aa:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 80014ac:	8a7b      	ldrh	r3, [r7, #18]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <AT_RequestSendData+0x32>
 80014b6:	2302      	movs	r3, #2
 80014b8:	e053      	b.n	8001562 <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 80014c6:	8a79      	ldrh	r1, [r7, #18]
 80014c8:	68b8      	ldr	r0, [r7, #8]
 80014ca:	4798      	blx	r3
 80014cc:	4603      	mov	r3, r0
 80014ce:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 80014d0:	8a3a      	ldrh	r2, [r7, #16]
 80014d2:	8a7b      	ldrh	r3, [r7, #18]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d143      	bne.n	8001560 <AT_RequestSendData+0xd8>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 80014e4:	8879      	ldrh	r1, [r7, #2]
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	4798      	blx	r3
 80014ea:	4603      	mov	r3, r0
 80014ec:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 80014ee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80014f2:	887b      	ldrh	r3, [r7, #2]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d131      	bne.n	800155c <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001504:	2100      	movs	r1, #0
 8001506:	6a38      	ldr	r0, [r7, #32]
 8001508:	4798      	blx	r3
 800150a:	4603      	mov	r3, r0
 800150c:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 800150e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001512:	2b00      	cmp	r3, #0
 8001514:	dd19      	ble.n	800154a <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 8001516:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800151a:	6a3a      	ldr	r2, [r7, #32]
 800151c:	4413      	add	r3, r2
 800151e:	2200      	movs	r2, #0
 8001520:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8001522:	4912      	ldr	r1, [pc, #72]	; (800156c <AT_RequestSendData+0xe4>)
 8001524:	6a38      	ldr	r0, [r7, #32]
 8001526:	f007 f874 	bl	8008612 <strstr>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <AT_RequestSendData+0xac>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8001530:	2300      	movs	r3, #0
 8001532:	e016      	b.n	8001562 <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8001534:	490e      	ldr	r1, [pc, #56]	; (8001570 <AT_RequestSendData+0xe8>)
 8001536:	6a38      	ldr	r0, [r7, #32]
 8001538:	f007 f86b 	bl	8008612 <strstr>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <AT_RequestSendData+0xbe>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001542:	2305      	movs	r3, #5
 8001544:	e00d      	b.n	8001562 <AT_RequestSendData+0xda>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 8001546:	2302      	movs	r3, #2
 8001548:	e00b      	b.n	8001562 <AT_RequestSendData+0xda>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 800154a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800154e:	f113 0f04 	cmn.w	r3, #4
 8001552:	d101      	bne.n	8001558 <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 8001554:	2306      	movs	r3, #6
 8001556:	e004      	b.n	8001562 <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 8001558:	2302      	movs	r3, #2
 800155a:	e002      	b.n	8001562 <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 800155c:	2302      	movs	r3, #2
 800155e:	e000      	b.n	8001562 <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8001560:	2304      	movs	r3, #4
}
 8001562:	4618      	mov	r0, r3
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	08009af4 	.word	0x08009af4
 8001570:	08009b00 	.word	0x08009b00

08001574 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800157c:	2302      	movs	r3, #2
 800157e:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f247 5230 	movw	r2, #30000	; 0x7530
 8001586:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001590:	2000      	movs	r0, #0
 8001592:	4798      	blx	r3
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d113      	bne.n	80015c2 <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015a0:	461a      	mov	r2, r3
 80015a2:	490a      	ldr	r1, [pc, #40]	; (80015cc <ES_WIFI_Init+0x58>)
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff ff09 	bl	80013bc <AT_ExecuteCommand>
 80015aa:	4603      	mov	r3, r0
 80015ac:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d106      	bne.n	80015c2 <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015ba:	4619      	mov	r1, r3
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff fdc1 	bl	8001144 <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
  return ret;
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	08009b10 	.word	0x08009b10

080015d0 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d00b      	beq.n	80015fc <ES_WIFI_RegisterBusIO+0x2c>
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d008      	beq.n	80015fc <ES_WIFI_RegisterBusIO+0x2c>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <ES_WIFI_RegisterBusIO+0x2c>
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d002      	beq.n	80015fc <ES_WIFI_RegisterBusIO+0x2c>
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 80015fc:	2302      	movs	r3, #2
 80015fe:	e014      	b.n	800162a <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	68ba      	ldr	r2, [r7, #8]
 8001604:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	69fa      	ldr	r2, [r7, #28]
 800161c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr

08001634 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
 8001640:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001648:	68ba      	ldr	r2, [r7, #8]
 800164a:	4932      	ldr	r1, [pc, #200]	; (8001714 <ES_WIFI_Connect+0xe0>)
 800164c:	4618      	mov	r0, r3
 800164e:	f006 ffad 	bl	80085ac <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800165e:	461a      	mov	r2, r3
 8001660:	68f8      	ldr	r0, [r7, #12]
 8001662:	f7ff feab 	bl	80013bc <AT_ExecuteCommand>
 8001666:	4603      	mov	r3, r0
 8001668:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 800166a:	7dfb      	ldrb	r3, [r7, #23]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d14b      	bne.n	8001708 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	4927      	ldr	r1, [pc, #156]	; (8001718 <ES_WIFI_Connect+0xe4>)
 800167a:	4618      	mov	r0, r3
 800167c:	f006 ff96 	bl	80085ac <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800168c:	461a      	mov	r2, r3
 800168e:	68f8      	ldr	r0, [r7, #12]
 8001690:	f7ff fe94 	bl	80013bc <AT_ExecuteCommand>
 8001694:	4603      	mov	r3, r0
 8001696:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8001698:	7dfb      	ldrb	r3, [r7, #23]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d134      	bne.n	8001708 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	78fa      	ldrb	r2, [r7, #3]
 80016a2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016ac:	78fa      	ldrb	r2, [r7, #3]
 80016ae:	491b      	ldr	r1, [pc, #108]	; (800171c <ES_WIFI_Connect+0xe8>)
 80016b0:	4618      	mov	r0, r3
 80016b2:	f006 ff7b 	bl	80085ac <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016c2:	461a      	mov	r2, r3
 80016c4:	68f8      	ldr	r0, [r7, #12]
 80016c6:	f7ff fe79 	bl	80013bc <AT_ExecuteCommand>
 80016ca:	4603      	mov	r3, r0
 80016cc:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 80016ce:	7dfb      	ldrb	r3, [r7, #23]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d119      	bne.n	8001708 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016da:	4911      	ldr	r1, [pc, #68]	; (8001720 <ES_WIFI_Connect+0xec>)
 80016dc:	4618      	mov	r0, r3
 80016de:	f006 ff65 	bl	80085ac <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016ee:	461a      	mov	r2, r3
 80016f0:	68f8      	ldr	r0, [r7, #12]
 80016f2:	f7ff fe63 	bl	80013bc <AT_ExecuteCommand>
 80016f6:	4603      	mov	r3, r0
 80016f8:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 80016fa:	7dfb      	ldrb	r3, [r7, #23]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d103      	bne.n	8001708 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 8001708:	7dfb      	ldrb	r3, [r7, #23]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	08009b28 	.word	0x08009b28
 8001718:	08009b30 	.word	0x08009b30
 800171c:	08009b38 	.word	0x08009b38
 8001720:	08009b40 	.word	0x08009b40

08001724 <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001732:	4911      	ldr	r1, [pc, #68]	; (8001778 <ES_WIFI_IsConnected+0x54>)
 8001734:	4618      	mov	r0, r3
 8001736:	f006 ff39 	bl	80085ac <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001746:	461a      	mov	r2, r3
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff fe37 	bl	80013bc <AT_ExecuteCommand>
 800174e:	4603      	mov	r3, r0
 8001750:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8001752:	7bfb      	ldrb	r3, [r7, #15]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d108      	bne.n	800176a <ES_WIFI_IsConnected+0x46>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f503 7294 	add.w	r2, r3, #296	; 0x128
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	33d2      	adds	r3, #210	; 0xd2
 8001762:	4619      	mov	r1, r3
 8001764:	4610      	mov	r0, r2
 8001766:	f7ff fe13 	bl	8001390 <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 8001770:	4618      	mov	r0, r3
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	08009b44 	.word	0x08009b44

0800177c <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800178a:	4910      	ldr	r1, [pc, #64]	; (80017cc <ES_WIFI_GetNetworkSettings+0x50>)
 800178c:	4618      	mov	r0, r3
 800178e:	f006 ff0d 	bl	80085ac <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800179e:	461a      	mov	r2, r3
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff fe0b 	bl	80013bc <AT_ExecuteCommand>
 80017a6:	4603      	mov	r3, r0
 80017a8:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d108      	bne.n	80017c2 <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f503 7294 	add.w	r2, r3, #296	; 0x128
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	338d      	adds	r3, #141	; 0x8d
 80017ba:	4619      	mov	r1, r3
 80017bc:	4610      	mov	r0, r2
 80017be:	f7ff fd37 	bl	8001230 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();
  return ret;
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	08009b4c 	.word	0x08009b4c

080017d0 <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017e0:	4912      	ldr	r1, [pc, #72]	; (800182c <ES_WIFI_GetMACAddress+0x5c>)
 80017e2:	4618      	mov	r0, r3
 80017e4:	f006 fee2 	bl	80085ac <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017f4:	461a      	mov	r2, r3
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff fde0 	bl	80013bc <AT_ExecuteCommand>
 80017fc:	4603      	mov	r3, r0
 80017fe:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10c      	bne.n	8001820 <ES_WIFI_GetMACAddress+0x50>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800180c:	3302      	adds	r3, #2
 800180e:	4908      	ldr	r1, [pc, #32]	; (8001830 <ES_WIFI_GetMACAddress+0x60>)
 8001810:	4618      	mov	r0, r3
 8001812:	f006 ff15 	bl	8008640 <strtok>
 8001816:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 8001818:	6839      	ldr	r1, [r7, #0]
 800181a:	68b8      	ldr	r0, [r7, #8]
 800181c:	f7ff fc3c 	bl	8001098 <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 8001820:	7bfb      	ldrb	r3, [r7, #15]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	08009b9c 	.word	0x08009b9c
 8001830:	08009ba0 	.word	0x08009ba0

08001834 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8001834:	b590      	push	{r4, r7, lr}
 8001836:	b087      	sub	sp, #28
 8001838:	af02      	add	r7, sp, #8
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 800183e:	2300      	movs	r3, #0
 8001840:	73fb      	strb	r3, [r7, #15]

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <ES_WIFI_StartClientConnection+0x1e>
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b03      	cmp	r3, #3
 8001850:	d105      	bne.n	800185e <ES_WIFI_StartClientConnection+0x2a>
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	885b      	ldrh	r3, [r3, #2]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <ES_WIFI_StartClientConnection+0x2a>
 800185a:	2302      	movs	r3, #2
 800185c:	e0c1      	b.n	80019e2 <ES_WIFI_StartClientConnection+0x1ae>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	785b      	ldrb	r3, [r3, #1]
 8001868:	461a      	mov	r2, r3
 800186a:	4960      	ldr	r1, [pc, #384]	; (80019ec <ES_WIFI_StartClientConnection+0x1b8>)
 800186c:	f006 fe9e 	bl	80085ac <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800187c:	461a      	mov	r2, r3
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff fd9c 	bl	80013bc <AT_ExecuteCommand>
 8001884:	4603      	mov	r3, r0
 8001886:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 8001888:	7bfb      	ldrb	r3, [r7, #15]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d114      	bne.n	80018b8 <ES_WIFI_StartClientConnection+0x84>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	461a      	mov	r2, r3
 800189a:	4955      	ldr	r1, [pc, #340]	; (80019f0 <ES_WIFI_StartClientConnection+0x1bc>)
 800189c:	f006 fe86 	bl	80085ac <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80018ac:	461a      	mov	r2, r3
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff fd84 	bl	80013bc <AT_ExecuteCommand>
 80018b4:	4603      	mov	r3, r0
 80018b6:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d114      	bne.n	80018e8 <ES_WIFI_StartClientConnection+0xb4>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	889b      	ldrh	r3, [r3, #4]
 80018c8:	461a      	mov	r2, r3
 80018ca:	494a      	ldr	r1, [pc, #296]	; (80019f4 <ES_WIFI_StartClientConnection+0x1c0>)
 80018cc:	f006 fe6e 	bl	80085ac <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80018dc:	461a      	mov	r2, r3
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff fd6c 	bl	80013bc <AT_ExecuteCommand>
 80018e4:	4603      	mov	r3, r0
 80018e6:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d11c      	bne.n	8001928 <ES_WIFI_StartClientConnection+0xf4>
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <ES_WIFI_StartClientConnection+0xca>
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b03      	cmp	r3, #3
 80018fc:	d114      	bne.n	8001928 <ES_WIFI_StartClientConnection+0xf4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	885b      	ldrh	r3, [r3, #2]
 8001908:	461a      	mov	r2, r3
 800190a:	493b      	ldr	r1, [pc, #236]	; (80019f8 <ES_WIFI_StartClientConnection+0x1c4>)
 800190c:	f006 fe4e 	bl	80085ac <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800191c:	461a      	mov	r2, r3
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff fd4c 	bl	80013bc <AT_ExecuteCommand>
 8001924:	4603      	mov	r3, r0
 8001926:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8001928:	7bfb      	ldrb	r3, [r7, #15]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d128      	bne.n	8001980 <ES_WIFI_StartClientConnection+0x14c>
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <ES_WIFI_StartClientConnection+0x10a>
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b03      	cmp	r3, #3
 800193c:	d120      	bne.n	8001980 <ES_WIFI_StartClientConnection+0x14c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	799b      	ldrb	r3, [r3, #6]
 8001948:	4619      	mov	r1, r3
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	79db      	ldrb	r3, [r3, #7]
 800194e:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8001954:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800195a:	9301      	str	r3, [sp, #4]
 800195c:	9200      	str	r2, [sp, #0]
 800195e:	4623      	mov	r3, r4
 8001960:	460a      	mov	r2, r1
 8001962:	4926      	ldr	r1, [pc, #152]	; (80019fc <ES_WIFI_StartClientConnection+0x1c8>)
 8001964:	f006 fe22 	bl	80085ac <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001974:	461a      	mov	r2, r3
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff fd20 	bl	80013bc <AT_ExecuteCommand>
 800197c:	4603      	mov	r3, r0
 800197e:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 8001980:	7bfb      	ldrb	r3, [r7, #15]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d116      	bne.n	80019b4 <ES_WIFI_StartClientConnection+0x180>
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b03      	cmp	r3, #3
 800198c:	d112      	bne.n	80019b4 <ES_WIFI_StartClientConnection+0x180>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001994:	491a      	ldr	r1, [pc, #104]	; (8001a00 <ES_WIFI_StartClientConnection+0x1cc>)
 8001996:	4618      	mov	r0, r3
 8001998:	f006 fe08 	bl	80085ac <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80019a8:	461a      	mov	r2, r3
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff fd06 	bl	80013bc <AT_ExecuteCommand>
 80019b0:	4603      	mov	r3, r0
 80019b2:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d112      	bne.n	80019e0 <ES_WIFI_StartClientConnection+0x1ac>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80019c0:	4910      	ldr	r1, [pc, #64]	; (8001a04 <ES_WIFI_StartClientConnection+0x1d0>)
 80019c2:	4618      	mov	r0, r3
 80019c4:	f006 fdf2 	bl	80085ac <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80019d4:	461a      	mov	r2, r3
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff fcf0 	bl	80013bc <AT_ExecuteCommand>
 80019dc:	4603      	mov	r3, r0
 80019de:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();
  return ret;
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd90      	pop	{r4, r7, pc}
 80019ea:	bf00      	nop
 80019ec:	08009c04 	.word	0x08009c04
 80019f0:	08009c0c 	.word	0x08009c0c
 80019f4:	08009c14 	.word	0x08009c14
 80019f8:	08009c1c 	.word	0x08009c1c
 80019fc:	08009c24 	.word	0x08009c24
 8001a00:	08009c34 	.word	0x08009c34
 8001a04:	08009c3c 	.word	0x08009c3c

08001a08 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b088      	sub	sp, #32
 8001a0c:	af02      	add	r7, sp, #8
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	607a      	str	r2, [r7, #4]
 8001a12:	461a      	mov	r2, r3
 8001a14:	460b      	mov	r3, r1
 8001a16:	72fb      	strb	r3, [r7, #11]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8001a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d102      	bne.n	8001a2c <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 8001a26:	2301      	movs	r3, #1
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	e001      	b.n	8001a30 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 8001a30:	893b      	ldrh	r3, [r7, #8]
 8001a32:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001a36:	d302      	bcc.n	8001a3e <ES_WIFI_SendData+0x36>
 8001a38:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8001a3c:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 8001a3e:	6a3b      	ldr	r3, [r7, #32]
 8001a40:	893a      	ldrh	r2, [r7, #8]
 8001a42:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a4a:	7afa      	ldrb	r2, [r7, #11]
 8001a4c:	4942      	ldr	r1, [pc, #264]	; (8001b58 <ES_WIFI_SendData+0x150>)
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f006 fdac 	bl	80085ac <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a60:	461a      	mov	r2, r3
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f7ff fcaa 	bl	80013bc <AT_ExecuteCommand>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	74fb      	strb	r3, [r7, #19]
  if(ret == ES_WIFI_STATUS_OK)
 8001a6c:	7cfb      	ldrb	r3, [r7, #19]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d15e      	bne.n	8001b30 <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	4938      	ldr	r1, [pc, #224]	; (8001b5c <ES_WIFI_SendData+0x154>)
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f006 fd95 	bl	80085ac <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a8e:	461a      	mov	r2, r3
 8001a90:	68f8      	ldr	r0, [r7, #12]
 8001a92:	f7ff fc93 	bl	80013bc <AT_ExecuteCommand>
 8001a96:	4603      	mov	r3, r0
 8001a98:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 8001a9a:	7cfb      	ldrb	r3, [r7, #19]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d13d      	bne.n	8001b1c <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001aa6:	893a      	ldrh	r2, [r7, #8]
 8001aa8:	492d      	ldr	r1, [pc, #180]	; (8001b60 <ES_WIFI_SendData+0x158>)
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f006 fd7e 	bl	80085ac <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001abc:	893a      	ldrh	r2, [r7, #8]
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f7ff fcdf 	bl	8001488 <AT_RequestSendData>
 8001aca:	4603      	mov	r3, r0
 8001acc:	74fb      	strb	r3, [r7, #19]

      if(ret == ES_WIFI_STATUS_OK)
 8001ace:	7cfb      	ldrb	r3, [r7, #19]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d119      	bne.n	8001b08 <ES_WIFI_SendData+0x100>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ada:	4922      	ldr	r1, [pc, #136]	; (8001b64 <ES_WIFI_SendData+0x15c>)
 8001adc:	4618      	mov	r0, r3
 8001ade:	f006 fd98 	bl	8008612 <strstr>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d02c      	beq.n	8001b42 <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 8001ae8:	f640 024c 	movw	r2, #2124	; 0x84c
 8001aec:	491e      	ldr	r1, [pc, #120]	; (8001b68 <ES_WIFI_SendData+0x160>)
 8001aee:	481f      	ldr	r0, [pc, #124]	; (8001b6c <ES_WIFI_SendData+0x164>)
 8001af0:	f006 fc9a 	bl	8008428 <iprintf>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001afa:	4619      	mov	r1, r3
 8001afc:	481c      	ldr	r0, [pc, #112]	; (8001b70 <ES_WIFI_SendData+0x168>)
 8001afe:	f006 fc93 	bl	8008428 <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 8001b02:	2302      	movs	r3, #2
 8001b04:	74fb      	strb	r3, [r7, #19]
 8001b06:	e01c      	b.n	8001b42 <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 8001b08:	f640 0252 	movw	r2, #2130	; 0x852
 8001b0c:	4916      	ldr	r1, [pc, #88]	; (8001b68 <ES_WIFI_SendData+0x160>)
 8001b0e:	4817      	ldr	r0, [pc, #92]	; (8001b6c <ES_WIFI_SendData+0x164>)
 8001b10:	f006 fc8a 	bl	8008428 <iprintf>
 8001b14:	4817      	ldr	r0, [pc, #92]	; (8001b74 <ES_WIFI_SendData+0x16c>)
 8001b16:	f006 fd0d 	bl	8008534 <puts>
 8001b1a:	e012      	b.n	8001b42 <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 8001b1c:	f640 0257 	movw	r2, #2135	; 0x857
 8001b20:	4911      	ldr	r1, [pc, #68]	; (8001b68 <ES_WIFI_SendData+0x160>)
 8001b22:	4812      	ldr	r0, [pc, #72]	; (8001b6c <ES_WIFI_SendData+0x164>)
 8001b24:	f006 fc80 	bl	8008428 <iprintf>
 8001b28:	4813      	ldr	r0, [pc, #76]	; (8001b78 <ES_WIFI_SendData+0x170>)
 8001b2a:	f006 fd03 	bl	8008534 <puts>
 8001b2e:	e008      	b.n	8001b42 <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 8001b30:	f640 025c 	movw	r2, #2140	; 0x85c
 8001b34:	490c      	ldr	r1, [pc, #48]	; (8001b68 <ES_WIFI_SendData+0x160>)
 8001b36:	480d      	ldr	r0, [pc, #52]	; (8001b6c <ES_WIFI_SendData+0x164>)
 8001b38:	f006 fc76 	bl	8008428 <iprintf>
 8001b3c:	480f      	ldr	r0, [pc, #60]	; (8001b7c <ES_WIFI_SendData+0x174>)
 8001b3e:	f006 fcf9 	bl	8008534 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 8001b42:	7cfb      	ldrb	r3, [r7, #19]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d102      	bne.n	8001b4e <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 8001b48:	6a3b      	ldr	r3, [r7, #32]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 8001b4e:	7cfb      	ldrb	r3, [r7, #19]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	08009c04 	.word	0x08009c04
 8001b5c:	08009db8 	.word	0x08009db8
 8001b60:	08009dc0 	.word	0x08009dc0
 8001b64:	08009dcc 	.word	0x08009dcc
 8001b68:	08009c94 	.word	0x08009c94
 8001b6c:	08009cac 	.word	0x08009cac
 8001b70:	08009dd4 	.word	0x08009dd4
 8001b74:	08009df0 	.word	0x08009df0
 8001b78:	08009e0c 	.word	0x08009e0c
 8001b7c:	08009e20 	.word	0x08009e20

08001b80 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08c      	sub	sp, #48	; 0x30
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 8001b88:	4b57      	ldr	r3, [pc, #348]	; (8001ce8 <SPI_WIFI_MspInit+0x168>)
 8001b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8c:	4a56      	ldr	r2, [pc, #344]	; (8001ce8 <SPI_WIFI_MspInit+0x168>)
 8001b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b92:	6593      	str	r3, [r2, #88]	; 0x58
 8001b94:	4b54      	ldr	r3, [pc, #336]	; (8001ce8 <SPI_WIFI_MspInit+0x168>)
 8001b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b9c:	61bb      	str	r3, [r7, #24]
 8001b9e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba0:	4b51      	ldr	r3, [pc, #324]	; (8001ce8 <SPI_WIFI_MspInit+0x168>)
 8001ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba4:	4a50      	ldr	r2, [pc, #320]	; (8001ce8 <SPI_WIFI_MspInit+0x168>)
 8001ba6:	f043 0302 	orr.w	r3, r3, #2
 8001baa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bac:	4b4e      	ldr	r3, [pc, #312]	; (8001ce8 <SPI_WIFI_MspInit+0x168>)
 8001bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	617b      	str	r3, [r7, #20]
 8001bb6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb8:	4b4b      	ldr	r3, [pc, #300]	; (8001ce8 <SPI_WIFI_MspInit+0x168>)
 8001bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bbc:	4a4a      	ldr	r2, [pc, #296]	; (8001ce8 <SPI_WIFI_MspInit+0x168>)
 8001bbe:	f043 0304 	orr.w	r3, r3, #4
 8001bc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bc4:	4b48      	ldr	r3, [pc, #288]	; (8001ce8 <SPI_WIFI_MspInit+0x168>)
 8001bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	613b      	str	r3, [r7, #16]
 8001bce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bd0:	4b45      	ldr	r3, [pc, #276]	; (8001ce8 <SPI_WIFI_MspInit+0x168>)
 8001bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd4:	4a44      	ldr	r2, [pc, #272]	; (8001ce8 <SPI_WIFI_MspInit+0x168>)
 8001bd6:	f043 0310 	orr.w	r3, r3, #16
 8001bda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bdc:	4b42      	ldr	r3, [pc, #264]	; (8001ce8 <SPI_WIFI_MspInit+0x168>)
 8001bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be0:	f003 0310 	and.w	r3, r3, #16
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8001be8:	2200      	movs	r2, #0
 8001bea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bee:	483f      	ldr	r0, [pc, #252]	; (8001cec <SPI_WIFI_MspInit+0x16c>)
 8001bf0:	f001 fc6f 	bl	80034d2 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8001bf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bf8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001c02:	2300      	movs	r3, #0
 8001c04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8001c06:	f107 031c 	add.w	r3, r7, #28
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4837      	ldr	r0, [pc, #220]	; (8001cec <SPI_WIFI_MspInit+0x16c>)
 8001c0e:	f001 faa1 	bl	8003154 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 8001c12:	2302      	movs	r3, #2
 8001c14:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8001c16:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c1a:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001c20:	2300      	movs	r3, #0
 8001c22:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001c24:	f107 031c 	add.w	r3, r7, #28
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4831      	ldr	r0, [pc, #196]	; (8001cf0 <SPI_WIFI_MspInit+0x170>)
 8001c2c:	f001 fa92 	bl	8003154 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 8001c30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c34:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001c36:	2301      	movs	r3, #1
 8001c38:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001c46:	f107 031c 	add.w	r3, r7, #28
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4828      	ldr	r0, [pc, #160]	; (8001cf0 <SPI_WIFI_MspInit+0x170>)
 8001c4e:	f001 fa81 	bl	8003154 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 8001c52:	2201      	movs	r2, #1
 8001c54:	2101      	movs	r1, #1
 8001c56:	4826      	ldr	r0, [pc, #152]	; (8001cf0 <SPI_WIFI_MspInit+0x170>)
 8001c58:	f001 fc3b 	bl	80034d2 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001c60:	2301      	movs	r3, #1
 8001c62:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8001c6c:	f107 031c 	add.w	r3, r7, #28
 8001c70:	4619      	mov	r1, r3
 8001c72:	481f      	ldr	r0, [pc, #124]	; (8001cf0 <SPI_WIFI_MspInit+0x170>)
 8001c74:	f001 fa6e 	bl	8003154 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8001c78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c7c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001c86:	2301      	movs	r3, #1
 8001c88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001c8a:	2306      	movs	r3, #6
 8001c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8001c8e:	f107 031c 	add.w	r3, r7, #28
 8001c92:	4619      	mov	r1, r3
 8001c94:	4817      	ldr	r0, [pc, #92]	; (8001cf4 <SPI_WIFI_MspInit+0x174>)
 8001c96:	f001 fa5d 	bl	8003154 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8001c9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c9e:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001cac:	2306      	movs	r3, #6
 8001cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8001cb0:	f107 031c 	add.w	r3, r7, #28
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	480f      	ldr	r0, [pc, #60]	; (8001cf4 <SPI_WIFI_MspInit+0x174>)
 8001cb8:	f001 fa4c 	bl	8003154 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8001cbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cc0:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001cce:	2306      	movs	r3, #6
 8001cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8001cd2:	f107 031c 	add.w	r3, r7, #28
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4806      	ldr	r0, [pc, #24]	; (8001cf4 <SPI_WIFI_MspInit+0x174>)
 8001cda:	f001 fa3b 	bl	8003154 <HAL_GPIO_Init>
}
 8001cde:	bf00      	nop
 8001ce0:	3730      	adds	r7, #48	; 0x30
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	48000400 	.word	0x48000400
 8001cf0:	48001000 	.word	0x48001000
 8001cf4:	48000800 	.word	0x48000800

08001cf8 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d145      	bne.n	8001d98 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 8001d0c:	4b27      	ldr	r3, [pc, #156]	; (8001dac <SPI_WIFI_Init+0xb4>)
 8001d0e:	4a28      	ldr	r2, [pc, #160]	; (8001db0 <SPI_WIFI_Init+0xb8>)
 8001d10:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 8001d12:	4826      	ldr	r0, [pc, #152]	; (8001dac <SPI_WIFI_Init+0xb4>)
 8001d14:	f7ff ff34 	bl	8001b80 <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 8001d18:	4b24      	ldr	r3, [pc, #144]	; (8001dac <SPI_WIFI_Init+0xb4>)
 8001d1a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d1e:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8001d20:	4b22      	ldr	r3, [pc, #136]	; (8001dac <SPI_WIFI_Init+0xb4>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8001d26:	4b21      	ldr	r3, [pc, #132]	; (8001dac <SPI_WIFI_Init+0xb4>)
 8001d28:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001d2c:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8001d2e:	4b1f      	ldr	r3, [pc, #124]	; (8001dac <SPI_WIFI_Init+0xb4>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8001d34:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <SPI_WIFI_Init+0xb4>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 8001d3a:	4b1c      	ldr	r3, [pc, #112]	; (8001dac <SPI_WIFI_Init+0xb4>)
 8001d3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d40:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8001d42:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <SPI_WIFI_Init+0xb4>)
 8001d44:	2210      	movs	r2, #16
 8001d46:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8001d48:	4b18      	ldr	r3, [pc, #96]	; (8001dac <SPI_WIFI_Init+0xb4>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8001d4e:	4b17      	ldr	r3, [pc, #92]	; (8001dac <SPI_WIFI_Init+0xb4>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8001d54:	4b15      	ldr	r3, [pc, #84]	; (8001dac <SPI_WIFI_Init+0xb4>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 8001d5a:	4b14      	ldr	r3, [pc, #80]	; (8001dac <SPI_WIFI_Init+0xb4>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8001d60:	4812      	ldr	r0, [pc, #72]	; (8001dac <SPI_WIFI_Init+0xb4>)
 8001d62:	f002 fffd 	bl	8004d60 <HAL_SPI_Init>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d002      	beq.n	8001d72 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 8001d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d70:	e018      	b.n	8001da4 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2100      	movs	r1, #0
 8001d76:	2007      	movs	r0, #7
 8001d78:	f001 f981 	bl	800307e <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8001d7c:	2007      	movs	r0, #7
 8001d7e:	f001 f99a 	bl	80030b6 <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8001d82:	2200      	movs	r2, #0
 8001d84:	2100      	movs	r1, #0
 8001d86:	2033      	movs	r0, #51	; 0x33
 8001d88:	f001 f979 	bl	800307e <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8001d8c:	2033      	movs	r0, #51	; 0x33
 8001d8e:	f001 f992 	bl	80030b6 <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 8001d92:	200a      	movs	r0, #10
 8001d94:	f000 f9fe 	bl	8002194 <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 8001d98:	f000 f80c 	bl	8001db4 <SPI_WIFI_ResetModule>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	73fb      	strb	r3, [r7, #15]

  return rc;
 8001da0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	200000cc 	.word	0x200000cc
 8001db0:	40003c00 	.word	0x40003c00

08001db4 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8001dba:	f001 f87d 	bl	8002eb8 <HAL_GetTick>
 8001dbe:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dca:	4830      	ldr	r0, [pc, #192]	; (8001e8c <SPI_WIFI_ResetModule+0xd8>)
 8001dcc:	f001 fb81 	bl	80034d2 <HAL_GPIO_WritePin>
 8001dd0:	200a      	movs	r0, #10
 8001dd2:	f001 f87b 	bl	8002ecc <HAL_Delay>
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ddc:	482b      	ldr	r0, [pc, #172]	; (8001e8c <SPI_WIFI_ResetModule+0xd8>)
 8001dde:	f001 fb78 	bl	80034d2 <HAL_GPIO_WritePin>
 8001de2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001de6:	f001 f871 	bl	8002ecc <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 8001dea:	2200      	movs	r2, #0
 8001dec:	2101      	movs	r1, #1
 8001dee:	4827      	ldr	r0, [pc, #156]	; (8001e8c <SPI_WIFI_ResetModule+0xd8>)
 8001df0:	f001 fb6f 	bl	80034d2 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001df4:	200f      	movs	r0, #15
 8001df6:	f000 f9cd 	bl	8002194 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 8001dfa:	e020      	b.n	8001e3e <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	463a      	mov	r2, r7
 8001e00:	18d1      	adds	r1, r2, r3
 8001e02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e06:	2201      	movs	r2, #1
 8001e08:	4821      	ldr	r0, [pc, #132]	; (8001e90 <SPI_WIFI_ResetModule+0xdc>)
 8001e0a:	f003 f8af 	bl	8004f6c <HAL_SPI_Receive>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8001e12:	7bfb      	ldrb	r3, [r7, #15]
 8001e14:	3302      	adds	r3, #2
 8001e16:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8001e18:	f001 f84e 	bl	8002eb8 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e26:	d202      	bcs.n	8001e2e <SPI_WIFI_ResetModule+0x7a>
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d007      	beq.n	8001e3e <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 8001e2e:	2201      	movs	r2, #1
 8001e30:	2101      	movs	r1, #1
 8001e32:	4816      	ldr	r0, [pc, #88]	; (8001e8c <SPI_WIFI_ResetModule+0xd8>)
 8001e34:	f001 fb4d 	bl	80034d2 <HAL_GPIO_WritePin>
      return -1;
 8001e38:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3c:	e021      	b.n	8001e82 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 8001e3e:	2102      	movs	r1, #2
 8001e40:	4812      	ldr	r0, [pc, #72]	; (8001e8c <SPI_WIFI_ResetModule+0xd8>)
 8001e42:	f001 fb2f 	bl	80034a4 <HAL_GPIO_ReadPin>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d0d7      	beq.n	8001dfc <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	2101      	movs	r1, #1
 8001e50:	480e      	ldr	r0, [pc, #56]	; (8001e8c <SPI_WIFI_ResetModule+0xd8>)
 8001e52:	f001 fb3e 	bl	80034d2 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8001e56:	783b      	ldrb	r3, [r7, #0]
 8001e58:	2b15      	cmp	r3, #21
 8001e5a:	d10e      	bne.n	8001e7a <SPI_WIFI_ResetModule+0xc6>
 8001e5c:	787b      	ldrb	r3, [r7, #1]
 8001e5e:	2b15      	cmp	r3, #21
 8001e60:	d10b      	bne.n	8001e7a <SPI_WIFI_ResetModule+0xc6>
 8001e62:	78bb      	ldrb	r3, [r7, #2]
 8001e64:	2b0d      	cmp	r3, #13
 8001e66:	d108      	bne.n	8001e7a <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8001e68:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8001e6a:	2b0a      	cmp	r3, #10
 8001e6c:	d105      	bne.n	8001e7a <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8001e6e:	793b      	ldrb	r3, [r7, #4]
 8001e70:	2b3e      	cmp	r3, #62	; 0x3e
 8001e72:	d102      	bne.n	8001e7a <SPI_WIFI_ResetModule+0xc6>
 8001e74:	797b      	ldrb	r3, [r7, #5]
 8001e76:	2b20      	cmp	r3, #32
 8001e78:	d002      	beq.n	8001e80 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 8001e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7e:	e000      	b.n	8001e82 <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	48001000 	.word	0x48001000
 8001e90:	200000cc 	.word	0x200000cc

08001e94 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8001e98:	4802      	ldr	r0, [pc, #8]	; (8001ea4 <SPI_WIFI_DeInit+0x10>)
 8001e9a:	f003 f82d 	bl	8004ef8 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	200000cc 	.word	0x200000cc

08001ea8 <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8001eb0:	f001 f802 	bl	8002eb8 <HAL_GetTick>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 8001eb8:	e00a      	b.n	8001ed0 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001eba:	f000 fffd 	bl	8002eb8 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	1ad2      	subs	r2, r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d902      	bls.n	8001ed0 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 8001eca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ece:	e007      	b.n	8001ee0 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 8001ed0:	2102      	movs	r1, #2
 8001ed2:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <wait_cmddata_rdy_high+0x40>)
 8001ed4:	f001 fae6 	bl	80034a4 <HAL_GPIO_ReadPin>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d1ed      	bne.n	8001eba <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	48001000 	.word	0x48001000

08001eec <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001ef4:	f000 ffe0 	bl	8002eb8 <HAL_GetTick>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 8001efc:	e00a      	b.n	8001f14 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001efe:	f000 ffdb 	bl	8002eb8 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	1ad2      	subs	r2, r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d902      	bls.n	8001f14 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 8001f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f12:	e004      	b.n	8001f1e <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 8001f14:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <wait_cmddata_rdy_rising_event+0x3c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d0f0      	beq.n	8001efe <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 8001f1c:	2300      	movs	r3, #0
#endif
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20000138 	.word	0x20000138

08001f2c <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001f34:	f000 ffc0 	bl	8002eb8 <HAL_GetTick>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 8001f3c:	e00a      	b.n	8001f54 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001f3e:	f000 ffbb 	bl	8002eb8 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	1ad2      	subs	r2, r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d902      	bls.n	8001f54 <wait_spi_rx_event+0x28>
    {
      return -1;
 8001f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f52:	e004      	b.n	8001f5e <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 8001f54:	4b04      	ldr	r3, [pc, #16]	; (8001f68 <wait_spi_rx_event+0x3c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d0f0      	beq.n	8001f3e <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 8001f5c:	2300      	movs	r3, #0
#endif
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000130 	.word	0x20000130

08001f6c <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001f74:	f000 ffa0 	bl	8002eb8 <HAL_GetTick>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 8001f7c:	e00a      	b.n	8001f94 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001f7e:	f000 ff9b 	bl	8002eb8 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	1ad2      	subs	r2, r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d902      	bls.n	8001f94 <wait_spi_tx_event+0x28>
    {
      return -1;
 8001f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f92:	e004      	b.n	8001f9e <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 8001f94:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <wait_spi_tx_event+0x3c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d0f0      	beq.n	8001f7e <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 8001f9c:	2300      	movs	r3, #0
#endif
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20000134 	.word	0x20000134

08001fac <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	607a      	str	r2, [r7, #4]
 8001fb8:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	4834      	ldr	r0, [pc, #208]	; (8002094 <SPI_WIFI_ReceiveData+0xe8>)
 8001fc4:	f001 fa85 	bl	80034d2 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8001fc8:	2003      	movs	r0, #3
 8001fca:	f000 f8e3 	bl	8002194 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff8b 	bl	8001eec <wait_cmddata_rdy_rising_event>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	da02      	bge.n	8001fe2 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8001fdc:	f06f 0302 	mvn.w	r3, #2
 8001fe0:	e054      	b.n	800208c <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	482b      	ldr	r0, [pc, #172]	; (8002094 <SPI_WIFI_ReceiveData+0xe8>)
 8001fe8:	f001 fa73 	bl	80034d2 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001fec:	200f      	movs	r0, #15
 8001fee:	f000 f8d1 	bl	8002194 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8001ff2:	e03d      	b.n	8002070 <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 8001ff4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001ff8:	897b      	ldrh	r3, [r7, #10]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	db02      	blt.n	8002004 <SPI_WIFI_ReceiveData+0x58>
 8001ffe:	897b      	ldrh	r3, [r7, #10]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d13c      	bne.n	800207e <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 8002004:	4b24      	ldr	r3, [pc, #144]	; (8002098 <SPI_WIFI_ReceiveData+0xec>)
 8002006:	2201      	movs	r2, #1
 8002008:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 800200a:	f107 0314 	add.w	r3, r7, #20
 800200e:	2201      	movs	r2, #1
 8002010:	4619      	mov	r1, r3
 8002012:	4822      	ldr	r0, [pc, #136]	; (800209c <SPI_WIFI_ReceiveData+0xf0>)
 8002014:	f003 fd1a 	bl	8005a4c <HAL_SPI_Receive_IT>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d007      	beq.n	800202e <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 800201e:	2201      	movs	r2, #1
 8002020:	2101      	movs	r1, #1
 8002022:	481c      	ldr	r0, [pc, #112]	; (8002094 <SPI_WIFI_ReceiveData+0xe8>)
 8002024:	f001 fa55 	bl	80034d2 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8002028:	f04f 33ff 	mov.w	r3, #4294967295
 800202c:	e02e      	b.n	800208c <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff ff7b 	bl	8001f2c <wait_spi_rx_event>

      pData[0] = tmp[0];
 8002036:	7d3a      	ldrb	r2, [r7, #20]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	3301      	adds	r3, #1
 8002040:	7d7a      	ldrb	r2, [r7, #21]
 8002042:	701a      	strb	r2, [r3, #0]
      length += 2;
 8002044:	8afb      	ldrh	r3, [r7, #22]
 8002046:	3302      	adds	r3, #2
 8002048:	b29b      	uxth	r3, r3
 800204a:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	3302      	adds	r3, #2
 8002050:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 8002052:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002056:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800205a:	db09      	blt.n	8002070 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 800205c:	2201      	movs	r2, #1
 800205e:	2101      	movs	r1, #1
 8002060:	480c      	ldr	r0, [pc, #48]	; (8002094 <SPI_WIFI_ReceiveData+0xe8>)
 8002062:	f001 fa36 	bl	80034d2 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 8002066:	f7ff fea5 	bl	8001db4 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 800206a:	f06f 0303 	mvn.w	r3, #3
 800206e:	e00d      	b.n	800208c <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 8002070:	2102      	movs	r1, #2
 8002072:	4808      	ldr	r0, [pc, #32]	; (8002094 <SPI_WIFI_ReceiveData+0xe8>)
 8002074:	f001 fa16 	bl	80034a4 <HAL_GPIO_ReadPin>
 8002078:	4603      	mov	r3, r0
 800207a:	2b01      	cmp	r3, #1
 800207c:	d0ba      	beq.n	8001ff4 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 800207e:	2201      	movs	r2, #1
 8002080:	2101      	movs	r1, #1
 8002082:	4804      	ldr	r0, [pc, #16]	; (8002094 <SPI_WIFI_ReceiveData+0xe8>)
 8002084:	f001 fa25 	bl	80034d2 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 8002088:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	48001000 	.word	0x48001000
 8002098:	20000130 	.word	0x20000130
 800209c:	200000cc 	.word	0x200000cc

080020a0 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	460b      	mov	r3, r1
 80020aa:	607a      	str	r2, [r7, #4]
 80020ac:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff fef9 	bl	8001ea8 <wait_cmddata_rdy_high>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	da02      	bge.n	80020c2 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 80020bc:	f04f 33ff 	mov.w	r3, #4294967295
 80020c0:	e04f      	b.n	8002162 <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 80020c2:	4b2a      	ldr	r3, [pc, #168]	; (800216c <SPI_WIFI_SendData+0xcc>)
 80020c4:	2201      	movs	r2, #1
 80020c6:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 80020c8:	2200      	movs	r2, #0
 80020ca:	2101      	movs	r1, #1
 80020cc:	4828      	ldr	r0, [pc, #160]	; (8002170 <SPI_WIFI_SendData+0xd0>)
 80020ce:	f001 fa00 	bl	80034d2 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80020d2:	200f      	movs	r0, #15
 80020d4:	f000 f85e 	bl	8002194 <SPI_WIFI_DelayUs>
  if (len > 1)
 80020d8:	897b      	ldrh	r3, [r7, #10]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d919      	bls.n	8002112 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 80020de:	4b25      	ldr	r3, [pc, #148]	; (8002174 <SPI_WIFI_SendData+0xd4>)
 80020e0:	2201      	movs	r2, #1
 80020e2:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 80020e4:	897b      	ldrh	r3, [r7, #10]
 80020e6:	085b      	lsrs	r3, r3, #1
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	461a      	mov	r2, r3
 80020ec:	68f9      	ldr	r1, [r7, #12]
 80020ee:	4822      	ldr	r0, [pc, #136]	; (8002178 <SPI_WIFI_SendData+0xd8>)
 80020f0:	f003 fc0a 	bl	8005908 <HAL_SPI_Transmit_IT>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d007      	beq.n	800210a <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 80020fa:	2201      	movs	r2, #1
 80020fc:	2101      	movs	r1, #1
 80020fe:	481c      	ldr	r0, [pc, #112]	; (8002170 <SPI_WIFI_SendData+0xd0>)
 8002100:	f001 f9e7 	bl	80034d2 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8002104:	f04f 33ff 	mov.w	r3, #4294967295
 8002108:	e02b      	b.n	8002162 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ff2d 	bl	8001f6c <wait_spi_tx_event>
  }
  
  if ( len & 1)
 8002112:	897b      	ldrh	r3, [r7, #10]
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	2b00      	cmp	r3, #0
 800211a:	d020      	beq.n	800215e <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 800211c:	897b      	ldrh	r3, [r7, #10]
 800211e:	3b01      	subs	r3, #1
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	4413      	add	r3, r2
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8002128:	230a      	movs	r3, #10
 800212a:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 800212c:	4b11      	ldr	r3, [pc, #68]	; (8002174 <SPI_WIFI_SendData+0xd4>)
 800212e:	2201      	movs	r2, #1
 8002130:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8002132:	f107 0314 	add.w	r3, r7, #20
 8002136:	2201      	movs	r2, #1
 8002138:	4619      	mov	r1, r3
 800213a:	480f      	ldr	r0, [pc, #60]	; (8002178 <SPI_WIFI_SendData+0xd8>)
 800213c:	f003 fbe4 	bl	8005908 <HAL_SPI_Transmit_IT>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d007      	beq.n	8002156 <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 8002146:	2201      	movs	r2, #1
 8002148:	2101      	movs	r1, #1
 800214a:	4809      	ldr	r0, [pc, #36]	; (8002170 <SPI_WIFI_SendData+0xd0>)
 800214c:	f001 f9c1 	bl	80034d2 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8002150:	f04f 33ff 	mov.w	r3, #4294967295
 8002154:	e005      	b.n	8002162 <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff07 	bl	8001f6c <wait_spi_tx_event>
    
  }
  return len;
 800215e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000138 	.word	0x20000138
 8002170:	48001000 	.word	0x48001000
 8002174:	20000134 	.word	0x20000134
 8002178:	200000cc 	.word	0x200000cc

0800217c <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 fea1 	bl	8002ecc <HAL_Delay>
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
	...

08002194 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 80021a4:	4b20      	ldr	r3, [pc, #128]	; (8002228 <SPI_WIFI_DelayUs+0x94>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d122      	bne.n	80021f2 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 80021ac:	4b1f      	ldr	r3, [pc, #124]	; (800222c <SPI_WIFI_DelayUs+0x98>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a1f      	ldr	r2, [pc, #124]	; (8002230 <SPI_WIFI_DelayUs+0x9c>)
 80021b2:	fba2 2303 	umull	r2, r3, r2, r3
 80021b6:	099b      	lsrs	r3, r3, #6
 80021b8:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 80021c2:	f000 fe79 	bl	8002eb8 <HAL_GetTick>
 80021c6:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 80021c8:	e002      	b.n	80021d0 <SPI_WIFI_DelayUs+0x3c>
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	3b01      	subs	r3, #1
 80021ce:	60bb      	str	r3, [r7, #8]
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f9      	bne.n	80021ca <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 80021d6:	f000 fe6f 	bl	8002eb8 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	4a11      	ldr	r2, [pc, #68]	; (8002228 <SPI_WIFI_DelayUs+0x94>)
 80021e2:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 80021e4:	4b10      	ldr	r3, [pc, #64]	; (8002228 <SPI_WIFI_DelayUs+0x94>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d102      	bne.n	80021f2 <SPI_WIFI_DelayUs+0x5e>
 80021ec:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <SPI_WIFI_DelayUs+0x94>)
 80021ee:	2201      	movs	r2, #1
 80021f0:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 80021f2:	4b0e      	ldr	r3, [pc, #56]	; (800222c <SPI_WIFI_DelayUs+0x98>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a0f      	ldr	r2, [pc, #60]	; (8002234 <SPI_WIFI_DelayUs+0xa0>)
 80021f8:	fba2 2303 	umull	r2, r3, r2, r3
 80021fc:	0c9a      	lsrs	r2, r3, #18
 80021fe:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <SPI_WIFI_DelayUs+0x94>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	fbb2 f3f3 	udiv	r3, r2, r3
 8002206:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	fb02 f303 	mul.w	r3, r2, r3
 8002210:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8002212:	e002      	b.n	800221a <SPI_WIFI_DelayUs+0x86>
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	3b01      	subs	r3, #1
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1f9      	bne.n	8002214 <SPI_WIFI_DelayUs+0x80>
  return;
 8002220:	bf00      	nop
}
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	2000013c 	.word	0x2000013c
 800222c:	20000044 	.word	0x20000044
 8002230:	10624dd3 	.word	0x10624dd3
 8002234:	431bde83 	.word	0x431bde83

08002238 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8002240:	4b05      	ldr	r3, [pc, #20]	; (8002258 <HAL_SPI_RxCpltCallback+0x20>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d002      	beq.n	800224e <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8002248:	4b03      	ldr	r3, [pc, #12]	; (8002258 <HAL_SPI_RxCpltCallback+0x20>)
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
  }
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr
 8002258:	20000130 	.word	0x20000130

0800225c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8002264:	4b05      	ldr	r3, [pc, #20]	; (800227c <HAL_SPI_TxCpltCallback+0x20>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d002      	beq.n	8002272 <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 800226c:	4b03      	ldr	r3, [pc, #12]	; (800227c <HAL_SPI_TxCpltCallback+0x20>)
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
  }
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr
 800227c:	20000134 	.word	0x20000134

08002280 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 8002284:	4b05      	ldr	r3, [pc, #20]	; (800229c <SPI_WIFI_ISR+0x1c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d102      	bne.n	8002292 <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 800228c:	4b03      	ldr	r3, [pc, #12]	; (800229c <SPI_WIFI_ISR+0x1c>)
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
   }
}
 8002292:	bf00      	nop
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	20000138 	.word	0x20000138

080022a0 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 80022aa:	4b0d      	ldr	r3, [pc, #52]	; (80022e0 <WIFI_Init+0x40>)
 80022ac:	9301      	str	r3, [sp, #4]
 80022ae:	4b0d      	ldr	r3, [pc, #52]	; (80022e4 <WIFI_Init+0x44>)
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	4b0d      	ldr	r3, [pc, #52]	; (80022e8 <WIFI_Init+0x48>)
 80022b4:	4a0d      	ldr	r2, [pc, #52]	; (80022ec <WIFI_Init+0x4c>)
 80022b6:	490e      	ldr	r1, [pc, #56]	; (80022f0 <WIFI_Init+0x50>)
 80022b8:	480e      	ldr	r0, [pc, #56]	; (80022f4 <WIFI_Init+0x54>)
 80022ba:	f7ff f989 	bl	80015d0 <ES_WIFI_RegisterBusIO>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d107      	bne.n	80022d4 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 80022c4:	480b      	ldr	r0, [pc, #44]	; (80022f4 <WIFI_Init+0x54>)
 80022c6:	f7ff f955 	bl	8001574 <ES_WIFI_Init>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 80022d0:	2300      	movs	r3, #0
 80022d2:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 80022d4:	79fb      	ldrb	r3, [r7, #7]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	08001fad 	.word	0x08001fad
 80022e4:	080020a1 	.word	0x080020a1
 80022e8:	0800217d 	.word	0x0800217d
 80022ec:	08001e95 	.word	0x08001e95
 80022f0:	08001cf9 	.word	0x08001cf9
 80022f4:	20000140 	.word	0x20000140

080022f8 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	4613      	mov	r3, r2
 8002304:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	68ba      	ldr	r2, [r7, #8]
 800230e:	68f9      	ldr	r1, [r7, #12]
 8002310:	4809      	ldr	r0, [pc, #36]	; (8002338 <WIFI_Connect+0x40>)
 8002312:	f7ff f98f 	bl	8001634 <ES_WIFI_Connect>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d107      	bne.n	800232c <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800231c:	4806      	ldr	r0, [pc, #24]	; (8002338 <WIFI_Connect+0x40>)
 800231e:	f7ff fa2d 	bl	800177c <ES_WIFI_GetNetworkSettings>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8002328:	2300      	movs	r3, #0
 800232a:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 800232c:	7dfb      	ldrb	r3, [r7, #23]
}
 800232e:	4618      	mov	r0, r3
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20000140 	.word	0x20000140

0800233c <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	4806      	ldr	r0, [pc, #24]	; (8002364 <WIFI_GetMAC_Address+0x28>)
 800234c:	f7ff fa40 	bl	80017d0 <ES_WIFI_GetMACAddress>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800235a:	7bfb      	ldrb	r3, [r7, #15]
}
 800235c:	4618      	mov	r0, r3
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20000140 	.word	0x20000140

08002368 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8002374:	4809      	ldr	r0, [pc, #36]	; (800239c <WIFI_GetIP_Address+0x34>)
 8002376:	f7ff f9d5 	bl	8001724 <ES_WIFI_IsConnected>
 800237a:	4603      	mov	r3, r0
 800237c:	2b01      	cmp	r3, #1
 800237e:	d107      	bne.n	8002390 <WIFI_GetIP_Address+0x28>
 8002380:	4b06      	ldr	r3, [pc, #24]	; (800239c <WIFI_GetIP_Address+0x34>)
 8002382:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 8002386:	461a      	mov	r2, r3
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 800238c:	2300      	movs	r3, #0
 800238e:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8002390:	7bfb      	ldrb	r3, [r7, #15]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000140 	.word	0x20000140

080023a0 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08a      	sub	sp, #40	; 0x28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	607a      	str	r2, [r7, #4]
 80023aa:	603b      	str	r3, [r7, #0]
 80023ac:	460b      	mov	r3, r1
 80023ae:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 80023bc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80023be:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 80023c0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80023c2:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 80023c4:	7afb      	ldrb	r3, [r7, #11]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	bf14      	ite	ne
 80023ca:	2301      	movne	r3, #1
 80023cc:	2300      	moveq	r3, #0
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	785b      	ldrb	r3, [r3, #1]
 80023dc:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	789b      	ldrb	r3, [r3, #2]
 80023e2:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	78db      	ldrb	r3, [r3, #3]
 80023e8:	767b      	strb	r3, [r7, #25]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 80023ea:	f107 0310 	add.w	r3, r7, #16
 80023ee:	4619      	mov	r1, r3
 80023f0:	4807      	ldr	r0, [pc, #28]	; (8002410 <WIFI_OpenClientConnection+0x70>)
 80023f2:	f7ff fa1f 	bl	8001834 <ES_WIFI_StartClientConnection>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d102      	bne.n	8002402 <WIFI_OpenClientConnection+0x62>
  {
    ret = WIFI_STATUS_OK;
 80023fc:	2300      	movs	r3, #0
 80023fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8002402:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002406:	4618      	mov	r0, r3
 8002408:	3728      	adds	r7, #40	; 0x28
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000140 	.word	0x20000140

08002414 <WIFI_SendData>:
  * @param  SentDatalen : (OUT) length actually sent
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af02      	add	r7, sp, #8
 800241a:	60b9      	str	r1, [r7, #8]
 800241c:	607b      	str	r3, [r7, #4]
 800241e:	4603      	mov	r3, r0
 8002420:	73fb      	strb	r3, [r7, #15]
 8002422:	4613      	mov	r3, r2
 8002424:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 800242a:	89ba      	ldrh	r2, [r7, #12]
 800242c:	7bf9      	ldrb	r1, [r7, #15]
 800242e:	6a3b      	ldr	r3, [r7, #32]
 8002430:	9301      	str	r3, [sp, #4]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	4613      	mov	r3, r2
 8002438:	68ba      	ldr	r2, [r7, #8]
 800243a:	4806      	ldr	r0, [pc, #24]	; (8002454 <WIFI_SendData+0x40>)
 800243c:	f7ff fae4 	bl	8001a08 <ES_WIFI_SendData>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 8002446:	2300      	movs	r3, #0
 8002448:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 800244a:	7dfb      	ldrb	r3, [r7, #23]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20000140 	.word	0x20000140

08002458 <BSP_LED_Init>:
  * @param  Led  LED to be initialized. 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b088      	sub	sp, #32
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10b      	bne.n	8002480 <BSP_LED_Init+0x28>
 8002468:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <BSP_LED_Init+0x58>)
 800246a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246c:	4a10      	ldr	r2, [pc, #64]	; (80024b0 <BSP_LED_Init+0x58>)
 800246e:	f043 0302 	orr.w	r3, r3, #2
 8002472:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002474:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <BSP_LED_Init+0x58>)
 8002476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8002480:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002484:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002486:	2301      	movs	r3, #1
 8002488:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800248e:	2302      	movs	r3, #2
 8002490:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	4a07      	ldr	r2, [pc, #28]	; (80024b4 <BSP_LED_Init+0x5c>)
 8002496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800249a:	f107 020c 	add.w	r2, r7, #12
 800249e:	4611      	mov	r1, r2
 80024a0:	4618      	mov	r0, r3
 80024a2:	f000 fe57 	bl	8003154 <HAL_GPIO_Init>
}
 80024a6:	bf00      	nop
 80024a8:	3720      	adds	r7, #32
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40021000 	.word	0x40021000
 80024b4:	20000000 	.word	0x20000000

080024b8 <BSP_LED_On>:
  * @param  Led  LED to be set on 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 80024c2:	79fb      	ldrb	r3, [r7, #7]
 80024c4:	4a06      	ldr	r2, [pc, #24]	; (80024e0 <BSP_LED_On+0x28>)
 80024c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024ce:	b291      	uxth	r1, r2
 80024d0:	2201      	movs	r2, #1
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 fffd 	bl	80034d2 <HAL_GPIO_WritePin>
}
 80024d8:	bf00      	nop
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	20000000 	.word	0x20000000

080024e4 <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08a      	sub	sp, #40	; 0x28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	6039      	str	r1, [r7, #0]
 80024ee:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10b      	bne.n	800250e <BSP_COM_Init+0x2a>
 80024f6:	4b2d      	ldr	r3, [pc, #180]	; (80025ac <BSP_COM_Init+0xc8>)
 80024f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fa:	4a2c      	ldr	r2, [pc, #176]	; (80025ac <BSP_COM_Init+0xc8>)
 80024fc:	f043 0302 	orr.w	r3, r3, #2
 8002500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002502:	4b2a      	ldr	r3, [pc, #168]	; (80025ac <BSP_COM_Init+0xc8>)
 8002504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	613b      	str	r3, [r7, #16]
 800250c:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10b      	bne.n	800252c <BSP_COM_Init+0x48>
 8002514:	4b25      	ldr	r3, [pc, #148]	; (80025ac <BSP_COM_Init+0xc8>)
 8002516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002518:	4a24      	ldr	r2, [pc, #144]	; (80025ac <BSP_COM_Init+0xc8>)
 800251a:	f043 0302 	orr.w	r3, r3, #2
 800251e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002520:	4b22      	ldr	r3, [pc, #136]	; (80025ac <BSP_COM_Init+0xc8>)
 8002522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10b      	bne.n	800254a <BSP_COM_Init+0x66>
 8002532:	4b1e      	ldr	r3, [pc, #120]	; (80025ac <BSP_COM_Init+0xc8>)
 8002534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002536:	4a1d      	ldr	r2, [pc, #116]	; (80025ac <BSP_COM_Init+0xc8>)
 8002538:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800253c:	6613      	str	r3, [r2, #96]	; 0x60
 800253e:	4b1b      	ldr	r3, [pc, #108]	; (80025ac <BSP_COM_Init+0xc8>)
 8002540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002546:	60bb      	str	r3, [r7, #8]
 8002548:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 800254a:	2340      	movs	r3, #64	; 0x40
 800254c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800254e:	2302      	movs	r3, #2
 8002550:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002552:	2302      	movs	r3, #2
 8002554:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 800255a:	2307      	movs	r3, #7
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	4a13      	ldr	r2, [pc, #76]	; (80025b0 <BSP_COM_Init+0xcc>)
 8002562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002566:	f107 0214 	add.w	r2, r7, #20
 800256a:	4611      	mov	r1, r2
 800256c:	4618      	mov	r0, r3
 800256e:	f000 fdf1 	bl	8003154 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8002572:	2380      	movs	r3, #128	; 0x80
 8002574:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002576:	2302      	movs	r3, #2
 8002578:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 800257a:	2307      	movs	r3, #7
 800257c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	4a0c      	ldr	r2, [pc, #48]	; (80025b4 <BSP_COM_Init+0xd0>)
 8002582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002586:	f107 0214 	add.w	r2, r7, #20
 800258a:	4611      	mov	r1, r2
 800258c:	4618      	mov	r0, r3
 800258e:	f000 fde1 	bl	8003154 <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	4a08      	ldr	r2, [pc, #32]	; (80025b8 <BSP_COM_Init+0xd4>)
 8002596:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 800259e:	6838      	ldr	r0, [r7, #0]
 80025a0:	f004 fde6 	bl	8007170 <HAL_UART_Init>
}
 80025a4:	bf00      	nop
 80025a6:	3728      	adds	r7, #40	; 0x28
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40021000 	.word	0x40021000
 80025b0:	20000008 	.word	0x20000008
 80025b4:	2000000c 	.word	0x2000000c
 80025b8:	20000004 	.word	0x20000004

080025bc <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08a      	sub	sp, #40	; 0x28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80025c4:	4b27      	ldr	r3, [pc, #156]	; (8002664 <I2Cx_MspInit+0xa8>)
 80025c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c8:	4a26      	ldr	r2, [pc, #152]	; (8002664 <I2Cx_MspInit+0xa8>)
 80025ca:	f043 0302 	orr.w	r3, r3, #2
 80025ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025d0:	4b24      	ldr	r3, [pc, #144]	; (8002664 <I2Cx_MspInit+0xa8>)
 80025d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	613b      	str	r3, [r7, #16]
 80025da:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80025dc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80025e0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80025e2:	2312      	movs	r3, #18
 80025e4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80025e6:	2301      	movs	r3, #1
 80025e8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ea:	2303      	movs	r3, #3
 80025ec:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80025ee:	2304      	movs	r3, #4
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80025f2:	f107 0314 	add.w	r3, r7, #20
 80025f6:	4619      	mov	r1, r3
 80025f8:	481b      	ldr	r0, [pc, #108]	; (8002668 <I2Cx_MspInit+0xac>)
 80025fa:	f000 fdab 	bl	8003154 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80025fe:	f107 0314 	add.w	r3, r7, #20
 8002602:	4619      	mov	r1, r3
 8002604:	4818      	ldr	r0, [pc, #96]	; (8002668 <I2Cx_MspInit+0xac>)
 8002606:	f000 fda5 	bl	8003154 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800260a:	4b16      	ldr	r3, [pc, #88]	; (8002664 <I2Cx_MspInit+0xa8>)
 800260c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260e:	4a15      	ldr	r2, [pc, #84]	; (8002664 <I2Cx_MspInit+0xa8>)
 8002610:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002614:	6593      	str	r3, [r2, #88]	; 0x58
 8002616:	4b13      	ldr	r3, [pc, #76]	; (8002664 <I2Cx_MspInit+0xa8>)
 8002618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002622:	4b10      	ldr	r3, [pc, #64]	; (8002664 <I2Cx_MspInit+0xa8>)
 8002624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002626:	4a0f      	ldr	r2, [pc, #60]	; (8002664 <I2Cx_MspInit+0xa8>)
 8002628:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800262c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800262e:	4b0d      	ldr	r3, [pc, #52]	; (8002664 <I2Cx_MspInit+0xa8>)
 8002630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002632:	4a0c      	ldr	r2, [pc, #48]	; (8002664 <I2Cx_MspInit+0xa8>)
 8002634:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002638:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800263a:	2200      	movs	r2, #0
 800263c:	210f      	movs	r1, #15
 800263e:	2021      	movs	r0, #33	; 0x21
 8002640:	f000 fd1d 	bl	800307e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002644:	2021      	movs	r0, #33	; 0x21
 8002646:	f000 fd36 	bl	80030b6 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800264a:	2200      	movs	r2, #0
 800264c:	210f      	movs	r1, #15
 800264e:	2022      	movs	r0, #34	; 0x22
 8002650:	f000 fd15 	bl	800307e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002654:	2022      	movs	r0, #34	; 0x22
 8002656:	f000 fd2e 	bl	80030b6 <HAL_NVIC_EnableIRQ>
}
 800265a:	bf00      	nop
 800265c:	3728      	adds	r7, #40	; 0x28
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40021000 	.word	0x40021000
 8002668:	48000400 	.word	0x48000400

0800266c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a12      	ldr	r2, [pc, #72]	; (80026c0 <I2Cx_Init+0x54>)
 8002678:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a11      	ldr	r2, [pc, #68]	; (80026c4 <I2Cx_Init+0x58>)
 800267e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f7ff ff89 	bl	80025bc <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 ff40 	bl	8003530 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80026b0:	2100      	movs	r1, #0
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f001 fcde 	bl	8004074 <HAL_I2CEx_ConfigAnalogFilter>
}
 80026b8:	bf00      	nop
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40005800 	.word	0x40005800
 80026c4:	00702681 	.word	0x00702681

080026c8 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b08a      	sub	sp, #40	; 0x28
 80026cc:	af04      	add	r7, sp, #16
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	4608      	mov	r0, r1
 80026d2:	4611      	mov	r1, r2
 80026d4:	461a      	mov	r2, r3
 80026d6:	4603      	mov	r3, r0
 80026d8:	72fb      	strb	r3, [r7, #11]
 80026da:	460b      	mov	r3, r1
 80026dc:	813b      	strh	r3, [r7, #8]
 80026de:	4613      	mov	r3, r2
 80026e0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80026e6:	7afb      	ldrb	r3, [r7, #11]
 80026e8:	b299      	uxth	r1, r3
 80026ea:	88f8      	ldrh	r0, [r7, #6]
 80026ec:	893a      	ldrh	r2, [r7, #8]
 80026ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026f2:	9302      	str	r3, [sp, #8]
 80026f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026f6:	9301      	str	r3, [sp, #4]
 80026f8:	6a3b      	ldr	r3, [r7, #32]
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	4603      	mov	r3, r0
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f001 f8fa 	bl	80038f8 <HAL_I2C_Mem_Read>
 8002704:	4603      	mov	r3, r0
 8002706:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002708:	7dfb      	ldrb	r3, [r7, #23]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d004      	beq.n	8002718 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800270e:	7afb      	ldrb	r3, [r7, #11]
 8002710:	4619      	mov	r1, r3
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 f832 	bl	800277c <I2Cx_Error>
  }
  return status;
 8002718:	7dfb      	ldrb	r3, [r7, #23]
}
 800271a:	4618      	mov	r0, r3
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b08a      	sub	sp, #40	; 0x28
 8002726:	af04      	add	r7, sp, #16
 8002728:	60f8      	str	r0, [r7, #12]
 800272a:	4608      	mov	r0, r1
 800272c:	4611      	mov	r1, r2
 800272e:	461a      	mov	r2, r3
 8002730:	4603      	mov	r3, r0
 8002732:	72fb      	strb	r3, [r7, #11]
 8002734:	460b      	mov	r3, r1
 8002736:	813b      	strh	r3, [r7, #8]
 8002738:	4613      	mov	r3, r2
 800273a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800273c:	2300      	movs	r3, #0
 800273e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002740:	7afb      	ldrb	r3, [r7, #11]
 8002742:	b299      	uxth	r1, r3
 8002744:	88f8      	ldrh	r0, [r7, #6]
 8002746:	893a      	ldrh	r2, [r7, #8]
 8002748:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800274c:	9302      	str	r3, [sp, #8]
 800274e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002750:	9301      	str	r3, [sp, #4]
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	4603      	mov	r3, r0
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f000 ffb9 	bl	80036d0 <HAL_I2C_Mem_Write>
 800275e:	4603      	mov	r3, r0
 8002760:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002762:	7dfb      	ldrb	r3, [r7, #23]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d004      	beq.n	8002772 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002768:	7afb      	ldrb	r3, [r7, #11]
 800276a:	4619      	mov	r1, r3
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f000 f805 	bl	800277c <I2Cx_Error>
  }
  return status;
 8002772:	7dfb      	ldrb	r3, [r7, #23]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 ff60 	bl	800364e <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7ff ff6c 	bl	800266c <I2Cx_Init>
}
 8002794:	bf00      	nop
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80027a0:	4802      	ldr	r0, [pc, #8]	; (80027ac <SENSOR_IO_Init+0x10>)
 80027a2:	f7ff ff63 	bl	800266c <I2Cx_Init>
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20000a40 	.word	0x20000a40

080027b0 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af02      	add	r7, sp, #8
 80027b6:	4603      	mov	r3, r0
 80027b8:	71fb      	strb	r3, [r7, #7]
 80027ba:	460b      	mov	r3, r1
 80027bc:	71bb      	strb	r3, [r7, #6]
 80027be:	4613      	mov	r3, r2
 80027c0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80027c2:	79bb      	ldrb	r3, [r7, #6]
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	79f9      	ldrb	r1, [r7, #7]
 80027c8:	2301      	movs	r3, #1
 80027ca:	9301      	str	r3, [sp, #4]
 80027cc:	1d7b      	adds	r3, r7, #5
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	2301      	movs	r3, #1
 80027d2:	4803      	ldr	r0, [pc, #12]	; (80027e0 <SENSOR_IO_Write+0x30>)
 80027d4:	f7ff ffa5 	bl	8002722 <I2Cx_WriteMultiple>
}
 80027d8:	bf00      	nop
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	20000a40 	.word	0x20000a40

080027e4 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af02      	add	r7, sp, #8
 80027ea:	4603      	mov	r3, r0
 80027ec:	460a      	mov	r2, r1
 80027ee:	71fb      	strb	r3, [r7, #7]
 80027f0:	4613      	mov	r3, r2
 80027f2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80027f4:	2300      	movs	r3, #0
 80027f6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80027f8:	79bb      	ldrb	r3, [r7, #6]
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	79f9      	ldrb	r1, [r7, #7]
 80027fe:	2301      	movs	r3, #1
 8002800:	9301      	str	r3, [sp, #4]
 8002802:	f107 030f 	add.w	r3, r7, #15
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	2301      	movs	r3, #1
 800280a:	4804      	ldr	r0, [pc, #16]	; (800281c <SENSOR_IO_Read+0x38>)
 800280c:	f7ff ff5c 	bl	80026c8 <I2Cx_ReadMultiple>

  return read_value;
 8002810:	7bfb      	ldrb	r3, [r7, #15]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20000a40 	.word	0x20000a40

08002820 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af02      	add	r7, sp, #8
 8002826:	603a      	str	r2, [r7, #0]
 8002828:	461a      	mov	r2, r3
 800282a:	4603      	mov	r3, r0
 800282c:	71fb      	strb	r3, [r7, #7]
 800282e:	460b      	mov	r3, r1
 8002830:	71bb      	strb	r3, [r7, #6]
 8002832:	4613      	mov	r3, r2
 8002834:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002836:	79bb      	ldrb	r3, [r7, #6]
 8002838:	b29a      	uxth	r2, r3
 800283a:	79f9      	ldrb	r1, [r7, #7]
 800283c:	88bb      	ldrh	r3, [r7, #4]
 800283e:	9301      	str	r3, [sp, #4]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	2301      	movs	r3, #1
 8002846:	4804      	ldr	r0, [pc, #16]	; (8002858 <SENSOR_IO_ReadMultiple+0x38>)
 8002848:	f7ff ff3e 	bl	80026c8 <I2Cx_ReadMultiple>
 800284c:	4603      	mov	r3, r0
 800284e:	b29b      	uxth	r3, r3
}
 8002850:	4618      	mov	r0, r3
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	20000a40 	.word	0x20000a40

0800285c <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8002862:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <BSP_HSENSOR_Init+0x38>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	20be      	movs	r0, #190	; 0xbe
 8002868:	4798      	blx	r3
 800286a:	4603      	mov	r3, r0
 800286c:	2bbc      	cmp	r3, #188	; 0xbc
 800286e:	d002      	beq.n	8002876 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	607b      	str	r3, [r7, #4]
 8002874:	e009      	b.n	800288a <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8002876:	4b08      	ldr	r3, [pc, #32]	; (8002898 <BSP_HSENSOR_Init+0x3c>)
 8002878:	4a06      	ldr	r2, [pc, #24]	; (8002894 <BSP_HSENSOR_Init+0x38>)
 800287a:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 800287c:	4b06      	ldr	r3, [pc, #24]	; (8002898 <BSP_HSENSOR_Init+0x3c>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	20be      	movs	r0, #190	; 0xbe
 8002884:	4798      	blx	r3
    ret = HSENSOR_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800288a:	687b      	ldr	r3, [r7, #4]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	20000010 	.word	0x20000010
 8002898:	20000b10 	.word	0x20000b10

0800289c <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80028a0:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <BSP_HSENSOR_ReadHumidity+0x14>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	20be      	movs	r0, #190	; 0xbe
 80028a8:	4798      	blx	r3
 80028aa:	4603      	mov	r3, r0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	20000b10 	.word	0x20000b10

080028b4 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 80028ba:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <BSP_PSENSOR_Init+0x38>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	20ba      	movs	r0, #186	; 0xba
 80028c0:	4798      	blx	r3
 80028c2:	4603      	mov	r3, r0
 80028c4:	2bb1      	cmp	r3, #177	; 0xb1
 80028c6:	d002      	beq.n	80028ce <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	607b      	str	r3, [r7, #4]
 80028cc:	e009      	b.n	80028e2 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 80028ce:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <BSP_PSENSOR_Init+0x3c>)
 80028d0:	4a06      	ldr	r2, [pc, #24]	; (80028ec <BSP_PSENSOR_Init+0x38>)
 80028d2:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 80028d4:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <BSP_PSENSOR_Init+0x3c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	20ba      	movs	r0, #186	; 0xba
 80028dc:	4798      	blx	r3
    ret = PSENSOR_OK;
 80028de:	2300      	movs	r3, #0
 80028e0:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80028e2:	687b      	ldr	r3, [r7, #4]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	2000002c 	.word	0x2000002c
 80028f0:	20000b14 	.word	0x20000b14

080028f4 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 80028f8:	4b03      	ldr	r3, [pc, #12]	; (8002908 <BSP_PSENSOR_ReadPressure+0x14>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	20ba      	movs	r0, #186	; 0xba
 8002900:	4798      	blx	r3
 8002902:	4603      	mov	r3, r0
}
 8002904:	4618      	mov	r0, r3
 8002906:	bd80      	pop	{r7, pc}
 8002908:	20000b14 	.word	0x20000b14

0800290c <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8002916:	4b09      	ldr	r3, [pc, #36]	; (800293c <BSP_TSENSOR_Init+0x30>)
 8002918:	4a09      	ldr	r2, [pc, #36]	; (8002940 <BSP_TSENSOR_Init+0x34>)
 800291a:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 800291c:	f7ff ff3e 	bl	800279c <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8002920:	4b06      	ldr	r3, [pc, #24]	; (800293c <BSP_TSENSOR_Init+0x30>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2100      	movs	r1, #0
 8002928:	20be      	movs	r0, #190	; 0xbe
 800292a:	4798      	blx	r3

  ret = TSENSOR_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8002930:	79fb      	ldrb	r3, [r7, #7]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20000b18 	.word	0x20000b18
 8002940:	2000001c 	.word	0x2000001c

08002944 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8002948:	4b03      	ldr	r3, [pc, #12]	; (8002958 <BSP_TSENSOR_ReadTemp+0x14>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	20be      	movs	r0, #190	; 0xbe
 8002950:	4798      	blx	r3
 8002952:	4603      	mov	r3, r0
}
 8002954:	4618      	mov	r0, r3
 8002956:	bd80      	pop	{r7, pc}
 8002958:	20000b18 	.word	0x20000b18

0800295c <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002966:	88fb      	ldrh	r3, [r7, #6]
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2120      	movs	r1, #32
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff ff39 	bl	80027e4 <SENSOR_IO_Read>
 8002972:	4603      	mov	r3, r0
 8002974:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002976:	7bfb      	ldrb	r3, [r7, #15]
 8002978:	f023 0304 	bic.w	r3, r3, #4
 800297c:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800297e:	7bfb      	ldrb	r3, [r7, #15]
 8002980:	f043 0304 	orr.w	r3, r3, #4
 8002984:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002986:	7bfb      	ldrb	r3, [r7, #15]
 8002988:	f023 0303 	bic.w	r3, r3, #3
 800298c:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800298e:	7bfb      	ldrb	r3, [r7, #15]
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002996:	7bfb      	ldrb	r3, [r7, #15]
 8002998:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800299c:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800299e:	88fb      	ldrh	r3, [r7, #6]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	7bfa      	ldrb	r2, [r7, #15]
 80029a4:	2120      	movs	r1, #32
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff ff02 	bl	80027b0 <SENSOR_IO_Write>
}
 80029ac:	bf00      	nop
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80029be:	2300      	movs	r3, #0
 80029c0:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 80029c2:	f7ff feeb 	bl	800279c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 80029c6:	88fb      	ldrh	r3, [r7, #6]
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	210f      	movs	r1, #15
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff ff09 	bl	80027e4 <SENSOR_IO_Read>
 80029d2:	4603      	mov	r3, r0
 80029d4:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80029d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 80029e0:	b590      	push	{r4, r7, lr}
 80029e2:	b089      	sub	sp, #36	; 0x24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 80029ea:	88fb      	ldrh	r3, [r7, #6]
 80029ec:	b2d8      	uxtb	r0, r3
 80029ee:	f107 020c 	add.w	r2, r7, #12
 80029f2:	2302      	movs	r3, #2
 80029f4:	21b0      	movs	r1, #176	; 0xb0
 80029f6:	f7ff ff13 	bl	8002820 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 80029fa:	7b3b      	ldrb	r3, [r7, #12]
 80029fc:	085b      	lsrs	r3, r3, #1
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8002a02:	7b7b      	ldrb	r3, [r7, #13]
 8002a04:	085b      	lsrs	r3, r3, #1
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8002a0a:	88fb      	ldrh	r3, [r7, #6]
 8002a0c:	b2d8      	uxtb	r0, r3
 8002a0e:	f107 020c 	add.w	r2, r7, #12
 8002a12:	2302      	movs	r3, #2
 8002a14:	21b6      	movs	r1, #182	; 0xb6
 8002a16:	f7ff ff03 	bl	8002820 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002a1a:	7b7b      	ldrb	r3, [r7, #13]
 8002a1c:	021b      	lsls	r3, r3, #8
 8002a1e:	b21a      	sxth	r2, r3
 8002a20:	7b3b      	ldrb	r3, [r7, #12]
 8002a22:	b21b      	sxth	r3, r3
 8002a24:	4313      	orrs	r3, r2
 8002a26:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8002a28:	88fb      	ldrh	r3, [r7, #6]
 8002a2a:	b2d8      	uxtb	r0, r3
 8002a2c:	f107 020c 	add.w	r2, r7, #12
 8002a30:	2302      	movs	r3, #2
 8002a32:	21ba      	movs	r1, #186	; 0xba
 8002a34:	f7ff fef4 	bl	8002820 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002a38:	7b7b      	ldrb	r3, [r7, #13]
 8002a3a:	021b      	lsls	r3, r3, #8
 8002a3c:	b21a      	sxth	r2, r3
 8002a3e:	7b3b      	ldrb	r3, [r7, #12]
 8002a40:	b21b      	sxth	r3, r3
 8002a42:	4313      	orrs	r3, r2
 8002a44:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8002a46:	88fb      	ldrh	r3, [r7, #6]
 8002a48:	b2d8      	uxtb	r0, r3
 8002a4a:	f107 020c 	add.w	r2, r7, #12
 8002a4e:	2302      	movs	r3, #2
 8002a50:	21a8      	movs	r1, #168	; 0xa8
 8002a52:	f7ff fee5 	bl	8002820 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002a56:	7b7b      	ldrb	r3, [r7, #13]
 8002a58:	021b      	lsls	r3, r3, #8
 8002a5a:	b21a      	sxth	r2, r3
 8002a5c:	7b3b      	ldrb	r3, [r7, #12]
 8002a5e:	b21b      	sxth	r3, r3
 8002a60:	4313      	orrs	r3, r2
 8002a62:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8002a64:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002a68:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fd fea4 	bl	80007bc <__aeabi_i2f>
 8002a74:	4604      	mov	r4, r0
 8002a76:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002a7a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7fd fe9b 	bl	80007bc <__aeabi_i2f>
 8002a86:	4603      	mov	r3, r0
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4620      	mov	r0, r4
 8002a8c:	f7fd feea 	bl	8000864 <__aeabi_fmul>
 8002a90:	4603      	mov	r3, r0
 8002a92:	461c      	mov	r4, r3
 8002a94:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002a98:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7fd fe8c 	bl	80007bc <__aeabi_i2f>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4620      	mov	r0, r4
 8002aaa:	f7fd ff8f 	bl	80009cc <__aeabi_fdiv>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	461c      	mov	r4, r3
 8002ab2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fd fe80 	bl	80007bc <__aeabi_i2f>
 8002abc:	4603      	mov	r3, r0
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4620      	mov	r0, r4
 8002ac2:	f7fd fdc7 	bl	8000654 <__addsf3>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	613b      	str	r3, [r7, #16]
  tmp_f *= 10.0f;
 8002aca:	4912      	ldr	r1, [pc, #72]	; (8002b14 <HTS221_H_ReadHumidity+0x134>)
 8002acc:	6938      	ldr	r0, [r7, #16]
 8002ace:	f7fd fec9 	bl	8000864 <__aeabi_fmul>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	613b      	str	r3, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8002ad6:	4910      	ldr	r1, [pc, #64]	; (8002b18 <HTS221_H_ReadHumidity+0x138>)
 8002ad8:	6938      	ldr	r0, [r7, #16]
 8002ada:	f7fe f87f 	bl	8000bdc <__aeabi_fcmpgt>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <HTS221_H_ReadHumidity+0x108>
 8002ae4:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <HTS221_H_ReadHumidity+0x138>)
 8002ae6:	e00b      	b.n	8002b00 <HTS221_H_ReadHumidity+0x120>
        : tmp_f;
 8002ae8:	f04f 0100 	mov.w	r1, #0
 8002aec:	6938      	ldr	r0, [r7, #16]
 8002aee:	f7fe f857 	bl	8000ba0 <__aeabi_fcmplt>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d002      	beq.n	8002afe <HTS221_H_ReadHumidity+0x11e>
 8002af8:	f04f 0300 	mov.w	r3, #0
 8002afc:	e000      	b.n	8002b00 <HTS221_H_ReadHumidity+0x120>
 8002afe:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8002b00:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8002b02:	4904      	ldr	r1, [pc, #16]	; (8002b14 <HTS221_H_ReadHumidity+0x134>)
 8002b04:	6938      	ldr	r0, [r7, #16]
 8002b06:	f7fd ff61 	bl	80009cc <__aeabi_fdiv>
 8002b0a:	4603      	mov	r3, r0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3724      	adds	r7, #36	; 0x24
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd90      	pop	{r4, r7, pc}
 8002b14:	41200000 	.word	0x41200000
 8002b18:	447a0000 	.word	0x447a0000

08002b1c <HTS221_T_Init>:
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)

{  
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	6039      	str	r1, [r7, #0]
 8002b26:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002b28:	88fb      	ldrh	r3, [r7, #6]
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2120      	movs	r1, #32
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff fe58 	bl	80027e4 <SENSOR_IO_Read>
 8002b34:	4603      	mov	r3, r0
 8002b36:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	f023 0304 	bic.w	r3, r3, #4
 8002b3e:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
 8002b42:	f043 0304 	orr.w	r3, r3, #4
 8002b46:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
 8002b4a:	f023 0303 	bic.w	r3, r3, #3
 8002b4e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
 8002b52:	f043 0301 	orr.w	r3, r3, #1
 8002b56:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
 8002b5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b5e:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002b60:	88fb      	ldrh	r3, [r7, #6]
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	7bfa      	ldrb	r2, [r7, #15]
 8002b66:	2120      	movs	r1, #32
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff fe21 	bl	80027b0 <SENSOR_IO_Write>
}
 8002b6e:	bf00      	nop
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8002b76:	b590      	push	{r4, r7, lr}
 8002b78:	b089      	sub	sp, #36	; 0x24
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8002b80:	88fb      	ldrh	r3, [r7, #6]
 8002b82:	b2d8      	uxtb	r0, r3
 8002b84:	f107 0208 	add.w	r2, r7, #8
 8002b88:	2302      	movs	r3, #2
 8002b8a:	21b2      	movs	r1, #178	; 0xb2
 8002b8c:	f7ff fe48 	bl	8002820 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8002b90:	88fb      	ldrh	r3, [r7, #6]
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2135      	movs	r1, #53	; 0x35
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff fe24 	bl	80027e4 <SENSOR_IO_Read>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8002ba0:	7ffb      	ldrb	r3, [r7, #31]
 8002ba2:	021b      	lsls	r3, r3, #8
 8002ba4:	b21b      	sxth	r3, r3
 8002ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002baa:	b21a      	sxth	r2, r3
 8002bac:	7a3b      	ldrb	r3, [r7, #8]
 8002bae:	b21b      	sxth	r3, r3
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8002bb4:	7ffb      	ldrb	r3, [r7, #31]
 8002bb6:	019b      	lsls	r3, r3, #6
 8002bb8:	b21b      	sxth	r3, r3
 8002bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bbe:	b21a      	sxth	r2, r3
 8002bc0:	7a7b      	ldrb	r3, [r7, #9]
 8002bc2:	b21b      	sxth	r3, r3
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8002bc8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002bcc:	10db      	asrs	r3, r3, #3
 8002bce:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8002bd0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002bd4:	10db      	asrs	r3, r3, #3
 8002bd6:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002bd8:	88fb      	ldrh	r3, [r7, #6]
 8002bda:	b2d8      	uxtb	r0, r3
 8002bdc:	f107 0208 	add.w	r2, r7, #8
 8002be0:	2304      	movs	r3, #4
 8002be2:	21bc      	movs	r1, #188	; 0xbc
 8002be4:	f7ff fe1c 	bl	8002820 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002be8:	7a7b      	ldrb	r3, [r7, #9]
 8002bea:	021b      	lsls	r3, r3, #8
 8002bec:	b21a      	sxth	r2, r3
 8002bee:	7a3b      	ldrb	r3, [r7, #8]
 8002bf0:	b21b      	sxth	r3, r3
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8002bf6:	7afb      	ldrb	r3, [r7, #11]
 8002bf8:	021b      	lsls	r3, r3, #8
 8002bfa:	b21a      	sxth	r2, r3
 8002bfc:	7abb      	ldrb	r3, [r7, #10]
 8002bfe:	b21b      	sxth	r3, r3
 8002c00:	4313      	orrs	r3, r2
 8002c02:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002c04:	88fb      	ldrh	r3, [r7, #6]
 8002c06:	b2d8      	uxtb	r0, r3
 8002c08:	f107 0208 	add.w	r2, r7, #8
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	21aa      	movs	r1, #170	; 0xaa
 8002c10:	f7ff fe06 	bl	8002820 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002c14:	7a7b      	ldrb	r3, [r7, #9]
 8002c16:	021b      	lsls	r3, r3, #8
 8002c18:	b21a      	sxth	r2, r3
 8002c1a:	7a3b      	ldrb	r3, [r7, #8]
 8002c1c:	b21b      	sxth	r3, r3
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8002c22:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002c26:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fd fdc5 	bl	80007bc <__aeabi_i2f>
 8002c32:	4604      	mov	r4, r0
 8002c34:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002c38:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fd fdbc 	bl	80007bc <__aeabi_i2f>
 8002c44:	4603      	mov	r3, r0
 8002c46:	4619      	mov	r1, r3
 8002c48:	4620      	mov	r0, r4
 8002c4a:	f7fd fe0b 	bl	8000864 <__aeabi_fmul>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	461c      	mov	r4, r3
 8002c52:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002c56:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fd fdad 	bl	80007bc <__aeabi_i2f>
 8002c62:	4603      	mov	r3, r0
 8002c64:	4619      	mov	r1, r3
 8002c66:	4620      	mov	r0, r4
 8002c68:	f7fd feb0 	bl	80009cc <__aeabi_fdiv>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	461c      	mov	r4, r3
 8002c70:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7fd fda1 	bl	80007bc <__aeabi_i2f>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4620      	mov	r0, r4
 8002c80:	f7fd fce8 	bl	8000654 <__addsf3>
 8002c84:	4603      	mov	r3, r0
 8002c86:	60fb      	str	r3, [r7, #12]

  return tmp_f;
 8002c88:	68fb      	ldr	r3, [r7, #12]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3724      	adds	r7, #36	; 0x24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd90      	pop	{r4, r7, pc}

08002c92 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b082      	sub	sp, #8
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	4603      	mov	r3, r0
 8002c9a:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8002c9c:	88fb      	ldrh	r3, [r7, #6]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 f876 	bl	8002d90 <LPS22HB_Init>
}
 8002ca4:	bf00      	nop
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002cba:	f7ff fd6f 	bl	800279c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8002cbe:	88fb      	ldrh	r3, [r7, #6]
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	210f      	movs	r1, #15
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff fd8d 	bl	80027e4 <SENSOR_IO_Read>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8002cd8:	b590      	push	{r4, r7, lr}
 8002cda:	b087      	sub	sp, #28
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	74fb      	strb	r3, [r7, #19]
 8002cea:	e013      	b.n	8002d14 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8002cec:	88fb      	ldrh	r3, [r7, #6]
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	7cfb      	ldrb	r3, [r7, #19]
 8002cf2:	3328      	adds	r3, #40	; 0x28
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	7cfc      	ldrb	r4, [r7, #19]
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	f7ff fd72 	bl	80027e4 <SENSOR_IO_Read>
 8002d00:	4603      	mov	r3, r0
 8002d02:	461a      	mov	r2, r3
 8002d04:	f104 0318 	add.w	r3, r4, #24
 8002d08:	443b      	add	r3, r7
 8002d0a:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8002d0e:	7cfb      	ldrb	r3, [r7, #19]
 8002d10:	3301      	adds	r3, #1
 8002d12:	74fb      	strb	r3, [r7, #19]
 8002d14:	7cfb      	ldrb	r3, [r7, #19]
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d9e8      	bls.n	8002cec <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	74fb      	strb	r3, [r7, #19]
 8002d1e:	e00f      	b.n	8002d40 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8002d20:	7cfb      	ldrb	r3, [r7, #19]
 8002d22:	3318      	adds	r3, #24
 8002d24:	443b      	add	r3, r7
 8002d26:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	7cfb      	ldrb	r3, [r7, #19]
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8002d3a:	7cfb      	ldrb	r3, [r7, #19]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	74fb      	strb	r3, [r7, #19]
 8002d40:	7cfb      	ldrb	r3, [r7, #19]
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d9ec      	bls.n	8002d20 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d56:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2264      	movs	r2, #100	; 0x64
 8002d60:	fb02 f303 	mul.w	r3, r2, r3
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	da01      	bge.n	8002d6c <LPS22HB_P_ReadPressure+0x94>
 8002d68:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8002d6c:	131b      	asrs	r3, r3, #12
 8002d6e:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f7fd fd23 	bl	80007bc <__aeabi_i2f>
 8002d76:	4603      	mov	r3, r0
 8002d78:	4904      	ldr	r1, [pc, #16]	; (8002d8c <LPS22HB_P_ReadPressure+0xb4>)
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fd fe26 	bl	80009cc <__aeabi_fdiv>
 8002d80:	4603      	mov	r3, r0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	371c      	adds	r7, #28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd90      	pop	{r4, r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	42c80000 	.word	0x42c80000

08002d90 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8002d9a:	88fb      	ldrh	r3, [r7, #6]
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	211a      	movs	r1, #26
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff fd1f 	bl	80027e4 <SENSOR_IO_Read>
 8002da6:	4603      	mov	r3, r0
 8002da8:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
 8002dac:	f023 0301 	bic.w	r3, r3, #1
 8002db0:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8002db2:	7bfb      	ldrb	r3, [r7, #15]
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8002dba:	88fb      	ldrh	r3, [r7, #6]
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	7bfa      	ldrb	r2, [r7, #15]
 8002dc0:	211a      	movs	r1, #26
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff fcf4 	bl	80027b0 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8002dc8:	88fb      	ldrh	r3, [r7, #6]
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2110      	movs	r1, #16
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff fd08 	bl	80027e4 <SENSOR_IO_Read>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
 8002dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dde:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
 8002de2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002de6:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8002de8:	7bfb      	ldrb	r3, [r7, #15]
 8002dea:	f023 0302 	bic.w	r3, r3, #2
 8002dee:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	f043 0302 	orr.w	r3, r3, #2
 8002df6:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8002df8:	88fb      	ldrh	r3, [r7, #6]
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	7bfa      	ldrb	r2, [r7, #15]
 8002dfe:	2110      	movs	r1, #16
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff fcd5 	bl	80027b0 <SENSOR_IO_Write>
}  
 8002e06:	bf00      	nop
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
	...

08002e10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002e10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e14:	f005 fa9c 	bl	8008350 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002e18:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002e1a:	e003      	b.n	8002e24 <LoopCopyDataInit>

08002e1c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002e1c:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002e1e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002e20:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002e22:	3104      	adds	r1, #4

08002e24 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002e24:	480a      	ldr	r0, [pc, #40]	; (8002e50 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002e26:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002e28:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002e2a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002e2c:	d3f6      	bcc.n	8002e1c <CopyDataInit>
	ldr	r2, =_sbss
 8002e2e:	4a0a      	ldr	r2, [pc, #40]	; (8002e58 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002e30:	e002      	b.n	8002e38 <LoopFillZerobss>

08002e32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002e32:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002e34:	f842 3b04 	str.w	r3, [r2], #4

08002e38 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002e38:	4b08      	ldr	r3, [pc, #32]	; (8002e5c <LoopForever+0x16>)
	cmp	r2, r3
 8002e3a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002e3c:	d3f9      	bcc.n	8002e32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e3e:	f005 fab9 	bl	80083b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e42:	f004 fee7 	bl	8007c14 <main>

08002e46 <LoopForever>:

LoopForever:
    b LoopForever
 8002e46:	e7fe      	b.n	8002e46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002e48:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002e4c:	0800a520 	.word	0x0800a520
	ldr	r0, =_sdata
 8002e50:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002e54:	200000b0 	.word	0x200000b0
	ldr	r2, =_sbss
 8002e58:	200000b0 	.word	0x200000b0
	ldr	r3, = _ebss
 8002e5c:	20000b80 	.word	0x20000b80

08002e60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e60:	e7fe      	b.n	8002e60 <ADC1_2_IRQHandler>

08002e62 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b082      	sub	sp, #8
 8002e66:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e6c:	2003      	movs	r0, #3
 8002e6e:	f000 f8fb 	bl	8003068 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e72:	200f      	movs	r0, #15
 8002e74:	f004 f8e4 	bl	8007040 <HAL_InitTick>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d002      	beq.n	8002e84 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	71fb      	strb	r3, [r7, #7]
 8002e82:	e001      	b.n	8002e88 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e84:	f001 f940 	bl	8004108 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e88:	79fb      	ldrb	r3, [r7, #7]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e98:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <HAL_IncTick+0x1c>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <HAL_IncTick+0x20>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	4a03      	ldr	r2, [pc, #12]	; (8002eb4 <HAL_IncTick+0x20>)
 8002ea6:	6013      	str	r3, [r2, #0]
}
 8002ea8:	bf00      	nop
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr
 8002eb0:	2000003c 	.word	0x2000003c
 8002eb4:	20000b1c 	.word	0x20000b1c

08002eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  return uwTick;
 8002ebc:	4b02      	ldr	r3, [pc, #8]	; (8002ec8 <HAL_GetTick+0x10>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr
 8002ec8:	20000b1c 	.word	0x20000b1c

08002ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ed4:	f7ff fff0 	bl	8002eb8 <HAL_GetTick>
 8002ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee4:	d005      	beq.n	8002ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002ee6:	4b0a      	ldr	r3, [pc, #40]	; (8002f10 <HAL_Delay+0x44>)
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	461a      	mov	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4413      	add	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ef2:	bf00      	nop
 8002ef4:	f7ff ffe0 	bl	8002eb8 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d8f7      	bhi.n	8002ef4 <HAL_Delay+0x28>
  {
  }
}
 8002f04:	bf00      	nop
 8002f06:	bf00      	nop
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	2000003c 	.word	0x2000003c

08002f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f24:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <__NVIC_SetPriorityGrouping+0x44>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f30:	4013      	ands	r3, r2
 8002f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f46:	4a04      	ldr	r2, [pc, #16]	; (8002f58 <__NVIC_SetPriorityGrouping+0x44>)
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	60d3      	str	r3, [r2, #12]
}
 8002f4c:	bf00      	nop
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	e000ed00 	.word	0xe000ed00

08002f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f60:	4b04      	ldr	r3, [pc, #16]	; (8002f74 <__NVIC_GetPriorityGrouping+0x18>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	0a1b      	lsrs	r3, r3, #8
 8002f66:	f003 0307 	and.w	r3, r3, #7
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bc80      	pop	{r7}
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	e000ed00 	.word	0xe000ed00

08002f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	db0b      	blt.n	8002fa2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f8a:	79fb      	ldrb	r3, [r7, #7]
 8002f8c:	f003 021f 	and.w	r2, r3, #31
 8002f90:	4906      	ldr	r1, [pc, #24]	; (8002fac <__NVIC_EnableIRQ+0x34>)
 8002f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f96:	095b      	lsrs	r3, r3, #5
 8002f98:	2001      	movs	r0, #1
 8002f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr
 8002fac:	e000e100 	.word	0xe000e100

08002fb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	6039      	str	r1, [r7, #0]
 8002fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	db0a      	blt.n	8002fda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	490c      	ldr	r1, [pc, #48]	; (8002ffc <__NVIC_SetPriority+0x4c>)
 8002fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fce:	0112      	lsls	r2, r2, #4
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fd8:	e00a      	b.n	8002ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	4908      	ldr	r1, [pc, #32]	; (8003000 <__NVIC_SetPriority+0x50>)
 8002fe0:	79fb      	ldrb	r3, [r7, #7]
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	3b04      	subs	r3, #4
 8002fe8:	0112      	lsls	r2, r2, #4
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	440b      	add	r3, r1
 8002fee:	761a      	strb	r2, [r3, #24]
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bc80      	pop	{r7}
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	e000e100 	.word	0xe000e100
 8003000:	e000ed00 	.word	0xe000ed00

08003004 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003004:	b480      	push	{r7}
 8003006:	b089      	sub	sp, #36	; 0x24
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	f1c3 0307 	rsb	r3, r3, #7
 800301e:	2b04      	cmp	r3, #4
 8003020:	bf28      	it	cs
 8003022:	2304      	movcs	r3, #4
 8003024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	3304      	adds	r3, #4
 800302a:	2b06      	cmp	r3, #6
 800302c:	d902      	bls.n	8003034 <NVIC_EncodePriority+0x30>
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	3b03      	subs	r3, #3
 8003032:	e000      	b.n	8003036 <NVIC_EncodePriority+0x32>
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003038:	f04f 32ff 	mov.w	r2, #4294967295
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	43da      	mvns	r2, r3
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	401a      	ands	r2, r3
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800304c:	f04f 31ff 	mov.w	r1, #4294967295
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	fa01 f303 	lsl.w	r3, r1, r3
 8003056:	43d9      	mvns	r1, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800305c:	4313      	orrs	r3, r2
         );
}
 800305e:	4618      	mov	r0, r3
 8003060:	3724      	adds	r7, #36	; 0x24
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr

08003068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f7ff ff4f 	bl	8002f14 <__NVIC_SetPriorityGrouping>
}
 8003076:	bf00      	nop
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b086      	sub	sp, #24
 8003082:	af00      	add	r7, sp, #0
 8003084:	4603      	mov	r3, r0
 8003086:	60b9      	str	r1, [r7, #8]
 8003088:	607a      	str	r2, [r7, #4]
 800308a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800308c:	2300      	movs	r3, #0
 800308e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003090:	f7ff ff64 	bl	8002f5c <__NVIC_GetPriorityGrouping>
 8003094:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	68b9      	ldr	r1, [r7, #8]
 800309a:	6978      	ldr	r0, [r7, #20]
 800309c:	f7ff ffb2 	bl	8003004 <NVIC_EncodePriority>
 80030a0:	4602      	mov	r2, r0
 80030a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030a6:	4611      	mov	r1, r2
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff ff81 	bl	8002fb0 <__NVIC_SetPriority>
}
 80030ae:	bf00      	nop
 80030b0:	3718      	adds	r7, #24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b082      	sub	sp, #8
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	4603      	mov	r3, r0
 80030be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff ff57 	bl	8002f78 <__NVIC_EnableIRQ>
}
 80030ca:	bf00      	nop
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b084      	sub	sp, #16
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d005      	beq.n	80030f6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2204      	movs	r2, #4
 80030ee:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	73fb      	strb	r3, [r7, #15]
 80030f4:	e029      	b.n	800314a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 020e 	bic.w	r2, r2, #14
 8003104:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 0201 	bic.w	r2, r2, #1
 8003114:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311a:	f003 021c 	and.w	r2, r3, #28
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	2101      	movs	r1, #1
 8003124:	fa01 f202 	lsl.w	r2, r1, r2
 8003128:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313e:	2b00      	cmp	r3, #0
 8003140:	d003      	beq.n	800314a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	4798      	blx	r3
    }
  }
  return status;
 800314a:	7bfb      	ldrb	r3, [r7, #15]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003154:	b480      	push	{r7}
 8003156:	b087      	sub	sp, #28
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800315e:	2300      	movs	r3, #0
 8003160:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003162:	e17f      	b.n	8003464 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	2101      	movs	r1, #1
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	fa01 f303 	lsl.w	r3, r1, r3
 8003170:	4013      	ands	r3, r2
 8003172:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2b00      	cmp	r3, #0
 8003178:	f000 8171 	beq.w	800345e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f003 0303 	and.w	r3, r3, #3
 8003184:	2b01      	cmp	r3, #1
 8003186:	d005      	beq.n	8003194 <HAL_GPIO_Init+0x40>
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f003 0303 	and.w	r3, r3, #3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d130      	bne.n	80031f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	2203      	movs	r2, #3
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	43db      	mvns	r3, r3
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4013      	ands	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	68da      	ldr	r2, [r3, #12]
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031ca:	2201      	movs	r2, #1
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43db      	mvns	r3, r3
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	4013      	ands	r3, r2
 80031d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	091b      	lsrs	r3, r3, #4
 80031e0:	f003 0201 	and.w	r2, r3, #1
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f003 0303 	and.w	r3, r3, #3
 80031fe:	2b03      	cmp	r3, #3
 8003200:	d118      	bne.n	8003234 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003206:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003208:	2201      	movs	r2, #1
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	43db      	mvns	r3, r3
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	4013      	ands	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	08db      	lsrs	r3, r3, #3
 800321e:	f003 0201 	and.w	r2, r3, #1
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	4313      	orrs	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f003 0303 	and.w	r3, r3, #3
 800323c:	2b03      	cmp	r3, #3
 800323e:	d017      	beq.n	8003270 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	2203      	movs	r2, #3
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	43db      	mvns	r3, r3
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	4013      	ands	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	4313      	orrs	r3, r2
 8003268:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 0303 	and.w	r3, r3, #3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d123      	bne.n	80032c4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	08da      	lsrs	r2, r3, #3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3208      	adds	r2, #8
 8003284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003288:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	220f      	movs	r2, #15
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	43db      	mvns	r3, r3
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	4013      	ands	r3, r2
 800329e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	08da      	lsrs	r2, r3, #3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	3208      	adds	r2, #8
 80032be:	6939      	ldr	r1, [r7, #16]
 80032c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	2203      	movs	r2, #3
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	43db      	mvns	r3, r3
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	4013      	ands	r3, r2
 80032da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 0203 	and.w	r2, r3, #3
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 80ac 	beq.w	800345e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003306:	4b5e      	ldr	r3, [pc, #376]	; (8003480 <HAL_GPIO_Init+0x32c>)
 8003308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800330a:	4a5d      	ldr	r2, [pc, #372]	; (8003480 <HAL_GPIO_Init+0x32c>)
 800330c:	f043 0301 	orr.w	r3, r3, #1
 8003310:	6613      	str	r3, [r2, #96]	; 0x60
 8003312:	4b5b      	ldr	r3, [pc, #364]	; (8003480 <HAL_GPIO_Init+0x32c>)
 8003314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	60bb      	str	r3, [r7, #8]
 800331c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800331e:	4a59      	ldr	r2, [pc, #356]	; (8003484 <HAL_GPIO_Init+0x330>)
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	089b      	lsrs	r3, r3, #2
 8003324:	3302      	adds	r3, #2
 8003326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800332a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f003 0303 	and.w	r3, r3, #3
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	220f      	movs	r2, #15
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	43db      	mvns	r3, r3
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4013      	ands	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003348:	d025      	beq.n	8003396 <HAL_GPIO_Init+0x242>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a4e      	ldr	r2, [pc, #312]	; (8003488 <HAL_GPIO_Init+0x334>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d01f      	beq.n	8003392 <HAL_GPIO_Init+0x23e>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a4d      	ldr	r2, [pc, #308]	; (800348c <HAL_GPIO_Init+0x338>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d019      	beq.n	800338e <HAL_GPIO_Init+0x23a>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a4c      	ldr	r2, [pc, #304]	; (8003490 <HAL_GPIO_Init+0x33c>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d013      	beq.n	800338a <HAL_GPIO_Init+0x236>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a4b      	ldr	r2, [pc, #300]	; (8003494 <HAL_GPIO_Init+0x340>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d00d      	beq.n	8003386 <HAL_GPIO_Init+0x232>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a4a      	ldr	r2, [pc, #296]	; (8003498 <HAL_GPIO_Init+0x344>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d007      	beq.n	8003382 <HAL_GPIO_Init+0x22e>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a49      	ldr	r2, [pc, #292]	; (800349c <HAL_GPIO_Init+0x348>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d101      	bne.n	800337e <HAL_GPIO_Init+0x22a>
 800337a:	2306      	movs	r3, #6
 800337c:	e00c      	b.n	8003398 <HAL_GPIO_Init+0x244>
 800337e:	2307      	movs	r3, #7
 8003380:	e00a      	b.n	8003398 <HAL_GPIO_Init+0x244>
 8003382:	2305      	movs	r3, #5
 8003384:	e008      	b.n	8003398 <HAL_GPIO_Init+0x244>
 8003386:	2304      	movs	r3, #4
 8003388:	e006      	b.n	8003398 <HAL_GPIO_Init+0x244>
 800338a:	2303      	movs	r3, #3
 800338c:	e004      	b.n	8003398 <HAL_GPIO_Init+0x244>
 800338e:	2302      	movs	r3, #2
 8003390:	e002      	b.n	8003398 <HAL_GPIO_Init+0x244>
 8003392:	2301      	movs	r3, #1
 8003394:	e000      	b.n	8003398 <HAL_GPIO_Init+0x244>
 8003396:	2300      	movs	r3, #0
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	f002 0203 	and.w	r2, r2, #3
 800339e:	0092      	lsls	r2, r2, #2
 80033a0:	4093      	lsls	r3, r2
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80033a8:	4936      	ldr	r1, [pc, #216]	; (8003484 <HAL_GPIO_Init+0x330>)
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	089b      	lsrs	r3, r3, #2
 80033ae:	3302      	adds	r3, #2
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033b6:	4b3a      	ldr	r3, [pc, #232]	; (80034a0 <HAL_GPIO_Init+0x34c>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	43db      	mvns	r3, r3
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	4013      	ands	r3, r2
 80033c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033da:	4a31      	ldr	r2, [pc, #196]	; (80034a0 <HAL_GPIO_Init+0x34c>)
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80033e0:	4b2f      	ldr	r3, [pc, #188]	; (80034a0 <HAL_GPIO_Init+0x34c>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	43db      	mvns	r3, r3
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	4013      	ands	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d003      	beq.n	8003404 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	4313      	orrs	r3, r2
 8003402:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003404:	4a26      	ldr	r2, [pc, #152]	; (80034a0 <HAL_GPIO_Init+0x34c>)
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800340a:	4b25      	ldr	r3, [pc, #148]	; (80034a0 <HAL_GPIO_Init+0x34c>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	43db      	mvns	r3, r3
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	4013      	ands	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4313      	orrs	r3, r2
 800342c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800342e:	4a1c      	ldr	r2, [pc, #112]	; (80034a0 <HAL_GPIO_Init+0x34c>)
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003434:	4b1a      	ldr	r3, [pc, #104]	; (80034a0 <HAL_GPIO_Init+0x34c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	43db      	mvns	r3, r3
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4013      	ands	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003458:	4a11      	ldr	r2, [pc, #68]	; (80034a0 <HAL_GPIO_Init+0x34c>)
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	3301      	adds	r3, #1
 8003462:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	fa22 f303 	lsr.w	r3, r2, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	f47f ae78 	bne.w	8003164 <HAL_GPIO_Init+0x10>
  }
}
 8003474:	bf00      	nop
 8003476:	bf00      	nop
 8003478:	371c      	adds	r7, #28
 800347a:	46bd      	mov	sp, r7
 800347c:	bc80      	pop	{r7}
 800347e:	4770      	bx	lr
 8003480:	40021000 	.word	0x40021000
 8003484:	40010000 	.word	0x40010000
 8003488:	48000400 	.word	0x48000400
 800348c:	48000800 	.word	0x48000800
 8003490:	48000c00 	.word	0x48000c00
 8003494:	48001000 	.word	0x48001000
 8003498:	48001400 	.word	0x48001400
 800349c:	48001800 	.word	0x48001800
 80034a0:	40010400 	.word	0x40010400

080034a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	460b      	mov	r3, r1
 80034ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	691a      	ldr	r2, [r3, #16]
 80034b4:	887b      	ldrh	r3, [r7, #2]
 80034b6:	4013      	ands	r3, r2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d002      	beq.n	80034c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034bc:	2301      	movs	r3, #1
 80034be:	73fb      	strb	r3, [r7, #15]
 80034c0:	e001      	b.n	80034c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034c2:	2300      	movs	r3, #0
 80034c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bc80      	pop	{r7}
 80034d0:	4770      	bx	lr

080034d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
 80034da:	460b      	mov	r3, r1
 80034dc:	807b      	strh	r3, [r7, #2]
 80034de:	4613      	mov	r3, r2
 80034e0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034e2:	787b      	ldrb	r3, [r7, #1]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034e8:	887a      	ldrh	r2, [r7, #2]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034ee:	e002      	b.n	80034f6 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034f0:	887a      	ldrh	r2, [r7, #2]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bc80      	pop	{r7}
 80034fe:	4770      	bx	lr

08003500 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	4603      	mov	r3, r0
 8003508:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800350a:	4b08      	ldr	r3, [pc, #32]	; (800352c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800350c:	695a      	ldr	r2, [r3, #20]
 800350e:	88fb      	ldrh	r3, [r7, #6]
 8003510:	4013      	ands	r3, r2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d006      	beq.n	8003524 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003516:	4a05      	ldr	r2, [pc, #20]	; (800352c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003518:	88fb      	ldrh	r3, [r7, #6]
 800351a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800351c:	88fb      	ldrh	r3, [r7, #6]
 800351e:	4618      	mov	r0, r3
 8003520:	f004 fe20 	bl	8008164 <HAL_GPIO_EXTI_Callback>
  }
}
 8003524:	bf00      	nop
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40010400 	.word	0x40010400

08003530 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e081      	b.n	8003646 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d106      	bne.n	800355c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f8a8 	bl	80036ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2224      	movs	r2, #36	; 0x24
 8003560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0201 	bic.w	r2, r2, #1
 8003572:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003580:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003590:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d107      	bne.n	80035aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035a6:	609a      	str	r2, [r3, #8]
 80035a8:	e006      	b.n	80035b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80035b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d104      	bne.n	80035ca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	6812      	ldr	r2, [r2, #0]
 80035d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68da      	ldr	r2, [r3, #12]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	691a      	ldr	r2, [r3, #16]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	69d9      	ldr	r1, [r3, #28]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a1a      	ldr	r2, [r3, #32]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0201 	orr.w	r2, r2, #1
 8003626:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2220      	movs	r2, #32
 8003632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b082      	sub	sp, #8
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e021      	b.n	80036a4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2224      	movs	r2, #36	; 0x24
 8003664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0201 	bic.w	r2, r2, #1
 8003676:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f820 	bl	80036be <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3708      	adds	r7, #8
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bc80      	pop	{r7}
 80036bc:	4770      	bx	lr

080036be <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80036c6:	bf00      	nop
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bc80      	pop	{r7}
 80036ce:	4770      	bx	lr

080036d0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b088      	sub	sp, #32
 80036d4:	af02      	add	r7, sp, #8
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	4608      	mov	r0, r1
 80036da:	4611      	mov	r1, r2
 80036dc:	461a      	mov	r2, r3
 80036de:	4603      	mov	r3, r0
 80036e0:	817b      	strh	r3, [r7, #10]
 80036e2:	460b      	mov	r3, r1
 80036e4:	813b      	strh	r3, [r7, #8]
 80036e6:	4613      	mov	r3, r2
 80036e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b20      	cmp	r3, #32
 80036f4:	f040 80f9 	bne.w	80038ea <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d002      	beq.n	8003704 <HAL_I2C_Mem_Write+0x34>
 80036fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003700:	2b00      	cmp	r3, #0
 8003702:	d105      	bne.n	8003710 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f44f 7200 	mov.w	r2, #512	; 0x200
 800370a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e0ed      	b.n	80038ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003716:	2b01      	cmp	r3, #1
 8003718:	d101      	bne.n	800371e <HAL_I2C_Mem_Write+0x4e>
 800371a:	2302      	movs	r3, #2
 800371c:	e0e6      	b.n	80038ec <HAL_I2C_Mem_Write+0x21c>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003726:	f7ff fbc7 	bl	8002eb8 <HAL_GetTick>
 800372a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	2319      	movs	r3, #25
 8003732:	2201      	movs	r2, #1
 8003734:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 fac2 	bl	8003cc2 <I2C_WaitOnFlagUntilTimeout>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e0d1      	b.n	80038ec <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2221      	movs	r2, #33	; 0x21
 800374c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2240      	movs	r2, #64	; 0x40
 8003754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6a3a      	ldr	r2, [r7, #32]
 8003762:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003768:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003770:	88f8      	ldrh	r0, [r7, #6]
 8003772:	893a      	ldrh	r2, [r7, #8]
 8003774:	8979      	ldrh	r1, [r7, #10]
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	9301      	str	r3, [sp, #4]
 800377a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	4603      	mov	r3, r0
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f000 f9d3 	bl	8003b2c <I2C_RequestMemoryWrite>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d005      	beq.n	8003798 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e0a9      	b.n	80038ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379c:	b29b      	uxth	r3, r3
 800379e:	2bff      	cmp	r3, #255	; 0xff
 80037a0:	d90e      	bls.n	80037c0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	22ff      	movs	r2, #255	; 0xff
 80037a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	8979      	ldrh	r1, [r7, #10]
 80037b0:	2300      	movs	r3, #0
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 fc2b 	bl	8004014 <I2C_TransferConfig>
 80037be:	e00f      	b.n	80037e0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	8979      	ldrh	r1, [r7, #10]
 80037d2:	2300      	movs	r3, #0
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 fc1a 	bl	8004014 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f000 faac 	bl	8003d42 <I2C_WaitOnTXISFlagUntilTimeout>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e07b      	b.n	80038ec <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	781a      	ldrb	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	1c5a      	adds	r2, r3, #1
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380e:	b29b      	uxth	r3, r3
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381c:	3b01      	subs	r3, #1
 800381e:	b29a      	uxth	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003828:	b29b      	uxth	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d034      	beq.n	8003898 <HAL_I2C_Mem_Write+0x1c8>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003832:	2b00      	cmp	r3, #0
 8003834:	d130      	bne.n	8003898 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383c:	2200      	movs	r2, #0
 800383e:	2180      	movs	r1, #128	; 0x80
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 fa3e 	bl	8003cc2 <I2C_WaitOnFlagUntilTimeout>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e04d      	b.n	80038ec <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003854:	b29b      	uxth	r3, r3
 8003856:	2bff      	cmp	r3, #255	; 0xff
 8003858:	d90e      	bls.n	8003878 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	22ff      	movs	r2, #255	; 0xff
 800385e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003864:	b2da      	uxtb	r2, r3
 8003866:	8979      	ldrh	r1, [r7, #10]
 8003868:	2300      	movs	r3, #0
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f000 fbcf 	bl	8004014 <I2C_TransferConfig>
 8003876:	e00f      	b.n	8003898 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387c:	b29a      	uxth	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003886:	b2da      	uxtb	r2, r3
 8003888:	8979      	ldrh	r1, [r7, #10]
 800388a:	2300      	movs	r3, #0
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f000 fbbe 	bl	8004014 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389c:	b29b      	uxth	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d19e      	bne.n	80037e0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 fa8b 	bl	8003dc2 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e01a      	b.n	80038ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2220      	movs	r2, #32
 80038bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6859      	ldr	r1, [r3, #4]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	4b0a      	ldr	r3, [pc, #40]	; (80038f4 <HAL_I2C_Mem_Write+0x224>)
 80038ca:	400b      	ands	r3, r1
 80038cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2220      	movs	r2, #32
 80038d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038e6:	2300      	movs	r3, #0
 80038e8:	e000      	b.n	80038ec <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80038ea:	2302      	movs	r3, #2
  }
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3718      	adds	r7, #24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	fe00e800 	.word	0xfe00e800

080038f8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b088      	sub	sp, #32
 80038fc:	af02      	add	r7, sp, #8
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	4608      	mov	r0, r1
 8003902:	4611      	mov	r1, r2
 8003904:	461a      	mov	r2, r3
 8003906:	4603      	mov	r3, r0
 8003908:	817b      	strh	r3, [r7, #10]
 800390a:	460b      	mov	r3, r1
 800390c:	813b      	strh	r3, [r7, #8]
 800390e:	4613      	mov	r3, r2
 8003910:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b20      	cmp	r3, #32
 800391c:	f040 80fd 	bne.w	8003b1a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003920:	6a3b      	ldr	r3, [r7, #32]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d002      	beq.n	800392c <HAL_I2C_Mem_Read+0x34>
 8003926:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003928:	2b00      	cmp	r3, #0
 800392a:	d105      	bne.n	8003938 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003932:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e0f1      	b.n	8003b1c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800393e:	2b01      	cmp	r3, #1
 8003940:	d101      	bne.n	8003946 <HAL_I2C_Mem_Read+0x4e>
 8003942:	2302      	movs	r3, #2
 8003944:	e0ea      	b.n	8003b1c <HAL_I2C_Mem_Read+0x224>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800394e:	f7ff fab3 	bl	8002eb8 <HAL_GetTick>
 8003952:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	2319      	movs	r3, #25
 800395a:	2201      	movs	r2, #1
 800395c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 f9ae 	bl	8003cc2 <I2C_WaitOnFlagUntilTimeout>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e0d5      	b.n	8003b1c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2222      	movs	r2, #34	; 0x22
 8003974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2240      	movs	r2, #64	; 0x40
 800397c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6a3a      	ldr	r2, [r7, #32]
 800398a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003990:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003998:	88f8      	ldrh	r0, [r7, #6]
 800399a:	893a      	ldrh	r2, [r7, #8]
 800399c:	8979      	ldrh	r1, [r7, #10]
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	9301      	str	r3, [sp, #4]
 80039a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	4603      	mov	r3, r0
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 f913 	bl	8003bd4 <I2C_RequestMemoryRead>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d005      	beq.n	80039c0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e0ad      	b.n	8003b1c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	2bff      	cmp	r3, #255	; 0xff
 80039c8:	d90e      	bls.n	80039e8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	22ff      	movs	r2, #255	; 0xff
 80039ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	8979      	ldrh	r1, [r7, #10]
 80039d8:	4b52      	ldr	r3, [pc, #328]	; (8003b24 <HAL_I2C_Mem_Read+0x22c>)
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 fb17 	bl	8004014 <I2C_TransferConfig>
 80039e6:	e00f      	b.n	8003a08 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	8979      	ldrh	r1, [r7, #10]
 80039fa:	4b4a      	ldr	r3, [pc, #296]	; (8003b24 <HAL_I2C_Mem_Read+0x22c>)
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f000 fb06 	bl	8004014 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0e:	2200      	movs	r2, #0
 8003a10:	2104      	movs	r1, #4
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f000 f955 	bl	8003cc2 <I2C_WaitOnFlagUntilTimeout>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e07c      	b.n	8003b1c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	b2d2      	uxtb	r2, r2
 8003a2e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d034      	beq.n	8003ac8 <HAL_I2C_Mem_Read+0x1d0>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d130      	bne.n	8003ac8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	2180      	movs	r1, #128	; 0x80
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 f926 	bl	8003cc2 <I2C_WaitOnFlagUntilTimeout>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e04d      	b.n	8003b1c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	2bff      	cmp	r3, #255	; 0xff
 8003a88:	d90e      	bls.n	8003aa8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	22ff      	movs	r2, #255	; 0xff
 8003a8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	8979      	ldrh	r1, [r7, #10]
 8003a98:	2300      	movs	r3, #0
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 fab7 	bl	8004014 <I2C_TransferConfig>
 8003aa6:	e00f      	b.n	8003ac8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab6:	b2da      	uxtb	r2, r3
 8003ab8:	8979      	ldrh	r1, [r7, #10]
 8003aba:	2300      	movs	r3, #0
 8003abc:	9300      	str	r3, [sp, #0]
 8003abe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f000 faa6 	bl	8004014 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d19a      	bne.n	8003a08 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 f973 	bl	8003dc2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e01a      	b.n	8003b1c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2220      	movs	r2, #32
 8003aec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6859      	ldr	r1, [r3, #4]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	4b0b      	ldr	r3, [pc, #44]	; (8003b28 <HAL_I2C_Mem_Read+0x230>)
 8003afa:	400b      	ands	r3, r1
 8003afc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2220      	movs	r2, #32
 8003b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b16:	2300      	movs	r3, #0
 8003b18:	e000      	b.n	8003b1c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003b1a:	2302      	movs	r3, #2
  }
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3718      	adds	r7, #24
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	80002400 	.word	0x80002400
 8003b28:	fe00e800 	.word	0xfe00e800

08003b2c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af02      	add	r7, sp, #8
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	4608      	mov	r0, r1
 8003b36:	4611      	mov	r1, r2
 8003b38:	461a      	mov	r2, r3
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	817b      	strh	r3, [r7, #10]
 8003b3e:	460b      	mov	r3, r1
 8003b40:	813b      	strh	r3, [r7, #8]
 8003b42:	4613      	mov	r3, r2
 8003b44:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003b46:	88fb      	ldrh	r3, [r7, #6]
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	8979      	ldrh	r1, [r7, #10]
 8003b4c:	4b20      	ldr	r3, [pc, #128]	; (8003bd0 <I2C_RequestMemoryWrite+0xa4>)
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 fa5d 	bl	8004014 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b5a:	69fa      	ldr	r2, [r7, #28]
 8003b5c:	69b9      	ldr	r1, [r7, #24]
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 f8ef 	bl	8003d42 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e02c      	b.n	8003bc8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b6e:	88fb      	ldrh	r3, [r7, #6]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d105      	bne.n	8003b80 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b74:	893b      	ldrh	r3, [r7, #8]
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	629a      	str	r2, [r3, #40]	; 0x28
 8003b7e:	e015      	b.n	8003bac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b80:	893b      	ldrh	r3, [r7, #8]
 8003b82:	0a1b      	lsrs	r3, r3, #8
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b8e:	69fa      	ldr	r2, [r7, #28]
 8003b90:	69b9      	ldr	r1, [r7, #24]
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 f8d5 	bl	8003d42 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e012      	b.n	8003bc8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ba2:	893b      	ldrh	r3, [r7, #8]
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	2180      	movs	r1, #128	; 0x80
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 f883 	bl	8003cc2 <I2C_WaitOnFlagUntilTimeout>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e000      	b.n	8003bc8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	80002000 	.word	0x80002000

08003bd4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af02      	add	r7, sp, #8
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	4608      	mov	r0, r1
 8003bde:	4611      	mov	r1, r2
 8003be0:	461a      	mov	r2, r3
 8003be2:	4603      	mov	r3, r0
 8003be4:	817b      	strh	r3, [r7, #10]
 8003be6:	460b      	mov	r3, r1
 8003be8:	813b      	strh	r3, [r7, #8]
 8003bea:	4613      	mov	r3, r2
 8003bec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003bee:	88fb      	ldrh	r3, [r7, #6]
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	8979      	ldrh	r1, [r7, #10]
 8003bf4:	4b20      	ldr	r3, [pc, #128]	; (8003c78 <I2C_RequestMemoryRead+0xa4>)
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f000 fa0a 	bl	8004014 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c00:	69fa      	ldr	r2, [r7, #28]
 8003c02:	69b9      	ldr	r1, [r7, #24]
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 f89c 	bl	8003d42 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e02c      	b.n	8003c6e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c14:	88fb      	ldrh	r3, [r7, #6]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d105      	bne.n	8003c26 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c1a:	893b      	ldrh	r3, [r7, #8]
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	629a      	str	r2, [r3, #40]	; 0x28
 8003c24:	e015      	b.n	8003c52 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c26:	893b      	ldrh	r3, [r7, #8]
 8003c28:	0a1b      	lsrs	r3, r3, #8
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c34:	69fa      	ldr	r2, [r7, #28]
 8003c36:	69b9      	ldr	r1, [r7, #24]
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 f882 	bl	8003d42 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e012      	b.n	8003c6e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c48:	893b      	ldrh	r3, [r7, #8]
 8003c4a:	b2da      	uxtb	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	2140      	movs	r1, #64	; 0x40
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f000 f830 	bl	8003cc2 <I2C_WaitOnFlagUntilTimeout>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e000      	b.n	8003c6e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	80002000 	.word	0x80002000

08003c7c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d103      	bne.n	8003c9a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2200      	movs	r2, #0
 8003c98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d007      	beq.n	8003cb8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	699a      	ldr	r2, [r3, #24]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0201 	orr.w	r2, r2, #1
 8003cb6:	619a      	str	r2, [r3, #24]
  }
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bc80      	pop	{r7}
 8003cc0:	4770      	bx	lr

08003cc2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b084      	sub	sp, #16
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	60f8      	str	r0, [r7, #12]
 8003cca:	60b9      	str	r1, [r7, #8]
 8003ccc:	603b      	str	r3, [r7, #0]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cd2:	e022      	b.n	8003d1a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cda:	d01e      	beq.n	8003d1a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cdc:	f7ff f8ec 	bl	8002eb8 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d302      	bcc.n	8003cf2 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d113      	bne.n	8003d1a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf6:	f043 0220 	orr.w	r2, r3, #32
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2220      	movs	r2, #32
 8003d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e00f      	b.n	8003d3a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	699a      	ldr	r2, [r3, #24]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	4013      	ands	r3, r2
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	bf0c      	ite	eq
 8003d2a:	2301      	moveq	r3, #1
 8003d2c:	2300      	movne	r3, #0
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	461a      	mov	r2, r3
 8003d32:	79fb      	ldrb	r3, [r7, #7]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d0cd      	beq.n	8003cd4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b084      	sub	sp, #16
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	60f8      	str	r0, [r7, #12]
 8003d4a:	60b9      	str	r1, [r7, #8]
 8003d4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d4e:	e02c      	b.n	8003daa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	68b9      	ldr	r1, [r7, #8]
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f000 f871 	bl	8003e3c <I2C_IsErrorOccurred>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e02a      	b.n	8003dba <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6a:	d01e      	beq.n	8003daa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d6c:	f7ff f8a4 	bl	8002eb8 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d302      	bcc.n	8003d82 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d113      	bne.n	8003daa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d86:	f043 0220 	orr.w	r2, r3, #32
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2220      	movs	r2, #32
 8003d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e007      	b.n	8003dba <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d1cb      	bne.n	8003d50 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b084      	sub	sp, #16
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	60f8      	str	r0, [r7, #12]
 8003dca:	60b9      	str	r1, [r7, #8]
 8003dcc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dce:	e028      	b.n	8003e22 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	68b9      	ldr	r1, [r7, #8]
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f000 f831 	bl	8003e3c <I2C_IsErrorOccurred>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d001      	beq.n	8003de4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e026      	b.n	8003e32 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de4:	f7ff f868 	bl	8002eb8 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	68ba      	ldr	r2, [r7, #8]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d302      	bcc.n	8003dfa <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d113      	bne.n	8003e22 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfe:	f043 0220 	orr.w	r2, r3, #32
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e007      	b.n	8003e32 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	f003 0320 	and.w	r3, r3, #32
 8003e2c:	2b20      	cmp	r3, #32
 8003e2e:	d1cf      	bne.n	8003dd0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
	...

08003e3c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b08a      	sub	sp, #40	; 0x28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003e56:	2300      	movs	r3, #0
 8003e58:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	f003 0310 	and.w	r3, r3, #16
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d075      	beq.n	8003f54 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2210      	movs	r2, #16
 8003e6e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e70:	e056      	b.n	8003f20 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e78:	d052      	beq.n	8003f20 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e7a:	f7ff f81d 	bl	8002eb8 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d302      	bcc.n	8003e90 <I2C_IsErrorOccurred+0x54>
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d147      	bne.n	8003f20 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e9a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ea2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003eae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eb2:	d12e      	bne.n	8003f12 <I2C_IsErrorOccurred+0xd6>
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003eba:	d02a      	beq.n	8003f12 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003ebc:	7cfb      	ldrb	r3, [r7, #19]
 8003ebe:	2b20      	cmp	r3, #32
 8003ec0:	d027      	beq.n	8003f12 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ed0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003ed2:	f7fe fff1 	bl	8002eb8 <HAL_GetTick>
 8003ed6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ed8:	e01b      	b.n	8003f12 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003eda:	f7fe ffed 	bl	8002eb8 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b19      	cmp	r3, #25
 8003ee6:	d914      	bls.n	8003f12 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eec:	f043 0220 	orr.w	r2, r3, #32
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	f003 0320 	and.w	r3, r3, #32
 8003f1c:	2b20      	cmp	r3, #32
 8003f1e:	d1dc      	bne.n	8003eda <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	f003 0320 	and.w	r3, r3, #32
 8003f2a:	2b20      	cmp	r3, #32
 8003f2c:	d003      	beq.n	8003f36 <I2C_IsErrorOccurred+0xfa>
 8003f2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d09d      	beq.n	8003e72 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003f36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d103      	bne.n	8003f46 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2220      	movs	r2, #32
 8003f44:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003f46:	6a3b      	ldr	r3, [r7, #32]
 8003f48:	f043 0304 	orr.w	r3, r3, #4
 8003f4c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00b      	beq.n	8003f7e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003f66:	6a3b      	ldr	r3, [r7, #32]
 8003f68:	f043 0301 	orr.w	r3, r3, #1
 8003f6c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f76:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00b      	beq.n	8003fa0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003f88:	6a3b      	ldr	r3, [r7, #32]
 8003f8a:	f043 0308 	orr.w	r3, r3, #8
 8003f8e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00b      	beq.n	8003fc2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003faa:	6a3b      	ldr	r3, [r7, #32]
 8003fac:	f043 0302 	orr.w	r3, r3, #2
 8003fb0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003fc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d01c      	beq.n	8004004 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f7ff fe56 	bl	8003c7c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6859      	ldr	r1, [r3, #4]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	4b0d      	ldr	r3, [pc, #52]	; (8004010 <I2C_IsErrorOccurred+0x1d4>)
 8003fdc:	400b      	ands	r3, r1
 8003fde:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004004:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004008:	4618      	mov	r0, r3
 800400a:	3728      	adds	r7, #40	; 0x28
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	fe00e800 	.word	0xfe00e800

08004014 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004014:	b480      	push	{r7}
 8004016:	b087      	sub	sp, #28
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	607b      	str	r3, [r7, #4]
 800401e:	460b      	mov	r3, r1
 8004020:	817b      	strh	r3, [r7, #10]
 8004022:	4613      	mov	r3, r2
 8004024:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004026:	897b      	ldrh	r3, [r7, #10]
 8004028:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800402c:	7a7b      	ldrb	r3, [r7, #9]
 800402e:	041b      	lsls	r3, r3, #16
 8004030:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004034:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800403a:	6a3b      	ldr	r3, [r7, #32]
 800403c:	4313      	orrs	r3, r2
 800403e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004042:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	6a3b      	ldr	r3, [r7, #32]
 800404c:	0d5b      	lsrs	r3, r3, #21
 800404e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004052:	4b07      	ldr	r3, [pc, #28]	; (8004070 <I2C_TransferConfig+0x5c>)
 8004054:	430b      	orrs	r3, r1
 8004056:	43db      	mvns	r3, r3
 8004058:	ea02 0103 	and.w	r1, r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	430a      	orrs	r2, r1
 8004064:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004066:	bf00      	nop
 8004068:	371c      	adds	r7, #28
 800406a:	46bd      	mov	sp, r7
 800406c:	bc80      	pop	{r7}
 800406e:	4770      	bx	lr
 8004070:	03ff63ff 	.word	0x03ff63ff

08004074 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b20      	cmp	r3, #32
 8004088:	d138      	bne.n	80040fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004090:	2b01      	cmp	r3, #1
 8004092:	d101      	bne.n	8004098 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004094:	2302      	movs	r3, #2
 8004096:	e032      	b.n	80040fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2224      	movs	r2, #36	; 0x24
 80040a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 0201 	bic.w	r2, r2, #1
 80040b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6819      	ldr	r1, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f042 0201 	orr.w	r2, r2, #1
 80040e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040f8:	2300      	movs	r3, #0
 80040fa:	e000      	b.n	80040fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80040fc:	2302      	movs	r3, #2
  }
}
 80040fe:	4618      	mov	r0, r3
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	bc80      	pop	{r7}
 8004106:	4770      	bx	lr

08004108 <HAL_MspInit>:
  * @brief  Initialize the Global MSP.
  * @param  None
  * @retval None
  */
void HAL_MspInit(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
  /* NOTE : This function is generated automatically by STM32CubeMX and eventually
            modified by the user
   */
}
 800410c:	bf00      	nop
 800410e:	46bd      	mov	sp, r7
 8004110:	bc80      	pop	{r7}
 8004112:	4770      	bx	lr

08004114 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004118:	4b03      	ldr	r3, [pc, #12]	; (8004128 <HAL_PWREx_GetVoltageRange+0x14>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004120:	4618      	mov	r0, r3
 8004122:	46bd      	mov	sp, r7
 8004124:	bc80      	pop	{r7}
 8004126:	4770      	bx	lr
 8004128:	40007000 	.word	0x40007000

0800412c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b088      	sub	sp, #32
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e3d8      	b.n	80048f0 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800413e:	4b97      	ldr	r3, [pc, #604]	; (800439c <HAL_RCC_OscConfig+0x270>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 030c 	and.w	r3, r3, #12
 8004146:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004148:	4b94      	ldr	r3, [pc, #592]	; (800439c <HAL_RCC_OscConfig+0x270>)
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f003 0303 	and.w	r3, r3, #3
 8004150:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0310 	and.w	r3, r3, #16
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 80e4 	beq.w	8004328 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d007      	beq.n	8004176 <HAL_RCC_OscConfig+0x4a>
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	2b0c      	cmp	r3, #12
 800416a:	f040 808b 	bne.w	8004284 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2b01      	cmp	r3, #1
 8004172:	f040 8087 	bne.w	8004284 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004176:	4b89      	ldr	r3, [pc, #548]	; (800439c <HAL_RCC_OscConfig+0x270>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d005      	beq.n	800418e <HAL_RCC_OscConfig+0x62>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e3b0      	b.n	80048f0 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a1a      	ldr	r2, [r3, #32]
 8004192:	4b82      	ldr	r3, [pc, #520]	; (800439c <HAL_RCC_OscConfig+0x270>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0308 	and.w	r3, r3, #8
 800419a:	2b00      	cmp	r3, #0
 800419c:	d004      	beq.n	80041a8 <HAL_RCC_OscConfig+0x7c>
 800419e:	4b7f      	ldr	r3, [pc, #508]	; (800439c <HAL_RCC_OscConfig+0x270>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041a6:	e005      	b.n	80041b4 <HAL_RCC_OscConfig+0x88>
 80041a8:	4b7c      	ldr	r3, [pc, #496]	; (800439c <HAL_RCC_OscConfig+0x270>)
 80041aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ae:	091b      	lsrs	r3, r3, #4
 80041b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d223      	bcs.n	8004200 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 fd6f 	bl	8004ca0 <RCC_SetFlashLatencyFromMSIRange>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e391      	b.n	80048f0 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041cc:	4b73      	ldr	r3, [pc, #460]	; (800439c <HAL_RCC_OscConfig+0x270>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a72      	ldr	r2, [pc, #456]	; (800439c <HAL_RCC_OscConfig+0x270>)
 80041d2:	f043 0308 	orr.w	r3, r3, #8
 80041d6:	6013      	str	r3, [r2, #0]
 80041d8:	4b70      	ldr	r3, [pc, #448]	; (800439c <HAL_RCC_OscConfig+0x270>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	496d      	ldr	r1, [pc, #436]	; (800439c <HAL_RCC_OscConfig+0x270>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041ea:	4b6c      	ldr	r3, [pc, #432]	; (800439c <HAL_RCC_OscConfig+0x270>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	021b      	lsls	r3, r3, #8
 80041f8:	4968      	ldr	r1, [pc, #416]	; (800439c <HAL_RCC_OscConfig+0x270>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	604b      	str	r3, [r1, #4]
 80041fe:	e025      	b.n	800424c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004200:	4b66      	ldr	r3, [pc, #408]	; (800439c <HAL_RCC_OscConfig+0x270>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a65      	ldr	r2, [pc, #404]	; (800439c <HAL_RCC_OscConfig+0x270>)
 8004206:	f043 0308 	orr.w	r3, r3, #8
 800420a:	6013      	str	r3, [r2, #0]
 800420c:	4b63      	ldr	r3, [pc, #396]	; (800439c <HAL_RCC_OscConfig+0x270>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	4960      	ldr	r1, [pc, #384]	; (800439c <HAL_RCC_OscConfig+0x270>)
 800421a:	4313      	orrs	r3, r2
 800421c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800421e:	4b5f      	ldr	r3, [pc, #380]	; (800439c <HAL_RCC_OscConfig+0x270>)
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	021b      	lsls	r3, r3, #8
 800422c:	495b      	ldr	r1, [pc, #364]	; (800439c <HAL_RCC_OscConfig+0x270>)
 800422e:	4313      	orrs	r3, r2
 8004230:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d109      	bne.n	800424c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	4618      	mov	r0, r3
 800423e:	f000 fd2f 	bl	8004ca0 <RCC_SetFlashLatencyFromMSIRange>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e351      	b.n	80048f0 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800424c:	f000 fc38 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 8004250:	4602      	mov	r2, r0
 8004252:	4b52      	ldr	r3, [pc, #328]	; (800439c <HAL_RCC_OscConfig+0x270>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	091b      	lsrs	r3, r3, #4
 8004258:	f003 030f 	and.w	r3, r3, #15
 800425c:	4950      	ldr	r1, [pc, #320]	; (80043a0 <HAL_RCC_OscConfig+0x274>)
 800425e:	5ccb      	ldrb	r3, [r1, r3]
 8004260:	f003 031f 	and.w	r3, r3, #31
 8004264:	fa22 f303 	lsr.w	r3, r2, r3
 8004268:	4a4e      	ldr	r2, [pc, #312]	; (80043a4 <HAL_RCC_OscConfig+0x278>)
 800426a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800426c:	4b4e      	ldr	r3, [pc, #312]	; (80043a8 <HAL_RCC_OscConfig+0x27c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4618      	mov	r0, r3
 8004272:	f002 fee5 	bl	8007040 <HAL_InitTick>
 8004276:	4603      	mov	r3, r0
 8004278:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800427a:	7bfb      	ldrb	r3, [r7, #15]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d052      	beq.n	8004326 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004280:	7bfb      	ldrb	r3, [r7, #15]
 8004282:	e335      	b.n	80048f0 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d032      	beq.n	80042f2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800428c:	4b43      	ldr	r3, [pc, #268]	; (800439c <HAL_RCC_OscConfig+0x270>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a42      	ldr	r2, [pc, #264]	; (800439c <HAL_RCC_OscConfig+0x270>)
 8004292:	f043 0301 	orr.w	r3, r3, #1
 8004296:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004298:	f7fe fe0e 	bl	8002eb8 <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042a0:	f7fe fe0a 	bl	8002eb8 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e31e      	b.n	80048f0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042b2:	4b3a      	ldr	r3, [pc, #232]	; (800439c <HAL_RCC_OscConfig+0x270>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0f0      	beq.n	80042a0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042be:	4b37      	ldr	r3, [pc, #220]	; (800439c <HAL_RCC_OscConfig+0x270>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a36      	ldr	r2, [pc, #216]	; (800439c <HAL_RCC_OscConfig+0x270>)
 80042c4:	f043 0308 	orr.w	r3, r3, #8
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	4b34      	ldr	r3, [pc, #208]	; (800439c <HAL_RCC_OscConfig+0x270>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	4931      	ldr	r1, [pc, #196]	; (800439c <HAL_RCC_OscConfig+0x270>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042dc:	4b2f      	ldr	r3, [pc, #188]	; (800439c <HAL_RCC_OscConfig+0x270>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	69db      	ldr	r3, [r3, #28]
 80042e8:	021b      	lsls	r3, r3, #8
 80042ea:	492c      	ldr	r1, [pc, #176]	; (800439c <HAL_RCC_OscConfig+0x270>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	604b      	str	r3, [r1, #4]
 80042f0:	e01a      	b.n	8004328 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80042f2:	4b2a      	ldr	r3, [pc, #168]	; (800439c <HAL_RCC_OscConfig+0x270>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a29      	ldr	r2, [pc, #164]	; (800439c <HAL_RCC_OscConfig+0x270>)
 80042f8:	f023 0301 	bic.w	r3, r3, #1
 80042fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042fe:	f7fe fddb 	bl	8002eb8 <HAL_GetTick>
 8004302:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004304:	e008      	b.n	8004318 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004306:	f7fe fdd7 	bl	8002eb8 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d901      	bls.n	8004318 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e2eb      	b.n	80048f0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004318:	4b20      	ldr	r3, [pc, #128]	; (800439c <HAL_RCC_OscConfig+0x270>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1f0      	bne.n	8004306 <HAL_RCC_OscConfig+0x1da>
 8004324:	e000      	b.n	8004328 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004326:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b00      	cmp	r3, #0
 8004332:	d074      	beq.n	800441e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	2b08      	cmp	r3, #8
 8004338:	d005      	beq.n	8004346 <HAL_RCC_OscConfig+0x21a>
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	2b0c      	cmp	r3, #12
 800433e:	d10e      	bne.n	800435e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	2b03      	cmp	r3, #3
 8004344:	d10b      	bne.n	800435e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004346:	4b15      	ldr	r3, [pc, #84]	; (800439c <HAL_RCC_OscConfig+0x270>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d064      	beq.n	800441c <HAL_RCC_OscConfig+0x2f0>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d160      	bne.n	800441c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e2c8      	b.n	80048f0 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004366:	d106      	bne.n	8004376 <HAL_RCC_OscConfig+0x24a>
 8004368:	4b0c      	ldr	r3, [pc, #48]	; (800439c <HAL_RCC_OscConfig+0x270>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a0b      	ldr	r2, [pc, #44]	; (800439c <HAL_RCC_OscConfig+0x270>)
 800436e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004372:	6013      	str	r3, [r2, #0]
 8004374:	e026      	b.n	80043c4 <HAL_RCC_OscConfig+0x298>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800437e:	d115      	bne.n	80043ac <HAL_RCC_OscConfig+0x280>
 8004380:	4b06      	ldr	r3, [pc, #24]	; (800439c <HAL_RCC_OscConfig+0x270>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a05      	ldr	r2, [pc, #20]	; (800439c <HAL_RCC_OscConfig+0x270>)
 8004386:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800438a:	6013      	str	r3, [r2, #0]
 800438c:	4b03      	ldr	r3, [pc, #12]	; (800439c <HAL_RCC_OscConfig+0x270>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a02      	ldr	r2, [pc, #8]	; (800439c <HAL_RCC_OscConfig+0x270>)
 8004392:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004396:	6013      	str	r3, [r2, #0]
 8004398:	e014      	b.n	80043c4 <HAL_RCC_OscConfig+0x298>
 800439a:	bf00      	nop
 800439c:	40021000 	.word	0x40021000
 80043a0:	0800a378 	.word	0x0800a378
 80043a4:	20000044 	.word	0x20000044
 80043a8:	20000038 	.word	0x20000038
 80043ac:	4ba0      	ldr	r3, [pc, #640]	; (8004630 <HAL_RCC_OscConfig+0x504>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a9f      	ldr	r2, [pc, #636]	; (8004630 <HAL_RCC_OscConfig+0x504>)
 80043b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043b6:	6013      	str	r3, [r2, #0]
 80043b8:	4b9d      	ldr	r3, [pc, #628]	; (8004630 <HAL_RCC_OscConfig+0x504>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a9c      	ldr	r2, [pc, #624]	; (8004630 <HAL_RCC_OscConfig+0x504>)
 80043be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d013      	beq.n	80043f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043cc:	f7fe fd74 	bl	8002eb8 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043d4:	f7fe fd70 	bl	8002eb8 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b64      	cmp	r3, #100	; 0x64
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e284      	b.n	80048f0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043e6:	4b92      	ldr	r3, [pc, #584]	; (8004630 <HAL_RCC_OscConfig+0x504>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0f0      	beq.n	80043d4 <HAL_RCC_OscConfig+0x2a8>
 80043f2:	e014      	b.n	800441e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f4:	f7fe fd60 	bl	8002eb8 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043fc:	f7fe fd5c 	bl	8002eb8 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b64      	cmp	r3, #100	; 0x64
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e270      	b.n	80048f0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800440e:	4b88      	ldr	r3, [pc, #544]	; (8004630 <HAL_RCC_OscConfig+0x504>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1f0      	bne.n	80043fc <HAL_RCC_OscConfig+0x2d0>
 800441a:	e000      	b.n	800441e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800441c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d060      	beq.n	80044ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	2b04      	cmp	r3, #4
 800442e:	d005      	beq.n	800443c <HAL_RCC_OscConfig+0x310>
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	2b0c      	cmp	r3, #12
 8004434:	d119      	bne.n	800446a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	2b02      	cmp	r3, #2
 800443a:	d116      	bne.n	800446a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800443c:	4b7c      	ldr	r3, [pc, #496]	; (8004630 <HAL_RCC_OscConfig+0x504>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004444:	2b00      	cmp	r3, #0
 8004446:	d005      	beq.n	8004454 <HAL_RCC_OscConfig+0x328>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e24d      	b.n	80048f0 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004454:	4b76      	ldr	r3, [pc, #472]	; (8004630 <HAL_RCC_OscConfig+0x504>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	061b      	lsls	r3, r3, #24
 8004462:	4973      	ldr	r1, [pc, #460]	; (8004630 <HAL_RCC_OscConfig+0x504>)
 8004464:	4313      	orrs	r3, r2
 8004466:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004468:	e040      	b.n	80044ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d023      	beq.n	80044ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004472:	4b6f      	ldr	r3, [pc, #444]	; (8004630 <HAL_RCC_OscConfig+0x504>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a6e      	ldr	r2, [pc, #440]	; (8004630 <HAL_RCC_OscConfig+0x504>)
 8004478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800447c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447e:	f7fe fd1b 	bl	8002eb8 <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004484:	e008      	b.n	8004498 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004486:	f7fe fd17 	bl	8002eb8 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e22b      	b.n	80048f0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004498:	4b65      	ldr	r3, [pc, #404]	; (8004630 <HAL_RCC_OscConfig+0x504>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0f0      	beq.n	8004486 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a4:	4b62      	ldr	r3, [pc, #392]	; (8004630 <HAL_RCC_OscConfig+0x504>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	061b      	lsls	r3, r3, #24
 80044b2:	495f      	ldr	r1, [pc, #380]	; (8004630 <HAL_RCC_OscConfig+0x504>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	604b      	str	r3, [r1, #4]
 80044b8:	e018      	b.n	80044ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044ba:	4b5d      	ldr	r3, [pc, #372]	; (8004630 <HAL_RCC_OscConfig+0x504>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a5c      	ldr	r2, [pc, #368]	; (8004630 <HAL_RCC_OscConfig+0x504>)
 80044c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c6:	f7fe fcf7 	bl	8002eb8 <HAL_GetTick>
 80044ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044cc:	e008      	b.n	80044e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044ce:	f7fe fcf3 	bl	8002eb8 <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e207      	b.n	80048f0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044e0:	4b53      	ldr	r3, [pc, #332]	; (8004630 <HAL_RCC_OscConfig+0x504>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1f0      	bne.n	80044ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0308 	and.w	r3, r3, #8
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d03c      	beq.n	8004572 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d01c      	beq.n	800453a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004500:	4b4b      	ldr	r3, [pc, #300]	; (8004630 <HAL_RCC_OscConfig+0x504>)
 8004502:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004506:	4a4a      	ldr	r2, [pc, #296]	; (8004630 <HAL_RCC_OscConfig+0x504>)
 8004508:	f043 0301 	orr.w	r3, r3, #1
 800450c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004510:	f7fe fcd2 	bl	8002eb8 <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004516:	e008      	b.n	800452a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004518:	f7fe fcce 	bl	8002eb8 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b02      	cmp	r3, #2
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e1e2      	b.n	80048f0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800452a:	4b41      	ldr	r3, [pc, #260]	; (8004630 <HAL_RCC_OscConfig+0x504>)
 800452c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d0ef      	beq.n	8004518 <HAL_RCC_OscConfig+0x3ec>
 8004538:	e01b      	b.n	8004572 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800453a:	4b3d      	ldr	r3, [pc, #244]	; (8004630 <HAL_RCC_OscConfig+0x504>)
 800453c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004540:	4a3b      	ldr	r2, [pc, #236]	; (8004630 <HAL_RCC_OscConfig+0x504>)
 8004542:	f023 0301 	bic.w	r3, r3, #1
 8004546:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800454a:	f7fe fcb5 	bl	8002eb8 <HAL_GetTick>
 800454e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004550:	e008      	b.n	8004564 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004552:	f7fe fcb1 	bl	8002eb8 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d901      	bls.n	8004564 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e1c5      	b.n	80048f0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004564:	4b32      	ldr	r3, [pc, #200]	; (8004630 <HAL_RCC_OscConfig+0x504>)
 8004566:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1ef      	bne.n	8004552 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0304 	and.w	r3, r3, #4
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 80a6 	beq.w	80046cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004580:	2300      	movs	r3, #0
 8004582:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004584:	4b2a      	ldr	r3, [pc, #168]	; (8004630 <HAL_RCC_OscConfig+0x504>)
 8004586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10d      	bne.n	80045ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004590:	4b27      	ldr	r3, [pc, #156]	; (8004630 <HAL_RCC_OscConfig+0x504>)
 8004592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004594:	4a26      	ldr	r2, [pc, #152]	; (8004630 <HAL_RCC_OscConfig+0x504>)
 8004596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800459a:	6593      	str	r3, [r2, #88]	; 0x58
 800459c:	4b24      	ldr	r3, [pc, #144]	; (8004630 <HAL_RCC_OscConfig+0x504>)
 800459e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a4:	60bb      	str	r3, [r7, #8]
 80045a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045a8:	2301      	movs	r3, #1
 80045aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045ac:	4b21      	ldr	r3, [pc, #132]	; (8004634 <HAL_RCC_OscConfig+0x508>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d118      	bne.n	80045ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045b8:	4b1e      	ldr	r3, [pc, #120]	; (8004634 <HAL_RCC_OscConfig+0x508>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a1d      	ldr	r2, [pc, #116]	; (8004634 <HAL_RCC_OscConfig+0x508>)
 80045be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045c4:	f7fe fc78 	bl	8002eb8 <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045cc:	f7fe fc74 	bl	8002eb8 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e188      	b.n	80048f0 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045de:	4b15      	ldr	r3, [pc, #84]	; (8004634 <HAL_RCC_OscConfig+0x508>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0f0      	beq.n	80045cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d108      	bne.n	8004604 <HAL_RCC_OscConfig+0x4d8>
 80045f2:	4b0f      	ldr	r3, [pc, #60]	; (8004630 <HAL_RCC_OscConfig+0x504>)
 80045f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f8:	4a0d      	ldr	r2, [pc, #52]	; (8004630 <HAL_RCC_OscConfig+0x504>)
 80045fa:	f043 0301 	orr.w	r3, r3, #1
 80045fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004602:	e029      	b.n	8004658 <HAL_RCC_OscConfig+0x52c>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	2b05      	cmp	r3, #5
 800460a:	d115      	bne.n	8004638 <HAL_RCC_OscConfig+0x50c>
 800460c:	4b08      	ldr	r3, [pc, #32]	; (8004630 <HAL_RCC_OscConfig+0x504>)
 800460e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004612:	4a07      	ldr	r2, [pc, #28]	; (8004630 <HAL_RCC_OscConfig+0x504>)
 8004614:	f043 0304 	orr.w	r3, r3, #4
 8004618:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800461c:	4b04      	ldr	r3, [pc, #16]	; (8004630 <HAL_RCC_OscConfig+0x504>)
 800461e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004622:	4a03      	ldr	r2, [pc, #12]	; (8004630 <HAL_RCC_OscConfig+0x504>)
 8004624:	f043 0301 	orr.w	r3, r3, #1
 8004628:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800462c:	e014      	b.n	8004658 <HAL_RCC_OscConfig+0x52c>
 800462e:	bf00      	nop
 8004630:	40021000 	.word	0x40021000
 8004634:	40007000 	.word	0x40007000
 8004638:	4b91      	ldr	r3, [pc, #580]	; (8004880 <HAL_RCC_OscConfig+0x754>)
 800463a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463e:	4a90      	ldr	r2, [pc, #576]	; (8004880 <HAL_RCC_OscConfig+0x754>)
 8004640:	f023 0301 	bic.w	r3, r3, #1
 8004644:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004648:	4b8d      	ldr	r3, [pc, #564]	; (8004880 <HAL_RCC_OscConfig+0x754>)
 800464a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800464e:	4a8c      	ldr	r2, [pc, #560]	; (8004880 <HAL_RCC_OscConfig+0x754>)
 8004650:	f023 0304 	bic.w	r3, r3, #4
 8004654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d016      	beq.n	800468e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004660:	f7fe fc2a 	bl	8002eb8 <HAL_GetTick>
 8004664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004666:	e00a      	b.n	800467e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004668:	f7fe fc26 	bl	8002eb8 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	f241 3288 	movw	r2, #5000	; 0x1388
 8004676:	4293      	cmp	r3, r2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e138      	b.n	80048f0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800467e:	4b80      	ldr	r3, [pc, #512]	; (8004880 <HAL_RCC_OscConfig+0x754>)
 8004680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d0ed      	beq.n	8004668 <HAL_RCC_OscConfig+0x53c>
 800468c:	e015      	b.n	80046ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800468e:	f7fe fc13 	bl	8002eb8 <HAL_GetTick>
 8004692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004694:	e00a      	b.n	80046ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004696:	f7fe fc0f 	bl	8002eb8 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e121      	b.n	80048f0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046ac:	4b74      	ldr	r3, [pc, #464]	; (8004880 <HAL_RCC_OscConfig+0x754>)
 80046ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1ed      	bne.n	8004696 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046ba:	7ffb      	ldrb	r3, [r7, #31]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d105      	bne.n	80046cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046c0:	4b6f      	ldr	r3, [pc, #444]	; (8004880 <HAL_RCC_OscConfig+0x754>)
 80046c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c4:	4a6e      	ldr	r2, [pc, #440]	; (8004880 <HAL_RCC_OscConfig+0x754>)
 80046c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046ca:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f000 810c 	beq.w	80048ee <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046da:	2b02      	cmp	r3, #2
 80046dc:	f040 80d4 	bne.w	8004888 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80046e0:	4b67      	ldr	r3, [pc, #412]	; (8004880 <HAL_RCC_OscConfig+0x754>)
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f003 0203 	and.w	r2, r3, #3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d130      	bne.n	8004756 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fe:	3b01      	subs	r3, #1
 8004700:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004702:	429a      	cmp	r2, r3
 8004704:	d127      	bne.n	8004756 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004710:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004712:	429a      	cmp	r2, r3
 8004714:	d11f      	bne.n	8004756 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004720:	2a07      	cmp	r2, #7
 8004722:	bf14      	ite	ne
 8004724:	2201      	movne	r2, #1
 8004726:	2200      	moveq	r2, #0
 8004728:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800472a:	4293      	cmp	r3, r2
 800472c:	d113      	bne.n	8004756 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004738:	085b      	lsrs	r3, r3, #1
 800473a:	3b01      	subs	r3, #1
 800473c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800473e:	429a      	cmp	r2, r3
 8004740:	d109      	bne.n	8004756 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474c:	085b      	lsrs	r3, r3, #1
 800474e:	3b01      	subs	r3, #1
 8004750:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004752:	429a      	cmp	r2, r3
 8004754:	d06e      	beq.n	8004834 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	2b0c      	cmp	r3, #12
 800475a:	d069      	beq.n	8004830 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800475c:	4b48      	ldr	r3, [pc, #288]	; (8004880 <HAL_RCC_OscConfig+0x754>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d105      	bne.n	8004774 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004768:	4b45      	ldr	r3, [pc, #276]	; (8004880 <HAL_RCC_OscConfig+0x754>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d001      	beq.n	8004778 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e0bb      	b.n	80048f0 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004778:	4b41      	ldr	r3, [pc, #260]	; (8004880 <HAL_RCC_OscConfig+0x754>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a40      	ldr	r2, [pc, #256]	; (8004880 <HAL_RCC_OscConfig+0x754>)
 800477e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004782:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004784:	f7fe fb98 	bl	8002eb8 <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800478c:	f7fe fb94 	bl	8002eb8 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e0a8      	b.n	80048f0 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800479e:	4b38      	ldr	r3, [pc, #224]	; (8004880 <HAL_RCC_OscConfig+0x754>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1f0      	bne.n	800478c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047aa:	4b35      	ldr	r3, [pc, #212]	; (8004880 <HAL_RCC_OscConfig+0x754>)
 80047ac:	68da      	ldr	r2, [r3, #12]
 80047ae:	4b35      	ldr	r3, [pc, #212]	; (8004884 <HAL_RCC_OscConfig+0x758>)
 80047b0:	4013      	ands	r3, r2
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80047ba:	3a01      	subs	r2, #1
 80047bc:	0112      	lsls	r2, r2, #4
 80047be:	4311      	orrs	r1, r2
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047c4:	0212      	lsls	r2, r2, #8
 80047c6:	4311      	orrs	r1, r2
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80047cc:	0852      	lsrs	r2, r2, #1
 80047ce:	3a01      	subs	r2, #1
 80047d0:	0552      	lsls	r2, r2, #21
 80047d2:	4311      	orrs	r1, r2
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80047d8:	0852      	lsrs	r2, r2, #1
 80047da:	3a01      	subs	r2, #1
 80047dc:	0652      	lsls	r2, r2, #25
 80047de:	4311      	orrs	r1, r2
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047e4:	0912      	lsrs	r2, r2, #4
 80047e6:	0452      	lsls	r2, r2, #17
 80047e8:	430a      	orrs	r2, r1
 80047ea:	4925      	ldr	r1, [pc, #148]	; (8004880 <HAL_RCC_OscConfig+0x754>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80047f0:	4b23      	ldr	r3, [pc, #140]	; (8004880 <HAL_RCC_OscConfig+0x754>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a22      	ldr	r2, [pc, #136]	; (8004880 <HAL_RCC_OscConfig+0x754>)
 80047f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047fc:	4b20      	ldr	r3, [pc, #128]	; (8004880 <HAL_RCC_OscConfig+0x754>)
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	4a1f      	ldr	r2, [pc, #124]	; (8004880 <HAL_RCC_OscConfig+0x754>)
 8004802:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004806:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004808:	f7fe fb56 	bl	8002eb8 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004810:	f7fe fb52 	bl	8002eb8 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b02      	cmp	r3, #2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e066      	b.n	80048f0 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004822:	4b17      	ldr	r3, [pc, #92]	; (8004880 <HAL_RCC_OscConfig+0x754>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0f0      	beq.n	8004810 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800482e:	e05e      	b.n	80048ee <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e05d      	b.n	80048f0 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004834:	4b12      	ldr	r3, [pc, #72]	; (8004880 <HAL_RCC_OscConfig+0x754>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d156      	bne.n	80048ee <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004840:	4b0f      	ldr	r3, [pc, #60]	; (8004880 <HAL_RCC_OscConfig+0x754>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a0e      	ldr	r2, [pc, #56]	; (8004880 <HAL_RCC_OscConfig+0x754>)
 8004846:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800484a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800484c:	4b0c      	ldr	r3, [pc, #48]	; (8004880 <HAL_RCC_OscConfig+0x754>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	4a0b      	ldr	r2, [pc, #44]	; (8004880 <HAL_RCC_OscConfig+0x754>)
 8004852:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004856:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004858:	f7fe fb2e 	bl	8002eb8 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004860:	f7fe fb2a 	bl	8002eb8 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e03e      	b.n	80048f0 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004872:	4b03      	ldr	r3, [pc, #12]	; (8004880 <HAL_RCC_OscConfig+0x754>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d0f0      	beq.n	8004860 <HAL_RCC_OscConfig+0x734>
 800487e:	e036      	b.n	80048ee <HAL_RCC_OscConfig+0x7c2>
 8004880:	40021000 	.word	0x40021000
 8004884:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	2b0c      	cmp	r3, #12
 800488c:	d02d      	beq.n	80048ea <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800488e:	4b1a      	ldr	r3, [pc, #104]	; (80048f8 <HAL_RCC_OscConfig+0x7cc>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a19      	ldr	r2, [pc, #100]	; (80048f8 <HAL_RCC_OscConfig+0x7cc>)
 8004894:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004898:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800489a:	4b17      	ldr	r3, [pc, #92]	; (80048f8 <HAL_RCC_OscConfig+0x7cc>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d105      	bne.n	80048b2 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80048a6:	4b14      	ldr	r3, [pc, #80]	; (80048f8 <HAL_RCC_OscConfig+0x7cc>)
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	4a13      	ldr	r2, [pc, #76]	; (80048f8 <HAL_RCC_OscConfig+0x7cc>)
 80048ac:	f023 0303 	bic.w	r3, r3, #3
 80048b0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80048b2:	4b11      	ldr	r3, [pc, #68]	; (80048f8 <HAL_RCC_OscConfig+0x7cc>)
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	4a10      	ldr	r2, [pc, #64]	; (80048f8 <HAL_RCC_OscConfig+0x7cc>)
 80048b8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80048bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048c0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c2:	f7fe faf9 	bl	8002eb8 <HAL_GetTick>
 80048c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048c8:	e008      	b.n	80048dc <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ca:	f7fe faf5 	bl	8002eb8 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d901      	bls.n	80048dc <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e009      	b.n	80048f0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048dc:	4b06      	ldr	r3, [pc, #24]	; (80048f8 <HAL_RCC_OscConfig+0x7cc>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1f0      	bne.n	80048ca <HAL_RCC_OscConfig+0x79e>
 80048e8:	e001      	b.n	80048ee <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e000      	b.n	80048f0 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3720      	adds	r7, #32
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	40021000 	.word	0x40021000

080048fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e0c8      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004910:	4b66      	ldr	r3, [pc, #408]	; (8004aac <HAL_RCC_ClockConfig+0x1b0>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	429a      	cmp	r2, r3
 800491c:	d910      	bls.n	8004940 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800491e:	4b63      	ldr	r3, [pc, #396]	; (8004aac <HAL_RCC_ClockConfig+0x1b0>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f023 0207 	bic.w	r2, r3, #7
 8004926:	4961      	ldr	r1, [pc, #388]	; (8004aac <HAL_RCC_ClockConfig+0x1b0>)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	4313      	orrs	r3, r2
 800492c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800492e:	4b5f      	ldr	r3, [pc, #380]	; (8004aac <HAL_RCC_ClockConfig+0x1b0>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0307 	and.w	r3, r3, #7
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	429a      	cmp	r2, r3
 800493a:	d001      	beq.n	8004940 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e0b0      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b00      	cmp	r3, #0
 800494a:	d04c      	beq.n	80049e6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	2b03      	cmp	r3, #3
 8004952:	d107      	bne.n	8004964 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004954:	4b56      	ldr	r3, [pc, #344]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b4>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d121      	bne.n	80049a4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e09e      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	2b02      	cmp	r3, #2
 800496a:	d107      	bne.n	800497c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800496c:	4b50      	ldr	r3, [pc, #320]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b4>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d115      	bne.n	80049a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e092      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d107      	bne.n	8004994 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004984:	4b4a      	ldr	r3, [pc, #296]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b4>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d109      	bne.n	80049a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e086      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004994:	4b46      	ldr	r3, [pc, #280]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b4>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800499c:	2b00      	cmp	r3, #0
 800499e:	d101      	bne.n	80049a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e07e      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049a4:	4b42      	ldr	r3, [pc, #264]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b4>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f023 0203 	bic.w	r2, r3, #3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	493f      	ldr	r1, [pc, #252]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b4>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049b6:	f7fe fa7f 	bl	8002eb8 <HAL_GetTick>
 80049ba:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049bc:	e00a      	b.n	80049d4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049be:	f7fe fa7b 	bl	8002eb8 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d901      	bls.n	80049d4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e066      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049d4:	4b36      	ldr	r3, [pc, #216]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b4>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f003 020c 	and.w	r2, r3, #12
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d1eb      	bne.n	80049be <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d008      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049f2:	4b2f      	ldr	r3, [pc, #188]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b4>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	492c      	ldr	r1, [pc, #176]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b4>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a04:	4b29      	ldr	r3, [pc, #164]	; (8004aac <HAL_RCC_ClockConfig+0x1b0>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0307 	and.w	r3, r3, #7
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d210      	bcs.n	8004a34 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a12:	4b26      	ldr	r3, [pc, #152]	; (8004aac <HAL_RCC_ClockConfig+0x1b0>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f023 0207 	bic.w	r2, r3, #7
 8004a1a:	4924      	ldr	r1, [pc, #144]	; (8004aac <HAL_RCC_ClockConfig+0x1b0>)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a22:	4b22      	ldr	r3, [pc, #136]	; (8004aac <HAL_RCC_ClockConfig+0x1b0>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d001      	beq.n	8004a34 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e036      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d008      	beq.n	8004a52 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a40:	4b1b      	ldr	r3, [pc, #108]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b4>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	4918      	ldr	r1, [pc, #96]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b4>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0308 	and.w	r3, r3, #8
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d009      	beq.n	8004a72 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a5e:	4b14      	ldr	r3, [pc, #80]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b4>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	4910      	ldr	r1, [pc, #64]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b4>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a72:	f000 f825 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 8004a76:	4602      	mov	r2, r0
 8004a78:	4b0d      	ldr	r3, [pc, #52]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b4>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	091b      	lsrs	r3, r3, #4
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	490c      	ldr	r1, [pc, #48]	; (8004ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a84:	5ccb      	ldrb	r3, [r1, r3]
 8004a86:	f003 031f 	and.w	r3, r3, #31
 8004a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a8e:	4a0a      	ldr	r2, [pc, #40]	; (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004a92:	4b0a      	ldr	r3, [pc, #40]	; (8004abc <HAL_RCC_ClockConfig+0x1c0>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f002 fad2 	bl	8007040 <HAL_InitTick>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004aa0:	7afb      	ldrb	r3, [r7, #11]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	40022000 	.word	0x40022000
 8004ab0:	40021000 	.word	0x40021000
 8004ab4:	0800a378 	.word	0x0800a378
 8004ab8:	20000044 	.word	0x20000044
 8004abc:	20000038 	.word	0x20000038

08004ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b089      	sub	sp, #36	; 0x24
 8004ac4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	61fb      	str	r3, [r7, #28]
 8004aca:	2300      	movs	r3, #0
 8004acc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ace:	4b3d      	ldr	r3, [pc, #244]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 030c 	and.w	r3, r3, #12
 8004ad6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ad8:	4b3a      	ldr	r3, [pc, #232]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f003 0303 	and.w	r3, r3, #3
 8004ae0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d005      	beq.n	8004af4 <HAL_RCC_GetSysClockFreq+0x34>
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	2b0c      	cmp	r3, #12
 8004aec:	d121      	bne.n	8004b32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d11e      	bne.n	8004b32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004af4:	4b33      	ldr	r3, [pc, #204]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0308 	and.w	r3, r3, #8
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d107      	bne.n	8004b10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b00:	4b30      	ldr	r3, [pc, #192]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b06:	0a1b      	lsrs	r3, r3, #8
 8004b08:	f003 030f 	and.w	r3, r3, #15
 8004b0c:	61fb      	str	r3, [r7, #28]
 8004b0e:	e005      	b.n	8004b1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b10:	4b2c      	ldr	r3, [pc, #176]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	091b      	lsrs	r3, r3, #4
 8004b16:	f003 030f 	and.w	r3, r3, #15
 8004b1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004b1c:	4a2a      	ldr	r2, [pc, #168]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10d      	bne.n	8004b48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b30:	e00a      	b.n	8004b48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	2b04      	cmp	r3, #4
 8004b36:	d102      	bne.n	8004b3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b38:	4b24      	ldr	r3, [pc, #144]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x10c>)
 8004b3a:	61bb      	str	r3, [r7, #24]
 8004b3c:	e004      	b.n	8004b48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	2b08      	cmp	r3, #8
 8004b42:	d101      	bne.n	8004b48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b44:	4b22      	ldr	r3, [pc, #136]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	2b0c      	cmp	r3, #12
 8004b4c:	d134      	bne.n	8004bb8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b4e:	4b1d      	ldr	r3, [pc, #116]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d003      	beq.n	8004b66 <HAL_RCC_GetSysClockFreq+0xa6>
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	2b03      	cmp	r3, #3
 8004b62:	d003      	beq.n	8004b6c <HAL_RCC_GetSysClockFreq+0xac>
 8004b64:	e005      	b.n	8004b72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004b66:	4b19      	ldr	r3, [pc, #100]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x10c>)
 8004b68:	617b      	str	r3, [r7, #20]
      break;
 8004b6a:	e005      	b.n	8004b78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004b6c:	4b18      	ldr	r3, [pc, #96]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b6e:	617b      	str	r3, [r7, #20]
      break;
 8004b70:	e002      	b.n	8004b78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	617b      	str	r3, [r7, #20]
      break;
 8004b76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b78:	4b12      	ldr	r3, [pc, #72]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	091b      	lsrs	r3, r3, #4
 8004b7e:	f003 0307 	and.w	r3, r3, #7
 8004b82:	3301      	adds	r3, #1
 8004b84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004b86:	4b0f      	ldr	r3, [pc, #60]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	0a1b      	lsrs	r3, r3, #8
 8004b8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	fb03 f202 	mul.w	r2, r3, r2
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b9e:	4b09      	ldr	r3, [pc, #36]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	0e5b      	lsrs	r3, r3, #25
 8004ba4:	f003 0303 	and.w	r3, r3, #3
 8004ba8:	3301      	adds	r3, #1
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004bb8:	69bb      	ldr	r3, [r7, #24]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3724      	adds	r7, #36	; 0x24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bc80      	pop	{r7}
 8004bc2:	4770      	bx	lr
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	0800a390 	.word	0x0800a390
 8004bcc:	00f42400 	.word	0x00f42400
 8004bd0:	007a1200 	.word	0x007a1200

08004bd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bd8:	4b02      	ldr	r3, [pc, #8]	; (8004be4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004bda:	681b      	ldr	r3, [r3, #0]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bc80      	pop	{r7}
 8004be2:	4770      	bx	lr
 8004be4:	20000044 	.word	0x20000044

08004be8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004bec:	f7ff fff2 	bl	8004bd4 <HAL_RCC_GetHCLKFreq>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	4b06      	ldr	r3, [pc, #24]	; (8004c0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	0a1b      	lsrs	r3, r3, #8
 8004bf8:	f003 0307 	and.w	r3, r3, #7
 8004bfc:	4904      	ldr	r1, [pc, #16]	; (8004c10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004bfe:	5ccb      	ldrb	r3, [r1, r3]
 8004c00:	f003 031f 	and.w	r3, r3, #31
 8004c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	0800a388 	.word	0x0800a388

08004c14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c18:	f7ff ffdc 	bl	8004bd4 <HAL_RCC_GetHCLKFreq>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	4b06      	ldr	r3, [pc, #24]	; (8004c38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	0adb      	lsrs	r3, r3, #11
 8004c24:	f003 0307 	and.w	r3, r3, #7
 8004c28:	4904      	ldr	r1, [pc, #16]	; (8004c3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c2a:	5ccb      	ldrb	r3, [r1, r3]
 8004c2c:	f003 031f 	and.w	r3, r3, #31
 8004c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	40021000 	.word	0x40021000
 8004c3c:	0800a388 	.word	0x0800a388

08004c40 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	220f      	movs	r2, #15
 8004c4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004c50:	4b11      	ldr	r3, [pc, #68]	; (8004c98 <HAL_RCC_GetClockConfig+0x58>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f003 0203 	and.w	r2, r3, #3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004c5c:	4b0e      	ldr	r3, [pc, #56]	; (8004c98 <HAL_RCC_GetClockConfig+0x58>)
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004c68:	4b0b      	ldr	r3, [pc, #44]	; (8004c98 <HAL_RCC_GetClockConfig+0x58>)
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004c74:	4b08      	ldr	r3, [pc, #32]	; (8004c98 <HAL_RCC_GetClockConfig+0x58>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	08db      	lsrs	r3, r3, #3
 8004c7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004c82:	4b06      	ldr	r3, [pc, #24]	; (8004c9c <HAL_RCC_GetClockConfig+0x5c>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0207 	and.w	r2, r3, #7
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	601a      	str	r2, [r3, #0]
}
 8004c8e:	bf00      	nop
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bc80      	pop	{r7}
 8004c96:	4770      	bx	lr
 8004c98:	40021000 	.word	0x40021000
 8004c9c:	40022000 	.word	0x40022000

08004ca0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ca8:	2300      	movs	r3, #0
 8004caa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004cac:	4b2a      	ldr	r3, [pc, #168]	; (8004d58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d003      	beq.n	8004cc0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004cb8:	f7ff fa2c 	bl	8004114 <HAL_PWREx_GetVoltageRange>
 8004cbc:	6178      	str	r0, [r7, #20]
 8004cbe:	e014      	b.n	8004cea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cc0:	4b25      	ldr	r3, [pc, #148]	; (8004d58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc4:	4a24      	ldr	r2, [pc, #144]	; (8004d58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cca:	6593      	str	r3, [r2, #88]	; 0x58
 8004ccc:	4b22      	ldr	r3, [pc, #136]	; (8004d58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd4:	60fb      	str	r3, [r7, #12]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004cd8:	f7ff fa1c 	bl	8004114 <HAL_PWREx_GetVoltageRange>
 8004cdc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004cde:	4b1e      	ldr	r3, [pc, #120]	; (8004d58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce2:	4a1d      	ldr	r2, [pc, #116]	; (8004d58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ce4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ce8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cf0:	d10b      	bne.n	8004d0a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2b80      	cmp	r3, #128	; 0x80
 8004cf6:	d919      	bls.n	8004d2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2ba0      	cmp	r3, #160	; 0xa0
 8004cfc:	d902      	bls.n	8004d04 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cfe:	2302      	movs	r3, #2
 8004d00:	613b      	str	r3, [r7, #16]
 8004d02:	e013      	b.n	8004d2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d04:	2301      	movs	r3, #1
 8004d06:	613b      	str	r3, [r7, #16]
 8004d08:	e010      	b.n	8004d2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b80      	cmp	r3, #128	; 0x80
 8004d0e:	d902      	bls.n	8004d16 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004d10:	2303      	movs	r3, #3
 8004d12:	613b      	str	r3, [r7, #16]
 8004d14:	e00a      	b.n	8004d2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b80      	cmp	r3, #128	; 0x80
 8004d1a:	d102      	bne.n	8004d22 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	613b      	str	r3, [r7, #16]
 8004d20:	e004      	b.n	8004d2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b70      	cmp	r3, #112	; 0x70
 8004d26:	d101      	bne.n	8004d2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d28:	2301      	movs	r3, #1
 8004d2a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004d2c:	4b0b      	ldr	r3, [pc, #44]	; (8004d5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f023 0207 	bic.w	r2, r3, #7
 8004d34:	4909      	ldr	r1, [pc, #36]	; (8004d5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004d3c:	4b07      	ldr	r3, [pc, #28]	; (8004d5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0307 	and.w	r3, r3, #7
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d001      	beq.n	8004d4e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e000      	b.n	8004d50 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3718      	adds	r7, #24
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	40021000 	.word	0x40021000
 8004d5c:	40022000 	.word	0x40022000

08004d60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e0be      	b.n	8004ef0 <HAL_SPI_Init+0x190>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d108      	bne.n	8004d8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d82:	d009      	beq.n	8004d98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	61da      	str	r2, [r3, #28]
 8004d8a:	e005      	b.n	8004d98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d106      	bne.n	8004db2 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 f8cb 	bl	8004f48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2202      	movs	r2, #2
 8004db6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dc8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004dd2:	d902      	bls.n	8004dda <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	60fb      	str	r3, [r7, #12]
 8004dd8:	e002      	b.n	8004de0 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004dda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dde:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004de8:	d007      	beq.n	8004dfa <HAL_SPI_Init+0x9a>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004df2:	d002      	beq.n	8004dfa <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	431a      	orrs	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	69db      	ldr	r3, [r3, #28]
 8004e2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e32:	431a      	orrs	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e3c:	ea42 0103 	orr.w	r1, r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e44:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e58:	d11b      	bne.n	8004e92 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10b      	bne.n	8004e7a <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e6a:	d903      	bls.n	8004e74 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2202      	movs	r2, #2
 8004e70:	631a      	str	r2, [r3, #48]	; 0x30
 8004e72:	e002      	b.n	8004e7a <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d107      	bne.n	8004e92 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e90:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	0c1b      	lsrs	r3, r3, #16
 8004e98:	f003 0204 	and.w	r2, r3, #4
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	f003 0310 	and.w	r3, r3, #16
 8004ea4:	431a      	orrs	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eaa:	f003 0308 	and.w	r3, r3, #8
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004eb8:	ea42 0103 	orr.w	r1, r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ed2:	d105      	bne.n	8004ee0 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	b292      	uxth	r2, r2
 8004ede:	611a      	str	r2, [r3, #16]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e01a      	b.n	8004f40 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2202      	movs	r2, #2
 8004f0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f20:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f819 	bl	8004f5a <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3708      	adds	r7, #8
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bc80      	pop	{r7}
 8004f58:	4770      	bx	lr

08004f5a <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b083      	sub	sp, #12
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8004f62:	bf00      	nop
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bc80      	pop	{r7}
 8004f6a:	4770      	bx	lr

08004f6c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b08c      	sub	sp, #48	; 0x30
 8004f70:	af02      	add	r7, sp, #8
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	603b      	str	r3, [r7, #0]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	61bb      	str	r3, [r7, #24]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004f80:	2300      	movs	r3, #0
 8004f82:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f84:	2300      	movs	r3, #0
 8004f86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f92:	d112      	bne.n	8004fba <HAL_SPI_Receive+0x4e>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10e      	bne.n	8004fba <HAL_SPI_Receive+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2204      	movs	r2, #4
 8004fa0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004fa4:	88fa      	ldrh	r2, [r7, #6]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	4613      	mov	r3, r2
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	68b9      	ldr	r1, [r7, #8]
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f000 f9c4 	bl	800533e <HAL_SPI_TransmitReceive>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	e1bd      	b.n	8005336 <HAL_SPI_Receive+0x3ca>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d101      	bne.n	8004fc8 <HAL_SPI_Receive+0x5c>
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	e1b6      	b.n	8005336 <HAL_SPI_Receive+0x3ca>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fd0:	f7fd ff72 	bl	8002eb8 <HAL_GetTick>
 8004fd4:	6238      	str	r0, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d003      	beq.n	8004fea <HAL_SPI_Receive+0x7e>
  {
    errorcode = HAL_BUSY;
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8004fe8:	e19b      	b.n	8005322 <HAL_SPI_Receive+0x3b6>
  }

  if ((pData == NULL) || (Size == 0U))
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d002      	beq.n	8004ff6 <HAL_SPI_Receive+0x8a>
 8004ff0:	88fb      	ldrh	r3, [r7, #6]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d103      	bne.n	8004ffe <HAL_SPI_Receive+0x92>
  {
    errorcode = HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8004ffc:	e191      	b.n	8005322 <HAL_SPI_Receive+0x3b6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2204      	movs	r2, #4
 8005002:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	88fa      	ldrh	r2, [r7, #6]
 8005016:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	88fa      	ldrh	r2, [r7, #6]
 800501e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005044:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005048:	d118      	bne.n	800507c <HAL_SPI_Receive+0x110>
  {
    SPI_RESET_CRC(hspi);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005058:	601a      	str	r2, [r3, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005068:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005070:	b29b      	uxth	r3, r3
 8005072:	3b01      	subs	r3, #1
 8005074:	b29a      	uxth	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005084:	d908      	bls.n	8005098 <HAL_SPI_Receive+0x12c>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	685a      	ldr	r2, [r3, #4]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005094:	605a      	str	r2, [r3, #4]
 8005096:	e007      	b.n	80050a8 <HAL_SPI_Receive+0x13c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050a6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050b0:	d10f      	bne.n	80050d2 <HAL_SPI_Receive+0x166>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80050d0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050dc:	2b40      	cmp	r3, #64	; 0x40
 80050de:	d007      	beq.n	80050f0 <HAL_SPI_Receive+0x184>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050ee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050f8:	d869      	bhi.n	80051ce <HAL_SPI_Receive+0x262>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80050fa:	e031      	b.n	8005160 <HAL_SPI_Receive+0x1f4>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b01      	cmp	r3, #1
 8005108:	d117      	bne.n	800513a <HAL_SPI_Receive+0x1ce>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f103 020c 	add.w	r2, r3, #12
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005116:	7812      	ldrb	r2, [r2, #0]
 8005118:	b2d2      	uxtb	r2, r2
 800511a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005120:	1c5a      	adds	r2, r3, #1
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800512c:	b29b      	uxth	r3, r3
 800512e:	3b01      	subs	r3, #1
 8005130:	b29a      	uxth	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005138:	e012      	b.n	8005160 <HAL_SPI_Receive+0x1f4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800513a:	f7fd febd 	bl	8002eb8 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	6a3b      	ldr	r3, [r7, #32]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	683a      	ldr	r2, [r7, #0]
 8005146:	429a      	cmp	r2, r3
 8005148:	d803      	bhi.n	8005152 <HAL_SPI_Receive+0x1e6>
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005150:	d102      	bne.n	8005158 <HAL_SPI_Receive+0x1ec>
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d103      	bne.n	8005160 <HAL_SPI_Receive+0x1f4>
        {
          errorcode = HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800515e:	e0e0      	b.n	8005322 <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005166:	b29b      	uxth	r3, r3
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1c7      	bne.n	80050fc <HAL_SPI_Receive+0x190>
 800516c:	e035      	b.n	80051da <HAL_SPI_Receive+0x26e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f003 0301 	and.w	r3, r3, #1
 8005178:	2b01      	cmp	r3, #1
 800517a:	d115      	bne.n	80051a8 <HAL_SPI_Receive+0x23c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68da      	ldr	r2, [r3, #12]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	b292      	uxth	r2, r2
 8005188:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	1c9a      	adds	r2, r3, #2
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800519a:	b29b      	uxth	r3, r3
 800519c:	3b01      	subs	r3, #1
 800519e:	b29a      	uxth	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80051a6:	e012      	b.n	80051ce <HAL_SPI_Receive+0x262>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051a8:	f7fd fe86 	bl	8002eb8 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	6a3b      	ldr	r3, [r7, #32]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d803      	bhi.n	80051c0 <HAL_SPI_Receive+0x254>
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051be:	d102      	bne.n	80051c6 <HAL_SPI_Receive+0x25a>
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d103      	bne.n	80051ce <HAL_SPI_Receive+0x262>
        {
          errorcode = HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80051cc:	e0a9      	b.n	8005322 <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1c9      	bne.n	800516e <HAL_SPI_Receive+0x202>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051e2:	d178      	bne.n	80052d6 <HAL_SPI_Receive+0x36a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80051f2:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	9300      	str	r3, [sp, #0]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	2201      	movs	r2, #1
 80051fc:	2101      	movs	r1, #1
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f001 f9b8 	bl	8006574 <SPI_WaitFlagStateUntilTimeout>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <HAL_SPI_Receive+0x2a6>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8005210:	e087      	b.n	8005322 <HAL_SPI_Receive+0x3b6>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800521a:	d907      	bls.n	800522c <HAL_SPI_Receive+0x2c0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68da      	ldr	r2, [r3, #12]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	b292      	uxth	r2, r2
 8005228:	801a      	strh	r2, [r3, #0]
 800522a:	e008      	b.n	800523e <HAL_SPI_Receive+0x2d2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f103 020c 	add.w	r2, r3, #12
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005238:	7812      	ldrb	r2, [r2, #0]
 800523a:	b2d2      	uxtb	r2, r2
 800523c:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800523e:	6a3b      	ldr	r3, [r7, #32]
 8005240:	9300      	str	r3, [sp, #0]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2201      	movs	r2, #1
 8005246:	2101      	movs	r1, #1
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f001 f993 	bl	8006574 <SPI_WaitFlagStateUntilTimeout>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d009      	beq.n	8005268 <HAL_SPI_Receive+0x2fc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005258:	f043 0202 	orr.w	r2, r3, #2
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8005266:	e05c      	b.n	8005322 <HAL_SPI_Receive+0x3b6>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005270:	d105      	bne.n	800527e <HAL_SPI_Receive+0x312>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	e02b      	b.n	80052d6 <HAL_SPI_Receive+0x36a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	330c      	adds	r3, #12
 8005284:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	b2db      	uxtb	r3, r3
 800528c:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800528e:	7dfb      	ldrb	r3, [r7, #23]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005298:	d11d      	bne.n	80052d6 <HAL_SPI_Receive+0x36a>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d119      	bne.n	80052d6 <HAL_SPI_Receive+0x36a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80052a2:	6a3b      	ldr	r3, [r7, #32]
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2201      	movs	r2, #1
 80052aa:	2101      	movs	r1, #1
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f001 f961 	bl	8006574 <SPI_WaitFlagStateUntilTimeout>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d009      	beq.n	80052cc <HAL_SPI_Receive+0x360>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052bc:	f043 0202 	orr.w	r2, r3, #2
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80052ca:	e02a      	b.n	8005322 <HAL_SPI_Receive+0x3b6>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 80052d4:	7dfb      	ldrb	r3, [r7, #23]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052d6:	6a3a      	ldr	r2, [r7, #32]
 80052d8:	6839      	ldr	r1, [r7, #0]
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f001 fa68 	bl	80067b0 <SPI_EndRxTransaction>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d002      	beq.n	80052ec <HAL_SPI_Receive+0x380>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2220      	movs	r2, #32
 80052ea:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f003 0310 	and.w	r3, r3, #16
 80052f6:	2b10      	cmp	r3, #16
 80052f8:	d10a      	bne.n	8005310 <HAL_SPI_Receive+0x3a4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052fe:	f043 0202 	orr.w	r2, r3, #2
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800530e:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005314:	2b00      	cmp	r3, #0
 8005316:	d003      	beq.n	8005320 <HAL_SPI_Receive+0x3b4>
  {
    errorcode = HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800531e:	e000      	b.n	8005322 <HAL_SPI_Receive+0x3b6>
  }

error :
 8005320:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005332:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005336:	4618      	mov	r0, r3
 8005338:	3728      	adds	r7, #40	; 0x28
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b092      	sub	sp, #72	; 0x48
 8005342:	af02      	add	r7, sp, #8
 8005344:	60f8      	str	r0, [r7, #12]
 8005346:	60b9      	str	r1, [r7, #8]
 8005348:	607a      	str	r2, [r7, #4]
 800534a:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 800534c:	2300      	movs	r3, #0
 800534e:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005350:	2300      	movs	r3, #0
 8005352:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005354:	2301      	movs	r3, #1
 8005356:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005358:	2300      	movs	r3, #0
 800535a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005364:	2b01      	cmp	r3, #1
 8005366:	d101      	bne.n	800536c <HAL_SPI_TransmitReceive+0x2e>
 8005368:	2302      	movs	r3, #2
 800536a:	e2c8      	b.n	80058fe <HAL_SPI_TransmitReceive+0x5c0>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005374:	f7fd fda0 	bl	8002eb8 <HAL_GetTick>
 8005378:	6378      	str	r0, [r7, #52]	; 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005380:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  tmp_mode            = hspi->Init.Mode;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	62fb      	str	r3, [r7, #44]	; 0x2c
  initial_TxXferCount = Size;
 800538a:	887b      	ldrh	r3, [r7, #2]
 800538c:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 800538e:	887b      	ldrh	r3, [r7, #2]
 8005390:	853b      	strh	r3, [r7, #40]	; 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	627b      	str	r3, [r7, #36]	; 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80053a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d00f      	beq.n	80053ca <HAL_SPI_TransmitReceive+0x8c>
 80053aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053b0:	d107      	bne.n	80053c2 <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d103      	bne.n	80053c2 <HAL_SPI_TransmitReceive+0x84>
 80053ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80053be:	2b04      	cmp	r3, #4
 80053c0:	d003      	beq.n	80053ca <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 80053c2:	2302      	movs	r3, #2
 80053c4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 80053c8:	e28f      	b.n	80058ea <HAL_SPI_TransmitReceive+0x5ac>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d005      	beq.n	80053dc <HAL_SPI_TransmitReceive+0x9e>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d002      	beq.n	80053dc <HAL_SPI_TransmitReceive+0x9e>
 80053d6:	887b      	ldrh	r3, [r7, #2]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d103      	bne.n	80053e4 <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 80053e2:	e282      	b.n	80058ea <HAL_SPI_TransmitReceive+0x5ac>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b04      	cmp	r3, #4
 80053ee:	d003      	beq.n	80053f8 <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2205      	movs	r2, #5
 80053f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	887a      	ldrh	r2, [r7, #2]
 8005408:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	887a      	ldrh	r2, [r7, #2]
 8005410:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	887a      	ldrh	r2, [r7, #2]
 800541e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	887a      	ldrh	r2, [r7, #2]
 8005424:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005436:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800543a:	d10f      	bne.n	800545c <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800544a:	601a      	str	r2, [r3, #0]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800545a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005464:	d802      	bhi.n	800546c <HAL_SPI_TransmitReceive+0x12e>
 8005466:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005468:	2b01      	cmp	r3, #1
 800546a:	d908      	bls.n	800547e <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800547a:	605a      	str	r2, [r3, #4]
 800547c:	e007      	b.n	800548e <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800548c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005498:	2b40      	cmp	r3, #64	; 0x40
 800549a:	d007      	beq.n	80054ac <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054b4:	f240 80a4 	bls.w	8005600 <HAL_SPI_TransmitReceive+0x2c2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d003      	beq.n	80054c8 <HAL_SPI_TransmitReceive+0x18a>
 80054c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	f040 808e 	bne.w	80055e4 <HAL_SPI_TransmitReceive+0x2a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054cc:	881a      	ldrh	r2, [r3, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d8:	1c9a      	adds	r2, r3, #2
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	3b01      	subs	r3, #1
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054ec:	e07a      	b.n	80055e4 <HAL_SPI_TransmitReceive+0x2a6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f003 0302 	and.w	r3, r3, #2
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d13f      	bne.n	800557c <HAL_SPI_TransmitReceive+0x23e>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005500:	b29b      	uxth	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d03a      	beq.n	800557c <HAL_SPI_TransmitReceive+0x23e>
 8005506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005508:	2b01      	cmp	r3, #1
 800550a:	d137      	bne.n	800557c <HAL_SPI_TransmitReceive+0x23e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005510:	881a      	ldrh	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551c:	1c9a      	adds	r2, r3, #2
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005526:	b29b      	uxth	r3, r3
 8005528:	3b01      	subs	r3, #1
 800552a:	b29a      	uxth	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005530:	2300      	movs	r3, #0
 8005532:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005538:	b29b      	uxth	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d11e      	bne.n	800557c <HAL_SPI_TransmitReceive+0x23e>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005546:	d119      	bne.n	800557c <HAL_SPI_TransmitReceive+0x23e>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	f003 0304 	and.w	r3, r3, #4
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10c      	bne.n	800556c <HAL_SPI_TransmitReceive+0x22e>
 8005552:	6a3b      	ldr	r3, [r7, #32]
 8005554:	f003 0308 	and.w	r3, r3, #8
 8005558:	2b00      	cmp	r3, #0
 800555a:	d007      	beq.n	800556c <HAL_SPI_TransmitReceive+0x22e>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800556a:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800557a:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b01      	cmp	r3, #1
 8005588:	d11c      	bne.n	80055c4 <HAL_SPI_TransmitReceive+0x286>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005590:	b29b      	uxth	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d016      	beq.n	80055c4 <HAL_SPI_TransmitReceive+0x286>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68da      	ldr	r2, [r3, #12]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a0:	b292      	uxth	r2, r2
 80055a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a8:	1c9a      	adds	r2, r3, #2
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	3b01      	subs	r3, #1
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055c0:	2301      	movs	r3, #1
 80055c2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80055c4:	f7fd fc78 	bl	8002eb8 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d807      	bhi.n	80055e4 <HAL_SPI_TransmitReceive+0x2a6>
 80055d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055da:	d003      	beq.n	80055e4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        errorcode = HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 80055e2:	e182      	b.n	80058ea <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f47f af7f 	bne.w	80054ee <HAL_SPI_TransmitReceive+0x1b0>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f47f af78 	bne.w	80054ee <HAL_SPI_TransmitReceive+0x1b0>
 80055fe:	e103      	b.n	8005808 <HAL_SPI_TransmitReceive+0x4ca>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d003      	beq.n	8005610 <HAL_SPI_TransmitReceive+0x2d2>
 8005608:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800560a:	2b01      	cmp	r3, #1
 800560c:	f040 80ef 	bne.w	80057ee <HAL_SPI_TransmitReceive+0x4b0>
    {
      if (hspi->TxXferCount > 1U)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005614:	b29b      	uxth	r3, r3
 8005616:	2b01      	cmp	r3, #1
 8005618:	d912      	bls.n	8005640 <HAL_SPI_TransmitReceive+0x302>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561e:	881a      	ldrh	r2, [r3, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562a:	1c9a      	adds	r2, r3, #2
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005634:	b29b      	uxth	r3, r3
 8005636:	3b02      	subs	r3, #2
 8005638:	b29a      	uxth	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800563e:	e0d6      	b.n	80057ee <HAL_SPI_TransmitReceive+0x4b0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	330c      	adds	r3, #12
 800564a:	7812      	ldrb	r2, [r2, #0]
 800564c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005652:	1c5a      	adds	r2, r3, #1
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800565c:	b29b      	uxth	r3, r3
 800565e:	3b01      	subs	r3, #1
 8005660:	b29a      	uxth	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005666:	e0c2      	b.n	80057ee <HAL_SPI_TransmitReceive+0x4b0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b02      	cmp	r3, #2
 8005674:	d158      	bne.n	8005728 <HAL_SPI_TransmitReceive+0x3ea>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800567a:	b29b      	uxth	r3, r3
 800567c:	2b00      	cmp	r3, #0
 800567e:	d053      	beq.n	8005728 <HAL_SPI_TransmitReceive+0x3ea>
 8005680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005682:	2b01      	cmp	r3, #1
 8005684:	d150      	bne.n	8005728 <HAL_SPI_TransmitReceive+0x3ea>
      {
        if (hspi->TxXferCount > 1U)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800568a:	b29b      	uxth	r3, r3
 800568c:	2b01      	cmp	r3, #1
 800568e:	d912      	bls.n	80056b6 <HAL_SPI_TransmitReceive+0x378>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005694:	881a      	ldrh	r2, [r3, #0]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a0:	1c9a      	adds	r2, r3, #2
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	3b02      	subs	r3, #2
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056b4:	e012      	b.n	80056dc <HAL_SPI_TransmitReceive+0x39e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	330c      	adds	r3, #12
 80056c0:	7812      	ldrb	r2, [r2, #0]
 80056c2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c8:	1c5a      	adds	r2, r3, #1
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	3b01      	subs	r3, #1
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056dc:	2300      	movs	r3, #0
 80056de:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d11e      	bne.n	8005728 <HAL_SPI_TransmitReceive+0x3ea>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056f2:	d119      	bne.n	8005728 <HAL_SPI_TransmitReceive+0x3ea>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	f003 0304 	and.w	r3, r3, #4
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10c      	bne.n	8005718 <HAL_SPI_TransmitReceive+0x3da>
 80056fe:	6a3b      	ldr	r3, [r7, #32]
 8005700:	f003 0308 	and.w	r3, r3, #8
 8005704:	2b00      	cmp	r3, #0
 8005706:	d007      	beq.n	8005718 <HAL_SPI_TransmitReceive+0x3da>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005716:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005726:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b01      	cmp	r3, #1
 8005734:	d148      	bne.n	80057c8 <HAL_SPI_TransmitReceive+0x48a>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800573c:	b29b      	uxth	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d042      	beq.n	80057c8 <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->RxXferCount > 1U)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005748:	b29b      	uxth	r3, r3
 800574a:	2b01      	cmp	r3, #1
 800574c:	d923      	bls.n	8005796 <HAL_SPI_TransmitReceive+0x458>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68da      	ldr	r2, [r3, #12]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005758:	b292      	uxth	r2, r2
 800575a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005760:	1c9a      	adds	r2, r3, #2
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800576c:	b29b      	uxth	r3, r3
 800576e:	3b02      	subs	r3, #2
 8005770:	b29a      	uxth	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800577e:	b29b      	uxth	r3, r3
 8005780:	2b01      	cmp	r3, #1
 8005782:	d81f      	bhi.n	80057c4 <HAL_SPI_TransmitReceive+0x486>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005792:	605a      	str	r2, [r3, #4]
 8005794:	e016      	b.n	80057c4 <HAL_SPI_TransmitReceive+0x486>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f103 020c 	add.w	r2, r3, #12
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a2:	7812      	ldrb	r2, [r2, #0]
 80057a4:	b2d2      	uxtb	r2, r2
 80057a6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ac:	1c5a      	adds	r2, r3, #1
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	3b01      	subs	r3, #1
 80057bc:	b29a      	uxth	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80057c4:	2301      	movs	r3, #1
 80057c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80057c8:	f7fd fb76 	bl	8002eb8 <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d803      	bhi.n	80057e0 <HAL_SPI_TransmitReceive+0x4a2>
 80057d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057de:	d102      	bne.n	80057e6 <HAL_SPI_TransmitReceive+0x4a8>
 80057e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d103      	bne.n	80057ee <HAL_SPI_TransmitReceive+0x4b0>
      {
        errorcode = HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 80057ec:	e07d      	b.n	80058ea <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f47f af37 	bne.w	8005668 <HAL_SPI_TransmitReceive+0x32a>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005800:	b29b      	uxth	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	f47f af30 	bne.w	8005668 <HAL_SPI_TransmitReceive+0x32a>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005810:	d146      	bne.n	80058a0 <HAL_SPI_TransmitReceive+0x562>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005814:	9300      	str	r3, [sp, #0]
 8005816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005818:	2201      	movs	r2, #1
 800581a:	2101      	movs	r1, #1
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f000 fea9 	bl	8006574 <SPI_WaitFlagStateUntilTimeout>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d009      	beq.n	800583c <HAL_SPI_TransmitReceive+0x4fe>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800582c:	f043 0202 	orr.w	r2, r3, #2
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      goto error;
 800583a:	e056      	b.n	80058ea <HAL_SPI_TransmitReceive+0x5ac>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005844:	d105      	bne.n	8005852 <HAL_SPI_TransmitReceive+0x514>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	e026      	b.n	80058a0 <HAL_SPI_TransmitReceive+0x562>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	330c      	adds	r3, #12
 8005858:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	b2db      	uxtb	r3, r3
 8005860:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005862:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005868:	2b02      	cmp	r3, #2
 800586a:	d119      	bne.n	80058a0 <HAL_SPI_TransmitReceive+0x562>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800586c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800586e:	9300      	str	r3, [sp, #0]
 8005870:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005872:	2201      	movs	r2, #1
 8005874:	2101      	movs	r1, #1
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f000 fe7c 	bl	8006574 <SPI_WaitFlagStateUntilTimeout>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d009      	beq.n	8005896 <HAL_SPI_TransmitReceive+0x558>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005886:	f043 0202 	orr.w	r2, r3, #2
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          goto error;
 8005894:	e029      	b.n	80058ea <HAL_SPI_TransmitReceive+0x5ac>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	b2db      	uxtb	r3, r3
 800589c:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 800589e:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f003 0310 	and.w	r3, r3, #16
 80058aa:	2b10      	cmp	r3, #16
 80058ac:	d10d      	bne.n	80058ca <HAL_SPI_TransmitReceive+0x58c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058b2:	f043 0202 	orr.w	r2, r3, #2
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80058c2:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058cc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f000 ffc6 	bl	8006860 <SPI_EndRxTxTransaction>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d006      	beq.n	80058e8 <HAL_SPI_TransmitReceive+0x5aa>
  {
    errorcode = HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2220      	movs	r2, #32
 80058e4:	661a      	str	r2, [r3, #96]	; 0x60
 80058e6:	e000      	b.n	80058ea <HAL_SPI_TransmitReceive+0x5ac>
  }

error :
 80058e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80058fa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3740      	adds	r7, #64	; 0x40
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
	...

08005908 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005908:	b480      	push	{r7}
 800590a:	b087      	sub	sp, #28
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	4613      	mov	r3, r2
 8005914:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005916:	2300      	movs	r3, #0
 8005918:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005920:	2b01      	cmp	r3, #1
 8005922:	d101      	bne.n	8005928 <HAL_SPI_Transmit_IT+0x20>
 8005924:	2302      	movs	r3, #2
 8005926:	e087      	b.n	8005a38 <HAL_SPI_Transmit_IT+0x130>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d002      	beq.n	800593c <HAL_SPI_Transmit_IT+0x34>
 8005936:	88fb      	ldrh	r3, [r7, #6]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d102      	bne.n	8005942 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005940:	e075      	b.n	8005a2e <HAL_SPI_Transmit_IT+0x126>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b01      	cmp	r3, #1
 800594c:	d002      	beq.n	8005954 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 800594e:	2302      	movs	r3, #2
 8005950:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005952:	e06c      	b.n	8005a2e <HAL_SPI_Transmit_IT+0x126>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2203      	movs	r2, #3
 8005958:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	88fa      	ldrh	r2, [r7, #6]
 800596c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	88fa      	ldrh	r2, [r7, #6]
 8005972:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005998:	d903      	bls.n	80059a2 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	4a29      	ldr	r2, [pc, #164]	; (8005a44 <HAL_SPI_Transmit_IT+0x13c>)
 800599e:	651a      	str	r2, [r3, #80]	; 0x50
 80059a0:	e002      	b.n	80059a8 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	4a28      	ldr	r2, [pc, #160]	; (8005a48 <HAL_SPI_Transmit_IT+0x140>)
 80059a6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059b0:	d10f      	bne.n	80059d2 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059d0:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059da:	d10f      	bne.n	80059fc <HAL_SPI_Transmit_IT+0xf4>
  {
    SPI_RESET_CRC(hspi);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059ea:	601a      	str	r2, [r3, #0]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059fa:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	685a      	ldr	r2, [r3, #4]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8005a0a:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a16:	2b40      	cmp	r3, #64	; 0x40
 8005a18:	d008      	beq.n	8005a2c <HAL_SPI_Transmit_IT+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a28:	601a      	str	r2, [r3, #0]
 8005a2a:	e000      	b.n	8005a2e <HAL_SPI_Transmit_IT+0x126>
  }

error :
 8005a2c:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	371c      	adds	r7, #28
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bc80      	pop	{r7}
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	08006515 	.word	0x08006515
 8005a48:	080064b5 	.word	0x080064b5

08005a4c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	4613      	mov	r3, r2
 8005a58:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d110      	bne.n	8005a88 <HAL_SPI_Receive_IT+0x3c>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a6e:	d10b      	bne.n	8005a88 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2204      	movs	r2, #4
 8005a74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8005a78:	88fb      	ldrh	r3, [r7, #6]
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	68b9      	ldr	r1, [r7, #8]
 8005a7e:	68f8      	ldr	r0, [r7, #12]
 8005a80:	f000 f8bc 	bl	8005bfc <HAL_SPI_TransmitReceive_IT>
 8005a84:	4603      	mov	r3, r0
 8005a86:	e0b1      	b.n	8005bec <HAL_SPI_Receive_IT+0x1a0>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d101      	bne.n	8005a96 <HAL_SPI_Receive_IT+0x4a>
 8005a92:	2302      	movs	r3, #2
 8005a94:	e0aa      	b.n	8005bec <HAL_SPI_Receive_IT+0x1a0>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d002      	beq.n	8005ab0 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8005aaa:	2302      	movs	r3, #2
 8005aac:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005aae:	e098      	b.n	8005be2 <HAL_SPI_Receive_IT+0x196>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d002      	beq.n	8005abc <HAL_SPI_Receive_IT+0x70>
 8005ab6:	88fb      	ldrh	r3, [r7, #6]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d102      	bne.n	8005ac2 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ac0:	e08f      	b.n	8005be2 <HAL_SPI_Receive_IT+0x196>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2204      	movs	r2, #4
 8005ac6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	68ba      	ldr	r2, [r7, #8]
 8005ad4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	88fa      	ldrh	r2, [r7, #6]
 8005ada:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	88fa      	ldrh	r2, [r7, #6]
 8005ae2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b06:	d90b      	bls.n	8005b20 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	685a      	ldr	r2, [r3, #4]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b16:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	4a36      	ldr	r2, [pc, #216]	; (8005bf4 <HAL_SPI_Receive_IT+0x1a8>)
 8005b1c:	64da      	str	r2, [r3, #76]	; 0x4c
 8005b1e:	e00a      	b.n	8005b36 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	685a      	ldr	r2, [r3, #4]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b2e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	4a31      	ldr	r2, [pc, #196]	; (8005bf8 <HAL_SPI_Receive_IT+0x1ac>)
 8005b34:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b3e:	d10f      	bne.n	8005b60 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b4e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b5e:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b68:	d11f      	bne.n	8005baa <HAL_SPI_Receive_IT+0x15e>
  {
    hspi->CRCSize = 1U;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	649a      	str	r2, [r3, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b78:	d806      	bhi.n	8005b88 <HAL_SPI_Receive_IT+0x13c>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d102      	bne.n	8005b88 <HAL_SPI_Receive_IT+0x13c>
    {
      hspi->CRCSize = 2U;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2202      	movs	r2, #2
 8005b86:	649a      	str	r2, [r3, #72]	; 0x48
    }
    SPI_RESET_CRC(hspi);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b96:	601a      	str	r2, [r3, #0]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ba6:	601a      	str	r2, [r3, #0]
 8005ba8:	e002      	b.n	8005bb0 <HAL_SPI_Receive_IT+0x164>
  }
  else
  {
    hspi->CRCSize = 0U;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	649a      	str	r2, [r3, #72]	; 0x48
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8005bbe:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bca:	2b40      	cmp	r3, #64	; 0x40
 8005bcc:	d008      	beq.n	8005be0 <HAL_SPI_Receive_IT+0x194>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	e000      	b.n	8005be2 <HAL_SPI_Receive_IT+0x196>
  }

error :
 8005be0:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3718      	adds	r7, #24
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	0800642d 	.word	0x0800642d
 8005bf8:	0800636d 	.word	0x0800636d

08005bfc <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
 8005c08:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d101      	bne.n	8005c1c <HAL_SPI_TransmitReceive_IT+0x20>
 8005c18:	2302      	movs	r3, #2
 8005c1a:	e0b9      	b.n	8005d90 <HAL_SPI_TransmitReceive_IT+0x194>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c2a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c32:	7dbb      	ldrb	r3, [r7, #22]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d00d      	beq.n	8005c54 <HAL_SPI_TransmitReceive_IT+0x58>
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c3e:	d106      	bne.n	8005c4e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d102      	bne.n	8005c4e <HAL_SPI_TransmitReceive_IT+0x52>
 8005c48:	7dbb      	ldrb	r3, [r7, #22]
 8005c4a:	2b04      	cmp	r3, #4
 8005c4c:	d002      	beq.n	8005c54 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8005c4e:	2302      	movs	r3, #2
 8005c50:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c52:	e098      	b.n	8005d86 <HAL_SPI_TransmitReceive_IT+0x18a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d005      	beq.n	8005c66 <HAL_SPI_TransmitReceive_IT+0x6a>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d002      	beq.n	8005c66 <HAL_SPI_TransmitReceive_IT+0x6a>
 8005c60:	887b      	ldrh	r3, [r7, #2]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d102      	bne.n	8005c6c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c6a:	e08c      	b.n	8005d86 <HAL_SPI_TransmitReceive_IT+0x18a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b04      	cmp	r3, #4
 8005c76:	d003      	beq.n	8005c80 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2205      	movs	r2, #5
 8005c7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	887a      	ldrh	r2, [r7, #2]
 8005c90:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	887a      	ldrh	r2, [r7, #2]
 8005c96:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	887a      	ldrh	r2, [r7, #2]
 8005ca2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	887a      	ldrh	r2, [r7, #2]
 8005caa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cb6:	d906      	bls.n	8005cc6 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	4a38      	ldr	r2, [pc, #224]	; (8005d9c <HAL_SPI_TransmitReceive_IT+0x1a0>)
 8005cbc:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	4a37      	ldr	r2, [pc, #220]	; (8005da0 <HAL_SPI_TransmitReceive_IT+0x1a4>)
 8005cc2:	651a      	str	r2, [r3, #80]	; 0x50
 8005cc4:	e005      	b.n	8005cd2 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	4a36      	ldr	r2, [pc, #216]	; (8005da4 <HAL_SPI_TransmitReceive_IT+0x1a8>)
 8005cca:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	4a36      	ldr	r2, [pc, #216]	; (8005da8 <HAL_SPI_TransmitReceive_IT+0x1ac>)
 8005cd0:	651a      	str	r2, [r3, #80]	; 0x50
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cda:	d11f      	bne.n	8005d1c <HAL_SPI_TransmitReceive_IT+0x120>
  {
    hspi->CRCSize = 1U;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	649a      	str	r2, [r3, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cea:	d806      	bhi.n	8005cfa <HAL_SPI_TransmitReceive_IT+0xfe>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d102      	bne.n	8005cfa <HAL_SPI_TransmitReceive_IT+0xfe>
    {
      hspi->CRCSize = 2U;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	649a      	str	r2, [r3, #72]	; 0x48
    }
    SPI_RESET_CRC(hspi);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d08:	601a      	str	r2, [r3, #0]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d18:	601a      	str	r2, [r3, #0]
 8005d1a:	e002      	b.n	8005d22 <HAL_SPI_TransmitReceive_IT+0x126>
  }
  else
  {
    hspi->CRCSize = 0U;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	649a      	str	r2, [r3, #72]	; 0x48
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d2a:	d802      	bhi.n	8005d32 <HAL_SPI_TransmitReceive_IT+0x136>
 8005d2c:	887b      	ldrh	r3, [r7, #2]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d908      	bls.n	8005d44 <HAL_SPI_TransmitReceive_IT+0x148>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	685a      	ldr	r2, [r3, #4]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d40:	605a      	str	r2, [r3, #4]
 8005d42:	e007      	b.n	8005d54 <HAL_SPI_TransmitReceive_IT+0x158>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d52:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	685a      	ldr	r2, [r3, #4]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8005d62:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6e:	2b40      	cmp	r3, #64	; 0x40
 8005d70:	d008      	beq.n	8005d84 <HAL_SPI_TransmitReceive_IT+0x188>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d80:	601a      	str	r2, [r3, #0]
 8005d82:	e000      	b.n	8005d86 <HAL_SPI_TransmitReceive_IT+0x18a>
  }

error :
 8005d84:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	371c      	adds	r7, #28
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bc80      	pop	{r7}
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	080061f5 	.word	0x080061f5
 8005da0:	080062a5 	.word	0x080062a5
 8005da4:	08005ffd 	.word	0x08005ffd
 8005da8:	08006139 	.word	0x08006139

08005dac <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b088      	sub	sp, #32
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	099b      	lsrs	r3, r3, #6
 8005dc8:	f003 0301 	and.w	r3, r3, #1
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10f      	bne.n	8005df0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00a      	beq.n	8005df0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	099b      	lsrs	r3, r3, #6
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d004      	beq.n	8005df0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	4798      	blx	r3
    return;
 8005dee:	e0d7      	b.n	8005fa0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	085b      	lsrs	r3, r3, #1
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00a      	beq.n	8005e12 <HAL_SPI_IRQHandler+0x66>
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	09db      	lsrs	r3, r3, #7
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d004      	beq.n	8005e12 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	4798      	blx	r3
    return;
 8005e10:	e0c6      	b.n	8005fa0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	095b      	lsrs	r3, r3, #5
 8005e16:	f003 0301 	and.w	r3, r3, #1
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10c      	bne.n	8005e38 <HAL_SPI_IRQHandler+0x8c>
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	099b      	lsrs	r3, r3, #6
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d106      	bne.n	8005e38 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	0a1b      	lsrs	r3, r3, #8
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f000 80b4 	beq.w	8005fa0 <HAL_SPI_IRQHandler+0x1f4>
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	095b      	lsrs	r3, r3, #5
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f000 80ad 	beq.w	8005fa0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	099b      	lsrs	r3, r3, #6
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d023      	beq.n	8005e9a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b03      	cmp	r3, #3
 8005e5c:	d011      	beq.n	8005e82 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e62:	f043 0204 	orr.w	r2, r3, #4
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	617b      	str	r3, [r7, #20]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	617b      	str	r3, [r7, #20]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	617b      	str	r3, [r7, #20]
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	e00b      	b.n	8005e9a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e82:	2300      	movs	r3, #0
 8005e84:	613b      	str	r3, [r7, #16]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	613b      	str	r3, [r7, #16]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	613b      	str	r3, [r7, #16]
 8005e96:	693b      	ldr	r3, [r7, #16]
        return;
 8005e98:	e082      	b.n	8005fa0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	095b      	lsrs	r3, r3, #5
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d014      	beq.n	8005ed0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eaa:	f043 0201 	orr.w	r2, r3, #1
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	60fb      	str	r3, [r7, #12]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	60fb      	str	r3, [r7, #12]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ecc:	601a      	str	r2, [r3, #0]
 8005ece:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	0a1b      	lsrs	r3, r3, #8
 8005ed4:	f003 0301 	and.w	r3, r3, #1
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00c      	beq.n	8005ef6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ee0:	f043 0208 	orr.w	r2, r3, #8
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005ee8:	2300      	movs	r3, #0
 8005eea:	60bb      	str	r3, [r7, #8]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	60bb      	str	r3, [r7, #8]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d04f      	beq.n	8005f9e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	685a      	ldr	r2, [r3, #4]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f0c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	f003 0302 	and.w	r3, r3, #2
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d104      	bne.n	8005f2a <HAL_SPI_IRQHandler+0x17e>
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d034      	beq.n	8005f94 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 0203 	bic.w	r2, r2, #3
 8005f38:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d011      	beq.n	8005f66 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f46:	4a18      	ldr	r2, [pc, #96]	; (8005fa8 <HAL_SPI_IRQHandler+0x1fc>)
 8005f48:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7fd f8bf 	bl	80030d2 <HAL_DMA_Abort_IT>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d005      	beq.n	8005f66 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d016      	beq.n	8005f9c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f72:	4a0d      	ldr	r2, [pc, #52]	; (8005fa8 <HAL_SPI_IRQHandler+0x1fc>)
 8005f74:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7fd f8a9 	bl	80030d2 <HAL_DMA_Abort_IT>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00a      	beq.n	8005f9c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005f92:	e003      	b.n	8005f9c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 f812 	bl	8005fbe <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005f9a:	e000      	b.n	8005f9e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005f9c:	bf00      	nop
    return;
 8005f9e:	bf00      	nop
  }
}
 8005fa0:	3720      	adds	r7, #32
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	08005fd1 	.word	0x08005fd1

08005fac <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bc80      	pop	{r7}
 8005fbc:	4770      	bx	lr

08005fbe <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b083      	sub	sp, #12
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005fc6:	bf00      	nop
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bc80      	pop	{r7}
 8005fce:	4770      	bx	lr

08005fd0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fdc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f7ff ffe6 	bl	8005fbe <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005ff2:	bf00      	nop
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
	...

08005ffc <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800600a:	b29b      	uxth	r3, r3
 800600c:	2b01      	cmp	r3, #1
 800600e:	d923      	bls.n	8006058 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68da      	ldr	r2, [r3, #12]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601a:	b292      	uxth	r2, r2
 800601c:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006022:	1c9a      	adds	r2, r3, #2
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800602e:	b29b      	uxth	r3, r3
 8006030:	3b02      	subs	r3, #2
 8006032:	b29a      	uxth	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006040:	b29b      	uxth	r3, r3
 8006042:	2b01      	cmp	r3, #1
 8006044:	d11f      	bne.n	8006086 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006054:	605a      	str	r2, [r3, #4]
 8006056:	e016      	b.n	8006086 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f103 020c 	add.w	r2, r3, #12
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006064:	7812      	ldrb	r2, [r2, #0]
 8006066:	b2d2      	uxtb	r2, r2
 8006068:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606e:	1c5a      	adds	r2, r3, #1
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800607a:	b29b      	uxth	r3, r3
 800607c:	3b01      	subs	r3, #1
 800607e:	b29a      	uxth	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800608c:	b29b      	uxth	r3, r3
 800608e:	2b00      	cmp	r3, #0
 8006090:	d120      	bne.n	80060d4 <SPI_2linesRxISR_8BIT+0xd8>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800609a:	d10b      	bne.n	80060b4 <SPI_2linesRxISR_8BIT+0xb8>
    {
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	685a      	ldr	r2, [r3, #4]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060aa:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a0b      	ldr	r2, [pc, #44]	; (80060dc <SPI_2linesRxISR_8BIT+0xe0>)
 80060b0:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 80060b2:	e00f      	b.n	80060d4 <SPI_2linesRxISR_8BIT+0xd8>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	685a      	ldr	r2, [r3, #4]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80060c2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d102      	bne.n	80060d4 <SPI_2linesRxISR_8BIT+0xd8>
    {
      SPI_CloseRxTx_ISR(hspi);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 fc0c 	bl	80068ec <SPI_CloseRxTx_ISR>
    }
  }
}
 80060d4:	3708      	adds	r7, #8
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	080060e1 	.word	0x080060e1

080060e0 <SPI_2linesRxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80060e8:	2300      	movs	r3, #0
 80060ea:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	330c      	adds	r3, #12
 80060f2:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 80060fc:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006102:	1e5a      	subs	r2, r3, #1
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	649a      	str	r2, [r3, #72]	; 0x48

  /* Check end of the reception */
  if (hspi->CRCSize == 0U)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800610c:	2b00      	cmp	r3, #0
 800610e:	d10f      	bne.n	8006130 <SPI_2linesRxISR_8BITCRC+0x50>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	685a      	ldr	r2, [r3, #4]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800611e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006124:	b29b      	uxth	r3, r3
 8006126:	2b00      	cmp	r3, #0
 8006128:	d102      	bne.n	8006130 <SPI_2linesRxISR_8BITCRC+0x50>
    {
      SPI_CloseRxTx_ISR(hspi);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 fbde 	bl	80068ec <SPI_CloseRxTx_ISR>
    }
  }
}
 8006130:	bf00      	nop
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006144:	b29b      	uxth	r3, r3
 8006146:	2b01      	cmp	r3, #1
 8006148:	d912      	bls.n	8006170 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614e:	881a      	ldrh	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615a:	1c9a      	adds	r2, r3, #2
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006164:	b29b      	uxth	r3, r3
 8006166:	3b02      	subs	r3, #2
 8006168:	b29a      	uxth	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800616e:	e012      	b.n	8006196 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	330c      	adds	r3, #12
 800617a:	7812      	ldrb	r2, [r2, #0]
 800617c:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006182:	1c5a      	adds	r2, r3, #1
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800618c:	b29b      	uxth	r3, r3
 800618e:	3b01      	subs	r3, #1
 8006190:	b29a      	uxth	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800619a:	b29b      	uxth	r3, r3
 800619c:	2b00      	cmp	r3, #0
 800619e:	d126      	bne.n	80061ee <SPI_2linesTxISR_8BIT+0xb6>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061a8:	d110      	bne.n	80061cc <SPI_2linesTxISR_8BIT+0x94>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80061b8:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061c8:	605a      	str	r2, [r3, #4]
      return;
 80061ca:	e010      	b.n	80061ee <SPI_2linesTxISR_8BIT+0xb6>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	685a      	ldr	r2, [r3, #4]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061da:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d102      	bne.n	80061ee <SPI_2linesTxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 fb7f 	bl	80068ec <SPI_CloseRxTx_ISR>
    }
  }
}
 80061ee:	3708      	adds	r7, #8
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68da      	ldr	r2, [r3, #12]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006206:	b292      	uxth	r2, r2
 8006208:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620e:	1c9a      	adds	r2, r3, #2
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800621a:	b29b      	uxth	r3, r3
 800621c:	3b01      	subs	r3, #1
 800621e:	b29a      	uxth	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800622c:	b29b      	uxth	r3, r3
 800622e:	2b00      	cmp	r3, #0
 8006230:	d118      	bne.n	8006264 <SPI_2linesRxISR_16BIT+0x70>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800623a:	d103      	bne.n	8006244 <SPI_2linesRxISR_16BIT+0x50>
    {
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a0b      	ldr	r2, [pc, #44]	; (800626c <SPI_2linesRxISR_16BIT+0x78>)
 8006240:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 8006242:	e00f      	b.n	8006264 <SPI_2linesRxISR_16BIT+0x70>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	685a      	ldr	r2, [r3, #4]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006252:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006258:	b29b      	uxth	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d102      	bne.n	8006264 <SPI_2linesRxISR_16BIT+0x70>
    {
      SPI_CloseRxTx_ISR(hspi);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 fb44 	bl	80068ec <SPI_CloseRxTx_ISR>
    }
  }
}
 8006264:	3708      	adds	r7, #8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	08006271 	.word	0x08006271

08006270 <SPI_2linesRxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8006278:	2300      	movs	r3, #0
 800627a:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8006284:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006294:	605a      	str	r2, [r3, #4]

  SPI_CloseRxTx_ISR(hspi);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 fb28 	bl	80068ec <SPI_CloseRxTx_ISR>
}
 800629c:	bf00      	nop
 800629e:	3710      	adds	r7, #16
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b0:	881a      	ldrh	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062bc:	1c9a      	adds	r2, r3, #2
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	3b01      	subs	r3, #1
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d126      	bne.n	8006328 <SPI_2linesTxISR_16BIT+0x84>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062e2:	d110      	bne.n	8006306 <SPI_2linesTxISR_16BIT+0x62>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80062f2:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	685a      	ldr	r2, [r3, #4]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006302:	605a      	str	r2, [r3, #4]
      return;
 8006304:	e010      	b.n	8006328 <SPI_2linesTxISR_16BIT+0x84>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006314:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800631c:	b29b      	uxth	r3, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d102      	bne.n	8006328 <SPI_2linesTxISR_16BIT+0x84>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 fae2 	bl	80068ec <SPI_CloseRxTx_ISR>
    }
  }
}
 8006328:	3708      	adds	r7, #8
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <SPI_RxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b084      	sub	sp, #16
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006336:	2300      	movs	r3, #0
 8006338:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	330c      	adds	r3, #12
 8006340:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	b2db      	uxtb	r3, r3
 8006348:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 800634a:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006350:	1e5a      	subs	r2, r3, #1
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	649a      	str	r2, [r3, #72]	; 0x48

  if (hspi->CRCSize == 0U)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800635a:	2b00      	cmp	r3, #0
 800635c:	d102      	bne.n	8006364 <SPI_RxISR_8BITCRC+0x36>
  {
    SPI_CloseRx_ISR(hspi);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 fb20 	bl	80069a4 <SPI_CloseRx_ISR>
  }
}
 8006364:	bf00      	nop
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f103 020c 	add.w	r2, r3, #12
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006380:	7812      	ldrb	r2, [r2, #0]
 8006382:	b2d2      	uxtb	r2, r2
 8006384:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638a:	1c5a      	adds	r2, r3, #1
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006396:	b29b      	uxth	r3, r3
 8006398:	3b01      	subs	r3, #1
 800639a:	b29a      	uxth	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d10c      	bne.n	80063c8 <SPI_RxISR_8BIT+0x5c>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063b6:	d107      	bne.n	80063c8 <SPI_RxISR_8BIT+0x5c>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80063c6:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d10b      	bne.n	80063ec <SPI_RxISR_8BIT+0x80>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063dc:	d103      	bne.n	80063e6 <SPI_RxISR_8BIT+0x7a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a04      	ldr	r2, [pc, #16]	; (80063f4 <SPI_RxISR_8BIT+0x88>)
 80063e2:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 80063e4:	e002      	b.n	80063ec <SPI_RxISR_8BIT+0x80>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fadc 	bl	80069a4 <SPI_CloseRx_ISR>
  }
}
 80063ec:	3708      	adds	r7, #8
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	0800632f 	.word	0x0800632f

080063f8 <SPI_RxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8006400:	2300      	movs	r3, #0
 8006402:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 800640c:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	685a      	ldr	r2, [r3, #4]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800641c:	605a      	str	r2, [r3, #4]

  SPI_CloseRx_ISR(hspi);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fac0 	bl	80069a4 <SPI_CloseRx_ISR>
}
 8006424:	bf00      	nop
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68da      	ldr	r2, [r3, #12]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643e:	b292      	uxth	r2, r2
 8006440:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006446:	1c9a      	adds	r2, r3, #2
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006452:	b29b      	uxth	r3, r3
 8006454:	3b01      	subs	r3, #1
 8006456:	b29a      	uxth	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006464:	b29b      	uxth	r3, r3
 8006466:	2b01      	cmp	r3, #1
 8006468:	d10c      	bne.n	8006484 <SPI_RxISR_16BIT+0x58>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006472:	d107      	bne.n	8006484 <SPI_RxISR_16BIT+0x58>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006482:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800648a:	b29b      	uxth	r3, r3
 800648c:	2b00      	cmp	r3, #0
 800648e:	d10b      	bne.n	80064a8 <SPI_RxISR_16BIT+0x7c>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006494:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006498:	d103      	bne.n	80064a2 <SPI_RxISR_16BIT+0x76>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a04      	ldr	r2, [pc, #16]	; (80064b0 <SPI_RxISR_16BIT+0x84>)
 800649e:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 80064a0:	e002      	b.n	80064a8 <SPI_RxISR_16BIT+0x7c>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fa7e 	bl	80069a4 <SPI_CloseRx_ISR>
  }
}
 80064a8:	3708      	adds	r7, #8
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	080063f9 	.word	0x080063f9

080064b4 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	330c      	adds	r3, #12
 80064c6:	7812      	ldrb	r2, [r2, #0]
 80064c8:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ce:	1c5a      	adds	r2, r3, #1
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064d8:	b29b      	uxth	r3, r3
 80064da:	3b01      	subs	r3, #1
 80064dc:	b29a      	uxth	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d10f      	bne.n	800650c <SPI_TxISR_8BIT+0x58>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064f4:	d107      	bne.n	8006506 <SPI_TxISR_8BIT+0x52>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006504:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 fa92 	bl	8006a30 <SPI_CloseTx_ISR>
  }
}
 800650c:	bf00      	nop
 800650e:	3708      	adds	r7, #8
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006520:	881a      	ldrh	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652c:	1c9a      	adds	r2, r3, #2
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006536:	b29b      	uxth	r3, r3
 8006538:	3b01      	subs	r3, #1
 800653a:	b29a      	uxth	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006544:	b29b      	uxth	r3, r3
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10f      	bne.n	800656a <SPI_TxISR_16BIT+0x56>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006552:	d107      	bne.n	8006564 <SPI_TxISR_16BIT+0x50>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006562:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 fa63 	bl	8006a30 <SPI_CloseTx_ISR>
  }
}
 800656a:	bf00      	nop
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
	...

08006574 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b088      	sub	sp, #32
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	603b      	str	r3, [r7, #0]
 8006580:	4613      	mov	r3, r2
 8006582:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006584:	f7fc fc98 	bl	8002eb8 <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658c:	1a9b      	subs	r3, r3, r2
 800658e:	683a      	ldr	r2, [r7, #0]
 8006590:	4413      	add	r3, r2
 8006592:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006594:	f7fc fc90 	bl	8002eb8 <HAL_GetTick>
 8006598:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800659a:	4b39      	ldr	r3, [pc, #228]	; (8006680 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	015b      	lsls	r3, r3, #5
 80065a0:	0d1b      	lsrs	r3, r3, #20
 80065a2:	69fa      	ldr	r2, [r7, #28]
 80065a4:	fb02 f303 	mul.w	r3, r2, r3
 80065a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065aa:	e054      	b.n	8006656 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b2:	d050      	beq.n	8006656 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065b4:	f7fc fc80 	bl	8002eb8 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	69fa      	ldr	r2, [r7, #28]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d902      	bls.n	80065ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d13d      	bne.n	8006646 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	685a      	ldr	r2, [r3, #4]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80065d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065e2:	d111      	bne.n	8006608 <SPI_WaitFlagStateUntilTimeout+0x94>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065ec:	d004      	beq.n	80065f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065f6:	d107      	bne.n	8006608 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006606:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006610:	d10f      	bne.n	8006632 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006620:	601a      	str	r2, [r3, #0]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006630:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006642:	2303      	movs	r3, #3
 8006644:	e017      	b.n	8006676 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d101      	bne.n	8006650 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800664c:	2300      	movs	r3, #0
 800664e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	3b01      	subs	r3, #1
 8006654:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	689a      	ldr	r2, [r3, #8]
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	4013      	ands	r3, r2
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	429a      	cmp	r2, r3
 8006664:	bf0c      	ite	eq
 8006666:	2301      	moveq	r3, #1
 8006668:	2300      	movne	r3, #0
 800666a:	b2db      	uxtb	r3, r3
 800666c:	461a      	mov	r2, r3
 800666e:	79fb      	ldrb	r3, [r7, #7]
 8006670:	429a      	cmp	r2, r3
 8006672:	d19b      	bne.n	80065ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3720      	adds	r7, #32
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	20000044 	.word	0x20000044

08006684 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b08a      	sub	sp, #40	; 0x28
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	607a      	str	r2, [r7, #4]
 8006690:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006692:	2300      	movs	r3, #0
 8006694:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006696:	f7fc fc0f 	bl	8002eb8 <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669e:	1a9b      	subs	r3, r3, r2
 80066a0:	683a      	ldr	r2, [r7, #0]
 80066a2:	4413      	add	r3, r2
 80066a4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80066a6:	f7fc fc07 	bl	8002eb8 <HAL_GetTick>
 80066aa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	330c      	adds	r3, #12
 80066b2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80066b4:	4b3d      	ldr	r3, [pc, #244]	; (80067ac <SPI_WaitFifoStateUntilTimeout+0x128>)
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	4613      	mov	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4413      	add	r3, r2
 80066be:	00da      	lsls	r2, r3, #3
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	0d1b      	lsrs	r3, r3, #20
 80066c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066c6:	fb02 f303 	mul.w	r3, r2, r3
 80066ca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80066cc:	e060      	b.n	8006790 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80066d4:	d107      	bne.n	80066e6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d104      	bne.n	80066e6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80066e4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ec:	d050      	beq.n	8006790 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80066ee:	f7fc fbe3 	bl	8002eb8 <HAL_GetTick>
 80066f2:	4602      	mov	r2, r0
 80066f4:	6a3b      	ldr	r3, [r7, #32]
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d902      	bls.n	8006704 <SPI_WaitFifoStateUntilTimeout+0x80>
 80066fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006700:	2b00      	cmp	r3, #0
 8006702:	d13d      	bne.n	8006780 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	685a      	ldr	r2, [r3, #4]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006712:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800671c:	d111      	bne.n	8006742 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006726:	d004      	beq.n	8006732 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006730:	d107      	bne.n	8006742 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006740:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800674a:	d10f      	bne.n	800676c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800675a:	601a      	str	r2, [r3, #0]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800676a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800677c:	2303      	movs	r3, #3
 800677e:	e010      	b.n	80067a2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d101      	bne.n	800678a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006786:	2300      	movs	r3, #0
 8006788:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	3b01      	subs	r3, #1
 800678e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	689a      	ldr	r2, [r3, #8]
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	4013      	ands	r3, r2
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	429a      	cmp	r2, r3
 800679e:	d196      	bne.n	80066ce <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3728      	adds	r7, #40	; 0x28
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	20000044 	.word	0x20000044

080067b0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af02      	add	r7, sp, #8
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067c4:	d111      	bne.n	80067ea <SPI_EndRxTransaction+0x3a>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067ce:	d004      	beq.n	80067da <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067d8:	d107      	bne.n	80067ea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067e8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	9300      	str	r3, [sp, #0]
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	2200      	movs	r2, #0
 80067f2:	2180      	movs	r1, #128	; 0x80
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f7ff febd 	bl	8006574 <SPI_WaitFlagStateUntilTimeout>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d007      	beq.n	8006810 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006804:	f043 0220 	orr.w	r2, r3, #32
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e023      	b.n	8006858 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006818:	d11d      	bne.n	8006856 <SPI_EndRxTransaction+0xa6>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006822:	d004      	beq.n	800682e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800682c:	d113      	bne.n	8006856 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	9300      	str	r3, [sp, #0]
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	2200      	movs	r2, #0
 8006836:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f7ff ff22 	bl	8006684 <SPI_WaitFifoStateUntilTimeout>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d007      	beq.n	8006856 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800684a:	f043 0220 	orr.w	r2, r3, #32
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e000      	b.n	8006858 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b086      	sub	sp, #24
 8006864:	af02      	add	r7, sp, #8
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	9300      	str	r3, [sp, #0]
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	2200      	movs	r2, #0
 8006874:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f7ff ff03 	bl	8006684 <SPI_WaitFifoStateUntilTimeout>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d007      	beq.n	8006894 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006888:	f043 0220 	orr.w	r2, r3, #32
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e027      	b.n	80068e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	9300      	str	r3, [sp, #0]
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	2200      	movs	r2, #0
 800689c:	2180      	movs	r1, #128	; 0x80
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f7ff fe68 	bl	8006574 <SPI_WaitFlagStateUntilTimeout>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d007      	beq.n	80068ba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068ae:	f043 0220 	orr.w	r2, r3, #32
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e014      	b.n	80068e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	9300      	str	r3, [sp, #0]
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f7ff fedc 	bl	8006684 <SPI_WaitFifoStateUntilTimeout>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d007      	beq.n	80068e2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068d6:	f043 0220 	orr.w	r2, r3, #32
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e000      	b.n	80068e4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068f4:	f7fc fae0 	bl	8002eb8 <HAL_GetTick>
 80068f8:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	685a      	ldr	r2, [r3, #4]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f022 0220 	bic.w	r2, r2, #32
 8006908:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	2164      	movs	r1, #100	; 0x64
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f7ff ffa6 	bl	8006860 <SPI_EndRxTxTransaction>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d005      	beq.n	8006926 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800691e:	f043 0220 	orr.w	r2, r3, #32
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f003 0310 	and.w	r3, r3, #16
 8006930:	2b10      	cmp	r3, #16
 8006932:	d112      	bne.n	800695a <SPI_CloseRxTx_ISR+0x6e>
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006940:	f043 0202 	orr.w	r2, r3, #2
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8006950:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f7ff fb33 	bl	8005fbe <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8006958:	e020      	b.n	800699c <SPI_CloseRxTx_ISR+0xb0>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800695e:	2b00      	cmp	r3, #0
 8006960:	d115      	bne.n	800698e <SPI_CloseRxTx_ISR+0xa2>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b04      	cmp	r3, #4
 800696c:	d107      	bne.n	800697e <SPI_CloseRxTx_ISR+0x92>
        hspi->State = HAL_SPI_STATE_READY;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2201      	movs	r2, #1
 8006972:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7fb fc5e 	bl	8002238 <HAL_SPI_RxCpltCallback>
}
 800697c:	e00e      	b.n	800699c <SPI_CloseRxTx_ISR+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f7ff fb10 	bl	8005fac <HAL_SPI_TxRxCpltCallback>
}
 800698c:	e006      	b.n	800699c <SPI_CloseRxTx_ISR+0xb0>
      hspi->State = HAL_SPI_STATE_READY;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2201      	movs	r2, #1
 8006992:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f7ff fb11 	bl	8005fbe <HAL_SPI_ErrorCallback>
}
 800699c:	bf00      	nop
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	685a      	ldr	r2, [r3, #4]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80069ba:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80069bc:	f7fc fa7c 	bl	8002eb8 <HAL_GetTick>
 80069c0:	4603      	mov	r3, r0
 80069c2:	461a      	mov	r2, r3
 80069c4:	2164      	movs	r1, #100	; 0x64
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7ff fef2 	bl	80067b0 <SPI_EndRxTransaction>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d005      	beq.n	80069de <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069d6:	f043 0220 	orr.w	r2, r3, #32
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2201      	movs	r2, #1
 80069e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f003 0310 	and.w	r3, r3, #16
 80069f0:	2b10      	cmp	r3, #16
 80069f2:	d10e      	bne.n	8006a12 <SPI_CloseRx_ISR+0x6e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069f8:	f043 0202 	orr.w	r2, r3, #2
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8006a08:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f7ff fad7 	bl	8005fbe <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8006a10:	e00a      	b.n	8006a28 <SPI_CloseRx_ISR+0x84>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d103      	bne.n	8006a22 <SPI_CloseRx_ISR+0x7e>
      HAL_SPI_RxCpltCallback(hspi);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f7fb fc0c 	bl	8002238 <HAL_SPI_RxCpltCallback>
}
 8006a20:	e002      	b.n	8006a28 <SPI_CloseRx_ISR+0x84>
      HAL_SPI_ErrorCallback(hspi);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f7ff facb 	bl	8005fbe <HAL_SPI_ErrorCallback>
}
 8006a28:	bf00      	nop
 8006a2a:	3708      	adds	r7, #8
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a38:	f7fc fa3e 	bl	8002eb8 <HAL_GetTick>
 8006a3c:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	685a      	ldr	r2, [r3, #4]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006a4c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	2164      	movs	r1, #100	; 0x64
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f7ff ff04 	bl	8006860 <SPI_EndRxTxTransaction>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d005      	beq.n	8006a6a <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a62:	f043 0220 	orr.w	r2, r3, #32
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d10a      	bne.n	8006a88 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a72:	2300      	movs	r3, #0
 8006a74:	60bb      	str	r3, [r7, #8]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	60bb      	str	r3, [r7, #8]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	60bb      	str	r3, [r7, #8]
 8006a86:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d003      	beq.n	8006aa0 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f7ff fa90 	bl	8005fbe <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8006a9e:	e002      	b.n	8006aa6 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f7fb fbdb 	bl	800225c <HAL_SPI_TxCpltCallback>
}
 8006aa6:	bf00      	nop
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b082      	sub	sp, #8
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d101      	bne.n	8006ac0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e049      	b.n	8006b54 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d106      	bne.n	8006ada <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 f841 	bl	8006b5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2202      	movs	r2, #2
 8006ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	3304      	adds	r3, #4
 8006aea:	4619      	mov	r1, r3
 8006aec:	4610      	mov	r0, r2
 8006aee:	f000 f9f3 	bl	8006ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2201      	movs	r2, #1
 8006afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2201      	movs	r2, #1
 8006b26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2201      	movs	r2, #1
 8006b46:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3708      	adds	r7, #8
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006b64:	bf00      	nop
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bc80      	pop	{r7}
 8006b6c:	4770      	bx	lr
	...

08006b70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d001      	beq.n	8006b88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e04f      	b.n	8006c28 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2202      	movs	r2, #2
 8006b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68da      	ldr	r2, [r3, #12]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f042 0201 	orr.w	r2, r2, #1
 8006b9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a23      	ldr	r2, [pc, #140]	; (8006c34 <HAL_TIM_Base_Start_IT+0xc4>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d01d      	beq.n	8006be6 <HAL_TIM_Base_Start_IT+0x76>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bb2:	d018      	beq.n	8006be6 <HAL_TIM_Base_Start_IT+0x76>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a1f      	ldr	r2, [pc, #124]	; (8006c38 <HAL_TIM_Base_Start_IT+0xc8>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d013      	beq.n	8006be6 <HAL_TIM_Base_Start_IT+0x76>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a1e      	ldr	r2, [pc, #120]	; (8006c3c <HAL_TIM_Base_Start_IT+0xcc>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d00e      	beq.n	8006be6 <HAL_TIM_Base_Start_IT+0x76>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a1c      	ldr	r2, [pc, #112]	; (8006c40 <HAL_TIM_Base_Start_IT+0xd0>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d009      	beq.n	8006be6 <HAL_TIM_Base_Start_IT+0x76>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a1b      	ldr	r2, [pc, #108]	; (8006c44 <HAL_TIM_Base_Start_IT+0xd4>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d004      	beq.n	8006be6 <HAL_TIM_Base_Start_IT+0x76>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a19      	ldr	r2, [pc, #100]	; (8006c48 <HAL_TIM_Base_Start_IT+0xd8>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d115      	bne.n	8006c12 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	689a      	ldr	r2, [r3, #8]
 8006bec:	4b17      	ldr	r3, [pc, #92]	; (8006c4c <HAL_TIM_Base_Start_IT+0xdc>)
 8006bee:	4013      	ands	r3, r2
 8006bf0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2b06      	cmp	r3, #6
 8006bf6:	d015      	beq.n	8006c24 <HAL_TIM_Base_Start_IT+0xb4>
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bfe:	d011      	beq.n	8006c24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f042 0201 	orr.w	r2, r2, #1
 8006c0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c10:	e008      	b.n	8006c24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f042 0201 	orr.w	r2, r2, #1
 8006c20:	601a      	str	r2, [r3, #0]
 8006c22:	e000      	b.n	8006c26 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3714      	adds	r7, #20
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bc80      	pop	{r7}
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	40012c00 	.word	0x40012c00
 8006c38:	40000400 	.word	0x40000400
 8006c3c:	40000800 	.word	0x40000800
 8006c40:	40000c00 	.word	0x40000c00
 8006c44:	40013400 	.word	0x40013400
 8006c48:	40014000 	.word	0x40014000
 8006c4c:	00010007 	.word	0x00010007

08006c50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	f003 0302 	and.w	r3, r3, #2
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d122      	bne.n	8006cac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	f003 0302 	and.w	r3, r3, #2
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d11b      	bne.n	8006cac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f06f 0202 	mvn.w	r2, #2
 8006c7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2201      	movs	r2, #1
 8006c82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	f003 0303 	and.w	r3, r3, #3
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d003      	beq.n	8006c9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f904 	bl	8006ea0 <HAL_TIM_IC_CaptureCallback>
 8006c98:	e005      	b.n	8006ca6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f8f7 	bl	8006e8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 f906 	bl	8006eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	f003 0304 	and.w	r3, r3, #4
 8006cb6:	2b04      	cmp	r3, #4
 8006cb8:	d122      	bne.n	8006d00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	f003 0304 	and.w	r3, r3, #4
 8006cc4:	2b04      	cmp	r3, #4
 8006cc6:	d11b      	bne.n	8006d00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f06f 0204 	mvn.w	r2, #4
 8006cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2202      	movs	r2, #2
 8006cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d003      	beq.n	8006cee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f8da 	bl	8006ea0 <HAL_TIM_IC_CaptureCallback>
 8006cec:	e005      	b.n	8006cfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 f8cd 	bl	8006e8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 f8dc 	bl	8006eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	f003 0308 	and.w	r3, r3, #8
 8006d0a:	2b08      	cmp	r3, #8
 8006d0c:	d122      	bne.n	8006d54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	f003 0308 	and.w	r3, r3, #8
 8006d18:	2b08      	cmp	r3, #8
 8006d1a:	d11b      	bne.n	8006d54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f06f 0208 	mvn.w	r2, #8
 8006d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2204      	movs	r2, #4
 8006d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	69db      	ldr	r3, [r3, #28]
 8006d32:	f003 0303 	and.w	r3, r3, #3
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d003      	beq.n	8006d42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f8b0 	bl	8006ea0 <HAL_TIM_IC_CaptureCallback>
 8006d40:	e005      	b.n	8006d4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f8a3 	bl	8006e8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 f8b2 	bl	8006eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	f003 0310 	and.w	r3, r3, #16
 8006d5e:	2b10      	cmp	r3, #16
 8006d60:	d122      	bne.n	8006da8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	f003 0310 	and.w	r3, r3, #16
 8006d6c:	2b10      	cmp	r3, #16
 8006d6e:	d11b      	bne.n	8006da8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f06f 0210 	mvn.w	r2, #16
 8006d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2208      	movs	r2, #8
 8006d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	69db      	ldr	r3, [r3, #28]
 8006d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d003      	beq.n	8006d96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f886 	bl	8006ea0 <HAL_TIM_IC_CaptureCallback>
 8006d94:	e005      	b.n	8006da2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f879 	bl	8006e8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 f888 	bl	8006eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	f003 0301 	and.w	r3, r3, #1
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d10e      	bne.n	8006dd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	f003 0301 	and.w	r3, r3, #1
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d107      	bne.n	8006dd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f06f 0201 	mvn.w	r2, #1
 8006dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 f9ba 	bl	8007148 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dde:	2b80      	cmp	r3, #128	; 0x80
 8006de0:	d10e      	bne.n	8006e00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dec:	2b80      	cmp	r3, #128	; 0x80
 8006dee:	d107      	bne.n	8006e00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f90d 	bl	800701a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e0e:	d10e      	bne.n	8006e2e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e1a:	2b80      	cmp	r3, #128	; 0x80
 8006e1c:	d107      	bne.n	8006e2e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006e26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 f8ff 	bl	800702c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e38:	2b40      	cmp	r3, #64	; 0x40
 8006e3a:	d10e      	bne.n	8006e5a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e46:	2b40      	cmp	r3, #64	; 0x40
 8006e48:	d107      	bne.n	8006e5a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 f835 	bl	8006ec4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	f003 0320 	and.w	r3, r3, #32
 8006e64:	2b20      	cmp	r3, #32
 8006e66:	d10e      	bne.n	8006e86 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	f003 0320 	and.w	r3, r3, #32
 8006e72:	2b20      	cmp	r3, #32
 8006e74:	d107      	bne.n	8006e86 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f06f 0220 	mvn.w	r2, #32
 8006e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 f8c1 	bl	8007008 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e86:	bf00      	nop
 8006e88:	3708      	adds	r7, #8
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e8e:	b480      	push	{r7}
 8006e90:	b083      	sub	sp, #12
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e96:	bf00      	nop
 8006e98:	370c      	adds	r7, #12
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bc80      	pop	{r7}
 8006e9e:	4770      	bx	lr

08006ea0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ea8:	bf00      	nop
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bc80      	pop	{r7}
 8006eb0:	4770      	bx	lr

08006eb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006eb2:	b480      	push	{r7}
 8006eb4:	b083      	sub	sp, #12
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006eba:	bf00      	nop
 8006ebc:	370c      	adds	r7, #12
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bc80      	pop	{r7}
 8006ec2:	4770      	bx	lr

08006ec4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bc80      	pop	{r7}
 8006ed4:	4770      	bx	lr
	...

08006ed8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a3f      	ldr	r2, [pc, #252]	; (8006fe8 <TIM_Base_SetConfig+0x110>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d013      	beq.n	8006f18 <TIM_Base_SetConfig+0x40>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ef6:	d00f      	beq.n	8006f18 <TIM_Base_SetConfig+0x40>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a3c      	ldr	r2, [pc, #240]	; (8006fec <TIM_Base_SetConfig+0x114>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d00b      	beq.n	8006f18 <TIM_Base_SetConfig+0x40>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a3b      	ldr	r2, [pc, #236]	; (8006ff0 <TIM_Base_SetConfig+0x118>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d007      	beq.n	8006f18 <TIM_Base_SetConfig+0x40>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a3a      	ldr	r2, [pc, #232]	; (8006ff4 <TIM_Base_SetConfig+0x11c>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d003      	beq.n	8006f18 <TIM_Base_SetConfig+0x40>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a39      	ldr	r2, [pc, #228]	; (8006ff8 <TIM_Base_SetConfig+0x120>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d108      	bne.n	8006f2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a2e      	ldr	r2, [pc, #184]	; (8006fe8 <TIM_Base_SetConfig+0x110>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d01f      	beq.n	8006f72 <TIM_Base_SetConfig+0x9a>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f38:	d01b      	beq.n	8006f72 <TIM_Base_SetConfig+0x9a>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a2b      	ldr	r2, [pc, #172]	; (8006fec <TIM_Base_SetConfig+0x114>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d017      	beq.n	8006f72 <TIM_Base_SetConfig+0x9a>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a2a      	ldr	r2, [pc, #168]	; (8006ff0 <TIM_Base_SetConfig+0x118>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d013      	beq.n	8006f72 <TIM_Base_SetConfig+0x9a>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a29      	ldr	r2, [pc, #164]	; (8006ff4 <TIM_Base_SetConfig+0x11c>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d00f      	beq.n	8006f72 <TIM_Base_SetConfig+0x9a>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a28      	ldr	r2, [pc, #160]	; (8006ff8 <TIM_Base_SetConfig+0x120>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d00b      	beq.n	8006f72 <TIM_Base_SetConfig+0x9a>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a27      	ldr	r2, [pc, #156]	; (8006ffc <TIM_Base_SetConfig+0x124>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d007      	beq.n	8006f72 <TIM_Base_SetConfig+0x9a>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a26      	ldr	r2, [pc, #152]	; (8007000 <TIM_Base_SetConfig+0x128>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d003      	beq.n	8006f72 <TIM_Base_SetConfig+0x9a>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a25      	ldr	r2, [pc, #148]	; (8007004 <TIM_Base_SetConfig+0x12c>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d108      	bne.n	8006f84 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	689a      	ldr	r2, [r3, #8]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a0f      	ldr	r2, [pc, #60]	; (8006fe8 <TIM_Base_SetConfig+0x110>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d00f      	beq.n	8006fd0 <TIM_Base_SetConfig+0xf8>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a11      	ldr	r2, [pc, #68]	; (8006ff8 <TIM_Base_SetConfig+0x120>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d00b      	beq.n	8006fd0 <TIM_Base_SetConfig+0xf8>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a10      	ldr	r2, [pc, #64]	; (8006ffc <TIM_Base_SetConfig+0x124>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d007      	beq.n	8006fd0 <TIM_Base_SetConfig+0xf8>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a0f      	ldr	r2, [pc, #60]	; (8007000 <TIM_Base_SetConfig+0x128>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d003      	beq.n	8006fd0 <TIM_Base_SetConfig+0xf8>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a0e      	ldr	r2, [pc, #56]	; (8007004 <TIM_Base_SetConfig+0x12c>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d103      	bne.n	8006fd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	691a      	ldr	r2, [r3, #16]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	615a      	str	r2, [r3, #20]
}
 8006fde:	bf00      	nop
 8006fe0:	3714      	adds	r7, #20
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bc80      	pop	{r7}
 8006fe6:	4770      	bx	lr
 8006fe8:	40012c00 	.word	0x40012c00
 8006fec:	40000400 	.word	0x40000400
 8006ff0:	40000800 	.word	0x40000800
 8006ff4:	40000c00 	.word	0x40000c00
 8006ff8:	40013400 	.word	0x40013400
 8006ffc:	40014000 	.word	0x40014000
 8007000:	40014400 	.word	0x40014400
 8007004:	40014800 	.word	0x40014800

08007008 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007010:	bf00      	nop
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	bc80      	pop	{r7}
 8007018:	4770      	bx	lr

0800701a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800701a:	b480      	push	{r7}
 800701c:	b083      	sub	sp, #12
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007022:	bf00      	nop
 8007024:	370c      	adds	r7, #12
 8007026:	46bd      	mov	sp, r7
 8007028:	bc80      	pop	{r7}
 800702a:	4770      	bx	lr

0800702c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	bc80      	pop	{r7}
 800703c:	4770      	bx	lr
	...

08007040 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b08e      	sub	sp, #56	; 0x38
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8007048:	2300      	movs	r3, #0
 800704a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800704e:	4b38      	ldr	r3, [pc, #224]	; (8007130 <HAL_InitTick+0xf0>)
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d062      	beq.n	800711c <HAL_InitTick+0xdc>
  {
    /* Enable TIM6 clock */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007056:	4b37      	ldr	r3, [pc, #220]	; (8007134 <HAL_InitTick+0xf4>)
 8007058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800705a:	4a36      	ldr	r2, [pc, #216]	; (8007134 <HAL_InitTick+0xf4>)
 800705c:	f043 0310 	orr.w	r3, r3, #16
 8007060:	6593      	str	r3, [r2, #88]	; 0x58
 8007062:	4b34      	ldr	r3, [pc, #208]	; (8007134 <HAL_InitTick+0xf4>)
 8007064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007066:	f003 0310 	and.w	r3, r3, #16
 800706a:	60fb      	str	r3, [r7, #12]
 800706c:	68fb      	ldr	r3, [r7, #12]

    /* Get clock configuration */
    HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800706e:	f107 0210 	add.w	r2, r7, #16
 8007072:	f107 0314 	add.w	r3, r7, #20
 8007076:	4611      	mov	r1, r2
 8007078:	4618      	mov	r0, r3
 800707a:	f7fd fde1 	bl	8004c40 <HAL_RCC_GetClockConfig>

    /* Get APB1 prescaler */
    uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800707e:	6a3b      	ldr	r3, [r7, #32]
 8007080:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Compute TIM6 clock */
    if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8007082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007084:	2b00      	cmp	r3, #0
 8007086:	d103      	bne.n	8007090 <HAL_InitTick+0x50>
    {
      uwTimclock = HAL_RCC_GetPCLK1Freq();
 8007088:	f7fd fdae 	bl	8004be8 <HAL_RCC_GetPCLK1Freq>
 800708c:	6378      	str	r0, [r7, #52]	; 0x34
 800708e:	e004      	b.n	800709a <HAL_InitTick+0x5a>
    }
    else
    {
      uwTimclock = 2U * HAL_RCC_GetPCLK1Freq();
 8007090:	f7fd fdaa 	bl	8004be8 <HAL_RCC_GetPCLK1Freq>
 8007094:	4603      	mov	r3, r0
 8007096:	005b      	lsls	r3, r3, #1
 8007098:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
    uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800709a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800709c:	4a26      	ldr	r2, [pc, #152]	; (8007138 <HAL_InitTick+0xf8>)
 800709e:	fba2 2303 	umull	r2, r3, r2, r3
 80070a2:	0c9b      	lsrs	r3, r3, #18
 80070a4:	3b01      	subs	r3, #1
 80070a6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Initialize TIM6 */
    TimHandle.Instance = TIM6;
 80070a8:	4b24      	ldr	r3, [pc, #144]	; (800713c <HAL_InitTick+0xfc>)
 80070aa:	4a25      	ldr	r2, [pc, #148]	; (8007140 <HAL_InitTick+0x100>)
 80070ac:	601a      	str	r2, [r3, #0]
    + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
    + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
    + ClockDivision = 0
    + Counter direction = Up
    */
    TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 80070ae:	4b23      	ldr	r3, [pc, #140]	; (800713c <HAL_InitTick+0xfc>)
 80070b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80070b4:	60da      	str	r2, [r3, #12]
    TimHandle.Init.Prescaler = uwPrescalerValue;
 80070b6:	4a21      	ldr	r2, [pc, #132]	; (800713c <HAL_InitTick+0xfc>)
 80070b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ba:	6053      	str	r3, [r2, #4]
    TimHandle.Init.ClockDivision = 0;
 80070bc:	4b1f      	ldr	r3, [pc, #124]	; (800713c <HAL_InitTick+0xfc>)
 80070be:	2200      	movs	r2, #0
 80070c0:	611a      	str	r2, [r3, #16]
    TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80070c2:	4b1e      	ldr	r3, [pc, #120]	; (800713c <HAL_InitTick+0xfc>)
 80070c4:	2200      	movs	r2, #0
 80070c6:	609a      	str	r2, [r3, #8]
    TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80070c8:	4b1c      	ldr	r3, [pc, #112]	; (800713c <HAL_InitTick+0xfc>)
 80070ca:	2200      	movs	r2, #0
 80070cc:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 80070ce:	481b      	ldr	r0, [pc, #108]	; (800713c <HAL_InitTick+0xfc>)
 80070d0:	f7ff fced 	bl	8006aae <HAL_TIM_Base_Init>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d11c      	bne.n	8007114 <HAL_InitTick+0xd4>
    {
      /* Start the TIM time Base generation in interrupt mode */
      if (HAL_TIM_Base_Start_IT(&TimHandle) == HAL_OK)
 80070da:	4818      	ldr	r0, [pc, #96]	; (800713c <HAL_InitTick+0xfc>)
 80070dc:	f7ff fd48 	bl	8006b70 <HAL_TIM_Base_Start_IT>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d112      	bne.n	800710c <HAL_InitTick+0xcc>
      {
        /* Enable the TIM6_DAC global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80070e6:	2036      	movs	r0, #54	; 0x36
 80070e8:	f7fb ffe5 	bl	80030b6 <HAL_NVIC_EnableIRQ>

        /* Configure the SysTick IRQ priority */
        if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b0f      	cmp	r3, #15
 80070f0:	d808      	bhi.n	8007104 <HAL_InitTick+0xc4>
        {
          /*Configure the TIM6_DAC IRQ priority */
          HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80070f2:	2200      	movs	r2, #0
 80070f4:	6879      	ldr	r1, [r7, #4]
 80070f6:	2036      	movs	r0, #54	; 0x36
 80070f8:	f7fb ffc1 	bl	800307e <HAL_NVIC_SetPriority>
          uwTickPrio = TickPriority;
 80070fc:	4a11      	ldr	r2, [pc, #68]	; (8007144 <HAL_InitTick+0x104>)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6013      	str	r3, [r2, #0]
 8007102:	e00e      	b.n	8007122 <HAL_InitTick+0xe2>
        }
        else
        {
          status = HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800710a:	e00a      	b.n	8007122 <HAL_InitTick+0xe2>
        }
      }
      else
      {
        status = HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007112:	e006      	b.n	8007122 <HAL_InitTick+0xe2>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800711a:	e002      	b.n	8007122 <HAL_InitTick+0xe2>
    }
  }
  else
  {
    status = HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  }

  /* Return function status */
  return status;
 8007122:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8007126:	4618      	mov	r0, r3
 8007128:	3738      	adds	r7, #56	; 0x38
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	2000003c 	.word	0x2000003c
 8007134:	40021000 	.word	0x40021000
 8007138:	431bde83 	.word	0x431bde83
 800713c:	20000b20 	.word	0x20000b20
 8007140:	40001000 	.word	0x40001000
 8007144:	20000038 	.word	0x20000038

08007148 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 8007150:	f7fb fea0 	bl	8002e94 <HAL_IncTick>
}
 8007154:	bf00      	nop
 8007156:	3708      	adds	r7, #8
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <TIM6_DAC_IRQHandler>:
/**
  * @brief  This function handles TIM interrupt request.
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 8007160:	4802      	ldr	r0, [pc, #8]	; (800716c <TIM6_DAC_IRQHandler+0x10>)
 8007162:	f7ff fd75 	bl	8006c50 <HAL_TIM_IRQHandler>
}
 8007166:	bf00      	nop
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	20000b20 	.word	0x20000b20

08007170 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d101      	bne.n	8007182 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	e040      	b.n	8007204 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007186:	2b00      	cmp	r3, #0
 8007188:	d106      	bne.n	8007198 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 f83a 	bl	800720c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2224      	movs	r2, #36	; 0x24
 800719c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f022 0201 	bic.w	r2, r2, #1
 80071ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f8ca 	bl	8007348 <UART_SetConfig>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d101      	bne.n	80071be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e022      	b.n	8007204 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d002      	beq.n	80071cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 fb76 	bl	80078b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	685a      	ldr	r2, [r3, #4]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	689a      	ldr	r2, [r3, #8]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f042 0201 	orr.w	r2, r2, #1
 80071fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 fbfc 	bl	80079fa <UART_CheckIdleState>
 8007202:	4603      	mov	r3, r0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3708      	adds	r7, #8
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8007214:	bf00      	nop
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	bc80      	pop	{r7}
 800721c:	4770      	bx	lr

0800721e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b08a      	sub	sp, #40	; 0x28
 8007222:	af02      	add	r7, sp, #8
 8007224:	60f8      	str	r0, [r7, #12]
 8007226:	60b9      	str	r1, [r7, #8]
 8007228:	603b      	str	r3, [r7, #0]
 800722a:	4613      	mov	r3, r2
 800722c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007232:	2b20      	cmp	r3, #32
 8007234:	f040 8082 	bne.w	800733c <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d002      	beq.n	8007244 <HAL_UART_Transmit+0x26>
 800723e:	88fb      	ldrh	r3, [r7, #6]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d101      	bne.n	8007248 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e07a      	b.n	800733e <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800724e:	2b01      	cmp	r3, #1
 8007250:	d101      	bne.n	8007256 <HAL_UART_Transmit+0x38>
 8007252:	2302      	movs	r3, #2
 8007254:	e073      	b.n	800733e <HAL_UART_Transmit+0x120>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2201      	movs	r2, #1
 800725a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2200      	movs	r2, #0
 8007262:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2221      	movs	r2, #33	; 0x21
 800726a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800726c:	f7fb fe24 	bl	8002eb8 <HAL_GetTick>
 8007270:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	88fa      	ldrh	r2, [r7, #6]
 8007276:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	88fa      	ldrh	r2, [r7, #6]
 800727e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800728a:	d108      	bne.n	800729e <HAL_UART_Transmit+0x80>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d104      	bne.n	800729e <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007294:	2300      	movs	r3, #0
 8007296:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	61bb      	str	r3, [r7, #24]
 800729c:	e003      	b.n	80072a6 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072a2:	2300      	movs	r3, #0
 80072a4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80072ae:	e02d      	b.n	800730c <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	9300      	str	r3, [sp, #0]
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	2200      	movs	r2, #0
 80072b8:	2180      	movs	r1, #128	; 0x80
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	f000 fbe6 	bl	8007a8c <UART_WaitOnFlagUntilTimeout>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d001      	beq.n	80072ca <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80072c6:	2303      	movs	r3, #3
 80072c8:	e039      	b.n	800733e <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d10b      	bne.n	80072e8 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	881a      	ldrh	r2, [r3, #0]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072dc:	b292      	uxth	r2, r2
 80072de:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	3302      	adds	r3, #2
 80072e4:	61bb      	str	r3, [r7, #24]
 80072e6:	e008      	b.n	80072fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	781a      	ldrb	r2, [r3, #0]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	b292      	uxth	r2, r2
 80072f2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	3301      	adds	r3, #1
 80072f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007300:	b29b      	uxth	r3, r3
 8007302:	3b01      	subs	r3, #1
 8007304:	b29a      	uxth	r2, r3
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007312:	b29b      	uxth	r3, r3
 8007314:	2b00      	cmp	r3, #0
 8007316:	d1cb      	bne.n	80072b0 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	9300      	str	r3, [sp, #0]
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	2200      	movs	r2, #0
 8007320:	2140      	movs	r1, #64	; 0x40
 8007322:	68f8      	ldr	r0, [r7, #12]
 8007324:	f000 fbb2 	bl	8007a8c <UART_WaitOnFlagUntilTimeout>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d001      	beq.n	8007332 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e005      	b.n	800733e <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2220      	movs	r2, #32
 8007336:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007338:	2300      	movs	r3, #0
 800733a:	e000      	b.n	800733e <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800733c:	2302      	movs	r3, #2
  }
}
 800733e:	4618      	mov	r0, r3
 8007340:	3720      	adds	r7, #32
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
	...

08007348 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800734c:	b08a      	sub	sp, #40	; 0x28
 800734e:	af00      	add	r7, sp, #0
 8007350:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007352:	2300      	movs	r3, #0
 8007354:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	689a      	ldr	r2, [r3, #8]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	431a      	orrs	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	695b      	ldr	r3, [r3, #20]
 8007366:	431a      	orrs	r2, r3
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	69db      	ldr	r3, [r3, #28]
 800736c:	4313      	orrs	r3, r2
 800736e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	4ba4      	ldr	r3, [pc, #656]	; (8007608 <UART_SetConfig+0x2c0>)
 8007378:	4013      	ands	r3, r2
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	6812      	ldr	r2, [r2, #0]
 800737e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007380:	430b      	orrs	r3, r1
 8007382:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	68da      	ldr	r2, [r3, #12]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	430a      	orrs	r2, r1
 8007398:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a99      	ldr	r2, [pc, #612]	; (800760c <UART_SetConfig+0x2c4>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d004      	beq.n	80073b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073b0:	4313      	orrs	r3, r2
 80073b2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073c4:	430a      	orrs	r2, r1
 80073c6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a90      	ldr	r2, [pc, #576]	; (8007610 <UART_SetConfig+0x2c8>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d126      	bne.n	8007420 <UART_SetConfig+0xd8>
 80073d2:	4b90      	ldr	r3, [pc, #576]	; (8007614 <UART_SetConfig+0x2cc>)
 80073d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073d8:	f003 0303 	and.w	r3, r3, #3
 80073dc:	2b03      	cmp	r3, #3
 80073de:	d81b      	bhi.n	8007418 <UART_SetConfig+0xd0>
 80073e0:	a201      	add	r2, pc, #4	; (adr r2, 80073e8 <UART_SetConfig+0xa0>)
 80073e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e6:	bf00      	nop
 80073e8:	080073f9 	.word	0x080073f9
 80073ec:	08007409 	.word	0x08007409
 80073f0:	08007401 	.word	0x08007401
 80073f4:	08007411 	.word	0x08007411
 80073f8:	2301      	movs	r3, #1
 80073fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073fe:	e116      	b.n	800762e <UART_SetConfig+0x2e6>
 8007400:	2302      	movs	r3, #2
 8007402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007406:	e112      	b.n	800762e <UART_SetConfig+0x2e6>
 8007408:	2304      	movs	r3, #4
 800740a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800740e:	e10e      	b.n	800762e <UART_SetConfig+0x2e6>
 8007410:	2308      	movs	r3, #8
 8007412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007416:	e10a      	b.n	800762e <UART_SetConfig+0x2e6>
 8007418:	2310      	movs	r3, #16
 800741a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800741e:	e106      	b.n	800762e <UART_SetConfig+0x2e6>
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a7c      	ldr	r2, [pc, #496]	; (8007618 <UART_SetConfig+0x2d0>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d138      	bne.n	800749c <UART_SetConfig+0x154>
 800742a:	4b7a      	ldr	r3, [pc, #488]	; (8007614 <UART_SetConfig+0x2cc>)
 800742c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007430:	f003 030c 	and.w	r3, r3, #12
 8007434:	2b0c      	cmp	r3, #12
 8007436:	d82d      	bhi.n	8007494 <UART_SetConfig+0x14c>
 8007438:	a201      	add	r2, pc, #4	; (adr r2, 8007440 <UART_SetConfig+0xf8>)
 800743a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800743e:	bf00      	nop
 8007440:	08007475 	.word	0x08007475
 8007444:	08007495 	.word	0x08007495
 8007448:	08007495 	.word	0x08007495
 800744c:	08007495 	.word	0x08007495
 8007450:	08007485 	.word	0x08007485
 8007454:	08007495 	.word	0x08007495
 8007458:	08007495 	.word	0x08007495
 800745c:	08007495 	.word	0x08007495
 8007460:	0800747d 	.word	0x0800747d
 8007464:	08007495 	.word	0x08007495
 8007468:	08007495 	.word	0x08007495
 800746c:	08007495 	.word	0x08007495
 8007470:	0800748d 	.word	0x0800748d
 8007474:	2300      	movs	r3, #0
 8007476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800747a:	e0d8      	b.n	800762e <UART_SetConfig+0x2e6>
 800747c:	2302      	movs	r3, #2
 800747e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007482:	e0d4      	b.n	800762e <UART_SetConfig+0x2e6>
 8007484:	2304      	movs	r3, #4
 8007486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800748a:	e0d0      	b.n	800762e <UART_SetConfig+0x2e6>
 800748c:	2308      	movs	r3, #8
 800748e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007492:	e0cc      	b.n	800762e <UART_SetConfig+0x2e6>
 8007494:	2310      	movs	r3, #16
 8007496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800749a:	e0c8      	b.n	800762e <UART_SetConfig+0x2e6>
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a5e      	ldr	r2, [pc, #376]	; (800761c <UART_SetConfig+0x2d4>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d125      	bne.n	80074f2 <UART_SetConfig+0x1aa>
 80074a6:	4b5b      	ldr	r3, [pc, #364]	; (8007614 <UART_SetConfig+0x2cc>)
 80074a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80074b0:	2b30      	cmp	r3, #48	; 0x30
 80074b2:	d016      	beq.n	80074e2 <UART_SetConfig+0x19a>
 80074b4:	2b30      	cmp	r3, #48	; 0x30
 80074b6:	d818      	bhi.n	80074ea <UART_SetConfig+0x1a2>
 80074b8:	2b20      	cmp	r3, #32
 80074ba:	d00a      	beq.n	80074d2 <UART_SetConfig+0x18a>
 80074bc:	2b20      	cmp	r3, #32
 80074be:	d814      	bhi.n	80074ea <UART_SetConfig+0x1a2>
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d002      	beq.n	80074ca <UART_SetConfig+0x182>
 80074c4:	2b10      	cmp	r3, #16
 80074c6:	d008      	beq.n	80074da <UART_SetConfig+0x192>
 80074c8:	e00f      	b.n	80074ea <UART_SetConfig+0x1a2>
 80074ca:	2300      	movs	r3, #0
 80074cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074d0:	e0ad      	b.n	800762e <UART_SetConfig+0x2e6>
 80074d2:	2302      	movs	r3, #2
 80074d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074d8:	e0a9      	b.n	800762e <UART_SetConfig+0x2e6>
 80074da:	2304      	movs	r3, #4
 80074dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074e0:	e0a5      	b.n	800762e <UART_SetConfig+0x2e6>
 80074e2:	2308      	movs	r3, #8
 80074e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074e8:	e0a1      	b.n	800762e <UART_SetConfig+0x2e6>
 80074ea:	2310      	movs	r3, #16
 80074ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074f0:	e09d      	b.n	800762e <UART_SetConfig+0x2e6>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a4a      	ldr	r2, [pc, #296]	; (8007620 <UART_SetConfig+0x2d8>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d125      	bne.n	8007548 <UART_SetConfig+0x200>
 80074fc:	4b45      	ldr	r3, [pc, #276]	; (8007614 <UART_SetConfig+0x2cc>)
 80074fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007502:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007506:	2bc0      	cmp	r3, #192	; 0xc0
 8007508:	d016      	beq.n	8007538 <UART_SetConfig+0x1f0>
 800750a:	2bc0      	cmp	r3, #192	; 0xc0
 800750c:	d818      	bhi.n	8007540 <UART_SetConfig+0x1f8>
 800750e:	2b80      	cmp	r3, #128	; 0x80
 8007510:	d00a      	beq.n	8007528 <UART_SetConfig+0x1e0>
 8007512:	2b80      	cmp	r3, #128	; 0x80
 8007514:	d814      	bhi.n	8007540 <UART_SetConfig+0x1f8>
 8007516:	2b00      	cmp	r3, #0
 8007518:	d002      	beq.n	8007520 <UART_SetConfig+0x1d8>
 800751a:	2b40      	cmp	r3, #64	; 0x40
 800751c:	d008      	beq.n	8007530 <UART_SetConfig+0x1e8>
 800751e:	e00f      	b.n	8007540 <UART_SetConfig+0x1f8>
 8007520:	2300      	movs	r3, #0
 8007522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007526:	e082      	b.n	800762e <UART_SetConfig+0x2e6>
 8007528:	2302      	movs	r3, #2
 800752a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800752e:	e07e      	b.n	800762e <UART_SetConfig+0x2e6>
 8007530:	2304      	movs	r3, #4
 8007532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007536:	e07a      	b.n	800762e <UART_SetConfig+0x2e6>
 8007538:	2308      	movs	r3, #8
 800753a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800753e:	e076      	b.n	800762e <UART_SetConfig+0x2e6>
 8007540:	2310      	movs	r3, #16
 8007542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007546:	e072      	b.n	800762e <UART_SetConfig+0x2e6>
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a35      	ldr	r2, [pc, #212]	; (8007624 <UART_SetConfig+0x2dc>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d12a      	bne.n	80075a8 <UART_SetConfig+0x260>
 8007552:	4b30      	ldr	r3, [pc, #192]	; (8007614 <UART_SetConfig+0x2cc>)
 8007554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007558:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800755c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007560:	d01a      	beq.n	8007598 <UART_SetConfig+0x250>
 8007562:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007566:	d81b      	bhi.n	80075a0 <UART_SetConfig+0x258>
 8007568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800756c:	d00c      	beq.n	8007588 <UART_SetConfig+0x240>
 800756e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007572:	d815      	bhi.n	80075a0 <UART_SetConfig+0x258>
 8007574:	2b00      	cmp	r3, #0
 8007576:	d003      	beq.n	8007580 <UART_SetConfig+0x238>
 8007578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800757c:	d008      	beq.n	8007590 <UART_SetConfig+0x248>
 800757e:	e00f      	b.n	80075a0 <UART_SetConfig+0x258>
 8007580:	2300      	movs	r3, #0
 8007582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007586:	e052      	b.n	800762e <UART_SetConfig+0x2e6>
 8007588:	2302      	movs	r3, #2
 800758a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800758e:	e04e      	b.n	800762e <UART_SetConfig+0x2e6>
 8007590:	2304      	movs	r3, #4
 8007592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007596:	e04a      	b.n	800762e <UART_SetConfig+0x2e6>
 8007598:	2308      	movs	r3, #8
 800759a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800759e:	e046      	b.n	800762e <UART_SetConfig+0x2e6>
 80075a0:	2310      	movs	r3, #16
 80075a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075a6:	e042      	b.n	800762e <UART_SetConfig+0x2e6>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a17      	ldr	r2, [pc, #92]	; (800760c <UART_SetConfig+0x2c4>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d13a      	bne.n	8007628 <UART_SetConfig+0x2e0>
 80075b2:	4b18      	ldr	r3, [pc, #96]	; (8007614 <UART_SetConfig+0x2cc>)
 80075b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80075bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075c0:	d01a      	beq.n	80075f8 <UART_SetConfig+0x2b0>
 80075c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075c6:	d81b      	bhi.n	8007600 <UART_SetConfig+0x2b8>
 80075c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075cc:	d00c      	beq.n	80075e8 <UART_SetConfig+0x2a0>
 80075ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075d2:	d815      	bhi.n	8007600 <UART_SetConfig+0x2b8>
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d003      	beq.n	80075e0 <UART_SetConfig+0x298>
 80075d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075dc:	d008      	beq.n	80075f0 <UART_SetConfig+0x2a8>
 80075de:	e00f      	b.n	8007600 <UART_SetConfig+0x2b8>
 80075e0:	2300      	movs	r3, #0
 80075e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075e6:	e022      	b.n	800762e <UART_SetConfig+0x2e6>
 80075e8:	2302      	movs	r3, #2
 80075ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075ee:	e01e      	b.n	800762e <UART_SetConfig+0x2e6>
 80075f0:	2304      	movs	r3, #4
 80075f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075f6:	e01a      	b.n	800762e <UART_SetConfig+0x2e6>
 80075f8:	2308      	movs	r3, #8
 80075fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075fe:	e016      	b.n	800762e <UART_SetConfig+0x2e6>
 8007600:	2310      	movs	r3, #16
 8007602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007606:	e012      	b.n	800762e <UART_SetConfig+0x2e6>
 8007608:	efff69f3 	.word	0xefff69f3
 800760c:	40008000 	.word	0x40008000
 8007610:	40013800 	.word	0x40013800
 8007614:	40021000 	.word	0x40021000
 8007618:	40004400 	.word	0x40004400
 800761c:	40004800 	.word	0x40004800
 8007620:	40004c00 	.word	0x40004c00
 8007624:	40005000 	.word	0x40005000
 8007628:	2310      	movs	r3, #16
 800762a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a9f      	ldr	r2, [pc, #636]	; (80078b0 <UART_SetConfig+0x568>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d17a      	bne.n	800772e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007638:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800763c:	2b08      	cmp	r3, #8
 800763e:	d824      	bhi.n	800768a <UART_SetConfig+0x342>
 8007640:	a201      	add	r2, pc, #4	; (adr r2, 8007648 <UART_SetConfig+0x300>)
 8007642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007646:	bf00      	nop
 8007648:	0800766d 	.word	0x0800766d
 800764c:	0800768b 	.word	0x0800768b
 8007650:	08007675 	.word	0x08007675
 8007654:	0800768b 	.word	0x0800768b
 8007658:	0800767b 	.word	0x0800767b
 800765c:	0800768b 	.word	0x0800768b
 8007660:	0800768b 	.word	0x0800768b
 8007664:	0800768b 	.word	0x0800768b
 8007668:	08007683 	.word	0x08007683
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800766c:	f7fd fabc 	bl	8004be8 <HAL_RCC_GetPCLK1Freq>
 8007670:	61f8      	str	r0, [r7, #28]
        break;
 8007672:	e010      	b.n	8007696 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007674:	4b8f      	ldr	r3, [pc, #572]	; (80078b4 <UART_SetConfig+0x56c>)
 8007676:	61fb      	str	r3, [r7, #28]
        break;
 8007678:	e00d      	b.n	8007696 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800767a:	f7fd fa21 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 800767e:	61f8      	str	r0, [r7, #28]
        break;
 8007680:	e009      	b.n	8007696 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007682:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007686:	61fb      	str	r3, [r7, #28]
        break;
 8007688:	e005      	b.n	8007696 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800768a:	2300      	movs	r3, #0
 800768c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007694:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	2b00      	cmp	r3, #0
 800769a:	f000 80fb 	beq.w	8007894 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	685a      	ldr	r2, [r3, #4]
 80076a2:	4613      	mov	r3, r2
 80076a4:	005b      	lsls	r3, r3, #1
 80076a6:	4413      	add	r3, r2
 80076a8:	69fa      	ldr	r2, [r7, #28]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d305      	bcc.n	80076ba <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80076b4:	69fa      	ldr	r2, [r7, #28]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d903      	bls.n	80076c2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80076c0:	e0e8      	b.n	8007894 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	2200      	movs	r2, #0
 80076c6:	461c      	mov	r4, r3
 80076c8:	4615      	mov	r5, r2
 80076ca:	f04f 0200 	mov.w	r2, #0
 80076ce:	f04f 0300 	mov.w	r3, #0
 80076d2:	022b      	lsls	r3, r5, #8
 80076d4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80076d8:	0222      	lsls	r2, r4, #8
 80076da:	68f9      	ldr	r1, [r7, #12]
 80076dc:	6849      	ldr	r1, [r1, #4]
 80076de:	0849      	lsrs	r1, r1, #1
 80076e0:	2000      	movs	r0, #0
 80076e2:	4688      	mov	r8, r1
 80076e4:	4681      	mov	r9, r0
 80076e6:	eb12 0a08 	adds.w	sl, r2, r8
 80076ea:	eb43 0b09 	adc.w	fp, r3, r9
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	603b      	str	r3, [r7, #0]
 80076f6:	607a      	str	r2, [r7, #4]
 80076f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076fc:	4650      	mov	r0, sl
 80076fe:	4659      	mov	r1, fp
 8007700:	f7f9 fa9c 	bl	8000c3c <__aeabi_uldivmod>
 8007704:	4602      	mov	r2, r0
 8007706:	460b      	mov	r3, r1
 8007708:	4613      	mov	r3, r2
 800770a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007712:	d308      	bcc.n	8007726 <UART_SetConfig+0x3de>
 8007714:	69bb      	ldr	r3, [r7, #24]
 8007716:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800771a:	d204      	bcs.n	8007726 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	69ba      	ldr	r2, [r7, #24]
 8007722:	60da      	str	r2, [r3, #12]
 8007724:	e0b6      	b.n	8007894 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800772c:	e0b2      	b.n	8007894 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	69db      	ldr	r3, [r3, #28]
 8007732:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007736:	d15e      	bne.n	80077f6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007738:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800773c:	2b08      	cmp	r3, #8
 800773e:	d828      	bhi.n	8007792 <UART_SetConfig+0x44a>
 8007740:	a201      	add	r2, pc, #4	; (adr r2, 8007748 <UART_SetConfig+0x400>)
 8007742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007746:	bf00      	nop
 8007748:	0800776d 	.word	0x0800776d
 800774c:	08007775 	.word	0x08007775
 8007750:	0800777d 	.word	0x0800777d
 8007754:	08007793 	.word	0x08007793
 8007758:	08007783 	.word	0x08007783
 800775c:	08007793 	.word	0x08007793
 8007760:	08007793 	.word	0x08007793
 8007764:	08007793 	.word	0x08007793
 8007768:	0800778b 	.word	0x0800778b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800776c:	f7fd fa3c 	bl	8004be8 <HAL_RCC_GetPCLK1Freq>
 8007770:	61f8      	str	r0, [r7, #28]
        break;
 8007772:	e014      	b.n	800779e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007774:	f7fd fa4e 	bl	8004c14 <HAL_RCC_GetPCLK2Freq>
 8007778:	61f8      	str	r0, [r7, #28]
        break;
 800777a:	e010      	b.n	800779e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800777c:	4b4d      	ldr	r3, [pc, #308]	; (80078b4 <UART_SetConfig+0x56c>)
 800777e:	61fb      	str	r3, [r7, #28]
        break;
 8007780:	e00d      	b.n	800779e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007782:	f7fd f99d 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 8007786:	61f8      	str	r0, [r7, #28]
        break;
 8007788:	e009      	b.n	800779e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800778a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800778e:	61fb      	str	r3, [r7, #28]
        break;
 8007790:	e005      	b.n	800779e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007792:	2300      	movs	r3, #0
 8007794:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800779c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d077      	beq.n	8007894 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	005a      	lsls	r2, r3, #1
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	085b      	lsrs	r3, r3, #1
 80077ae:	441a      	add	r2, r3
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80077b8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	2b0f      	cmp	r3, #15
 80077be:	d916      	bls.n	80077ee <UART_SetConfig+0x4a6>
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077c6:	d212      	bcs.n	80077ee <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	f023 030f 	bic.w	r3, r3, #15
 80077d0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	085b      	lsrs	r3, r3, #1
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	f003 0307 	and.w	r3, r3, #7
 80077dc:	b29a      	uxth	r2, r3
 80077de:	8afb      	ldrh	r3, [r7, #22]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	8afa      	ldrh	r2, [r7, #22]
 80077ea:	60da      	str	r2, [r3, #12]
 80077ec:	e052      	b.n	8007894 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80077f4:	e04e      	b.n	8007894 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80077f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077fa:	2b08      	cmp	r3, #8
 80077fc:	d827      	bhi.n	800784e <UART_SetConfig+0x506>
 80077fe:	a201      	add	r2, pc, #4	; (adr r2, 8007804 <UART_SetConfig+0x4bc>)
 8007800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007804:	08007829 	.word	0x08007829
 8007808:	08007831 	.word	0x08007831
 800780c:	08007839 	.word	0x08007839
 8007810:	0800784f 	.word	0x0800784f
 8007814:	0800783f 	.word	0x0800783f
 8007818:	0800784f 	.word	0x0800784f
 800781c:	0800784f 	.word	0x0800784f
 8007820:	0800784f 	.word	0x0800784f
 8007824:	08007847 	.word	0x08007847
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007828:	f7fd f9de 	bl	8004be8 <HAL_RCC_GetPCLK1Freq>
 800782c:	61f8      	str	r0, [r7, #28]
        break;
 800782e:	e014      	b.n	800785a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007830:	f7fd f9f0 	bl	8004c14 <HAL_RCC_GetPCLK2Freq>
 8007834:	61f8      	str	r0, [r7, #28]
        break;
 8007836:	e010      	b.n	800785a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007838:	4b1e      	ldr	r3, [pc, #120]	; (80078b4 <UART_SetConfig+0x56c>)
 800783a:	61fb      	str	r3, [r7, #28]
        break;
 800783c:	e00d      	b.n	800785a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800783e:	f7fd f93f 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 8007842:	61f8      	str	r0, [r7, #28]
        break;
 8007844:	e009      	b.n	800785a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800784a:	61fb      	str	r3, [r7, #28]
        break;
 800784c:	e005      	b.n	800785a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800784e:	2300      	movs	r3, #0
 8007850:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007858:	bf00      	nop
    }

    if (pclk != 0U)
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d019      	beq.n	8007894 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	085a      	lsrs	r2, r3, #1
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	441a      	add	r2, r3
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007872:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	2b0f      	cmp	r3, #15
 8007878:	d909      	bls.n	800788e <UART_SetConfig+0x546>
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007880:	d205      	bcs.n	800788e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	b29a      	uxth	r2, r3
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	60da      	str	r2, [r3, #12]
 800788c:	e002      	b.n	8007894 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2200      	movs	r2, #0
 800789e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80078a0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3728      	adds	r7, #40	; 0x28
 80078a8:	46bd      	mov	sp, r7
 80078aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078ae:	bf00      	nop
 80078b0:	40008000 	.word	0x40008000
 80078b4:	00f42400 	.word	0x00f42400

080078b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c4:	f003 0301 	and.w	r3, r3, #1
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d00a      	beq.n	80078e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	430a      	orrs	r2, r1
 80078e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e6:	f003 0302 	and.w	r3, r3, #2
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00a      	beq.n	8007904 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	430a      	orrs	r2, r1
 8007902:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007908:	f003 0304 	and.w	r3, r3, #4
 800790c:	2b00      	cmp	r3, #0
 800790e:	d00a      	beq.n	8007926 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	430a      	orrs	r2, r1
 8007924:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792a:	f003 0308 	and.w	r3, r3, #8
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00a      	beq.n	8007948 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	430a      	orrs	r2, r1
 8007946:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794c:	f003 0310 	and.w	r3, r3, #16
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00a      	beq.n	800796a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	430a      	orrs	r2, r1
 8007968:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796e:	f003 0320 	and.w	r3, r3, #32
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00a      	beq.n	800798c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	430a      	orrs	r2, r1
 800798a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007994:	2b00      	cmp	r3, #0
 8007996:	d01a      	beq.n	80079ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	430a      	orrs	r2, r1
 80079ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079b6:	d10a      	bne.n	80079ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	430a      	orrs	r2, r1
 80079cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00a      	beq.n	80079f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	430a      	orrs	r2, r1
 80079ee:	605a      	str	r2, [r3, #4]
  }
}
 80079f0:	bf00      	nop
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bc80      	pop	{r7}
 80079f8:	4770      	bx	lr

080079fa <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b086      	sub	sp, #24
 80079fe:	af02      	add	r7, sp, #8
 8007a00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a0a:	f7fb fa55 	bl	8002eb8 <HAL_GetTick>
 8007a0e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f003 0308 	and.w	r3, r3, #8
 8007a1a:	2b08      	cmp	r3, #8
 8007a1c:	d10e      	bne.n	8007a3c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a1e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a22:	9300      	str	r3, [sp, #0]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 f82d 	bl	8007a8c <UART_WaitOnFlagUntilTimeout>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d001      	beq.n	8007a3c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a38:	2303      	movs	r3, #3
 8007a3a:	e023      	b.n	8007a84 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 0304 	and.w	r3, r3, #4
 8007a46:	2b04      	cmp	r3, #4
 8007a48:	d10e      	bne.n	8007a68 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a4a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a4e:	9300      	str	r3, [sp, #0]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 f817 	bl	8007a8c <UART_WaitOnFlagUntilTimeout>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d001      	beq.n	8007a68 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a64:	2303      	movs	r3, #3
 8007a66:	e00d      	b.n	8007a84 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2220      	movs	r2, #32
 8007a6c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2220      	movs	r2, #32
 8007a72:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b09c      	sub	sp, #112	; 0x70
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	603b      	str	r3, [r7, #0]
 8007a98:	4613      	mov	r3, r2
 8007a9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a9c:	e0a5      	b.n	8007bea <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa4:	f000 80a1 	beq.w	8007bea <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007aa8:	f7fb fa06 	bl	8002eb8 <HAL_GetTick>
 8007aac:	4602      	mov	r2, r0
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d302      	bcc.n	8007abe <UART_WaitOnFlagUntilTimeout+0x32>
 8007ab8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d13e      	bne.n	8007b3c <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ac6:	e853 3f00 	ldrex	r3, [r3]
 8007aca:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ace:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ad2:	667b      	str	r3, [r7, #100]	; 0x64
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	461a      	mov	r2, r3
 8007ada:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007adc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ade:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ae2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ae4:	e841 2300 	strex	r3, r2, [r1]
 8007ae8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007aea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d1e6      	bne.n	8007abe <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	3308      	adds	r3, #8
 8007af6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007afa:	e853 3f00 	ldrex	r3, [r3]
 8007afe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b02:	f023 0301 	bic.w	r3, r3, #1
 8007b06:	663b      	str	r3, [r7, #96]	; 0x60
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	3308      	adds	r3, #8
 8007b0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007b10:	64ba      	str	r2, [r7, #72]	; 0x48
 8007b12:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b14:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b18:	e841 2300 	strex	r3, r2, [r1]
 8007b1c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007b1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d1e5      	bne.n	8007af0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2220      	movs	r2, #32
 8007b28:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2220      	movs	r2, #32
 8007b2e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007b38:	2303      	movs	r3, #3
 8007b3a:	e067      	b.n	8007c0c <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f003 0304 	and.w	r3, r3, #4
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d04f      	beq.n	8007bea <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	69db      	ldr	r3, [r3, #28]
 8007b50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b58:	d147      	bne.n	8007bea <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b62:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6c:	e853 3f00 	ldrex	r3, [r3]
 8007b70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	461a      	mov	r2, r3
 8007b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b82:	637b      	str	r3, [r7, #52]	; 0x34
 8007b84:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b8a:	e841 2300 	strex	r3, r2, [r1]
 8007b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d1e6      	bne.n	8007b64 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	3308      	adds	r3, #8
 8007b9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	e853 3f00 	ldrex	r3, [r3]
 8007ba4:	613b      	str	r3, [r7, #16]
   return(result);
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	f023 0301 	bic.w	r3, r3, #1
 8007bac:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	3308      	adds	r3, #8
 8007bb4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007bb6:	623a      	str	r2, [r7, #32]
 8007bb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bba:	69f9      	ldr	r1, [r7, #28]
 8007bbc:	6a3a      	ldr	r2, [r7, #32]
 8007bbe:	e841 2300 	strex	r3, r2, [r1]
 8007bc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d1e5      	bne.n	8007b96 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2220      	movs	r2, #32
 8007bce:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2220      	movs	r2, #32
 8007bd4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2220      	movs	r2, #32
 8007bda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	e010      	b.n	8007c0c <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	69da      	ldr	r2, [r3, #28]
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	4013      	ands	r3, r2
 8007bf4:	68ba      	ldr	r2, [r7, #8]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	bf0c      	ite	eq
 8007bfa:	2301      	moveq	r3, #1
 8007bfc:	2300      	movne	r3, #0
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	461a      	mov	r2, r3
 8007c02:	79fb      	ldrb	r3, [r7, #7]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	f43f af4a 	beq.w	8007a9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3770      	adds	r7, #112	; 0x70
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8007c14:	b5b0      	push	{r4, r5, r7, lr}
 8007c16:	f5ad 7d28 	sub.w	sp, sp, #672	; 0x2a0
 8007c1a:	af04      	add	r7, sp, #16
  uint8_t  MAC_Addr[6];
  uint8_t  IP_Addr[4];

  uint8_t TxData[300] = "";
 8007c1c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8007c20:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8007c24:	2200      	movs	r2, #0
 8007c26:	601a      	str	r2, [r3, #0]
 8007c28:	3304      	adds	r3, #4
 8007c2a:	f44f 7294 	mov.w	r2, #296	; 0x128
 8007c2e:	2100      	movs	r1, #0
 8007c30:	4618      	mov	r0, r3
 8007c32:	f000 fbf1 	bl	8008418 <memset>
  int32_t Socket = -1;
 8007c36:	f04f 33ff 	mov.w	r3, #4294967295
 8007c3a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
  uint16_t Datalen;
  int32_t ret;
  int16_t Trials = CONNECTION_TRIAL_MAX;
 8007c3e:	230a      	movs	r3, #10
 8007c40:	f8a7 328a 	strh.w	r3, [r7, #650]	; 0x28a

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007c44:	f7fb f90d 	bl	8002e62 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8007c48:	f000 fa40 	bl	80080cc <SystemClock_Config>
  /* Configure LED2 */
  BSP_LED_Init(LED2);
 8007c4c:	2000      	movs	r0, #0
 8007c4e:	f7fa fc03 	bl	8002458 <BSP_LED_Init>

#if defined (TERMINAL_USE)
  /* Initialize all configured peripherals */
  hDiscoUart.Instance = DISCOVERY_COM1;
 8007c52:	4b6c      	ldr	r3, [pc, #432]	; (8007e04 <main+0x1f0>)
 8007c54:	4a6c      	ldr	r2, [pc, #432]	; (8007e08 <main+0x1f4>)
 8007c56:	601a      	str	r2, [r3, #0]
  hDiscoUart.Init.BaudRate = 115200;
 8007c58:	4b6a      	ldr	r3, [pc, #424]	; (8007e04 <main+0x1f0>)
 8007c5a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007c5e:	605a      	str	r2, [r3, #4]
  hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 8007c60:	4b68      	ldr	r3, [pc, #416]	; (8007e04 <main+0x1f0>)
 8007c62:	2200      	movs	r2, #0
 8007c64:	609a      	str	r2, [r3, #8]
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 8007c66:	4b67      	ldr	r3, [pc, #412]	; (8007e04 <main+0x1f0>)
 8007c68:	2200      	movs	r2, #0
 8007c6a:	60da      	str	r2, [r3, #12]
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 8007c6c:	4b65      	ldr	r3, [pc, #404]	; (8007e04 <main+0x1f0>)
 8007c6e:	2200      	movs	r2, #0
 8007c70:	611a      	str	r2, [r3, #16]
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 8007c72:	4b64      	ldr	r3, [pc, #400]	; (8007e04 <main+0x1f0>)
 8007c74:	220c      	movs	r2, #12
 8007c76:	615a      	str	r2, [r3, #20]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007c78:	4b62      	ldr	r3, [pc, #392]	; (8007e04 <main+0x1f0>)
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	619a      	str	r2, [r3, #24]
  hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 8007c7e:	4b61      	ldr	r3, [pc, #388]	; (8007e04 <main+0x1f0>)
 8007c80:	2200      	movs	r2, #0
 8007c82:	61da      	str	r2, [r3, #28]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007c84:	4b5f      	ldr	r3, [pc, #380]	; (8007e04 <main+0x1f0>)
 8007c86:	2200      	movs	r2, #0
 8007c88:	621a      	str	r2, [r3, #32]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007c8a:	4b5e      	ldr	r3, [pc, #376]	; (8007e04 <main+0x1f0>)
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	625a      	str	r2, [r3, #36]	; 0x24

  BSP_COM_Init(COM1, &hDiscoUart);
 8007c90:	495c      	ldr	r1, [pc, #368]	; (8007e04 <main+0x1f0>)
 8007c92:	2000      	movs	r0, #0
 8007c94:	f7fa fc26 	bl	80024e4 <BSP_COM_Init>
#endif /* TERMINAL_USE */

  TERMOUT("****** WIFI Module in TCP Client mode demonstration ****** \n\r\n");
 8007c98:	485c      	ldr	r0, [pc, #368]	; (8007e0c <main+0x1f8>)
 8007c9a:	f000 fc4b 	bl	8008534 <puts>
  TERMOUT("TCP Client Instructions :\n\r");
 8007c9e:	485c      	ldr	r0, [pc, #368]	; (8007e10 <main+0x1fc>)
 8007ca0:	f000 fbc2 	bl	8008428 <iprintf>
  TERMOUT("1- Make sure your Phone is connected to the same network that\n\r");
 8007ca4:	485b      	ldr	r0, [pc, #364]	; (8007e14 <main+0x200>)
 8007ca6:	f000 fbbf 	bl	8008428 <iprintf>
  TERMOUT("   you configured using the Configuration Access Point.\n\r");
 8007caa:	485b      	ldr	r0, [pc, #364]	; (8007e18 <main+0x204>)
 8007cac:	f000 fbbc 	bl	8008428 <iprintf>
  TERMOUT("2- Create a server by using the android application TCP Server\n\r");
 8007cb0:	485a      	ldr	r0, [pc, #360]	; (8007e1c <main+0x208>)
 8007cb2:	f000 fbb9 	bl	8008428 <iprintf>
  TERMOUT("   with port(8002).\n\r");
 8007cb6:	485a      	ldr	r0, [pc, #360]	; (8007e20 <main+0x20c>)
 8007cb8:	f000 fbb6 	bl	8008428 <iprintf>
  TERMOUT("3- Get the Network Name or IP Address of your Android from the step 2.\n\r\n\r");
 8007cbc:	4859      	ldr	r0, [pc, #356]	; (8007e24 <main+0x210>)
 8007cbe:	f000 fbb3 	bl	8008428 <iprintf>



  /*Initialize  WIFI module */
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 8007cc2:	f7fa faed 	bl	80022a0 <WIFI_Init>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	f040 80c9 	bne.w	8007e60 <main+0x24c>
  {
    TERMOUT("> WIFI Module Initialized.\n\r");
 8007cce:	4856      	ldr	r0, [pc, #344]	; (8007e28 <main+0x214>)
 8007cd0:	f000 fbaa 	bl	8008428 <iprintf>
    if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 8007cd4:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f7fa fb2f 	bl	800233c <WIFI_GetMAC_Address>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d118      	bne.n	8007d16 <main+0x102>
    {
      TERMOUT("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n\r",
 8007ce4:	f897 3264 	ldrb.w	r3, [r7, #612]	; 0x264
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f897 3265 	ldrb.w	r3, [r7, #613]	; 0x265
 8007cee:	461c      	mov	r4, r3
 8007cf0:	f897 3266 	ldrb.w	r3, [r7, #614]	; 0x266
 8007cf4:	461d      	mov	r5, r3
 8007cf6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007cfa:	f897 2268 	ldrb.w	r2, [r7, #616]	; 0x268
 8007cfe:	f897 1269 	ldrb.w	r1, [r7, #617]	; 0x269
 8007d02:	9102      	str	r1, [sp, #8]
 8007d04:	9201      	str	r2, [sp, #4]
 8007d06:	9300      	str	r3, [sp, #0]
 8007d08:	462b      	mov	r3, r5
 8007d0a:	4622      	mov	r2, r4
 8007d0c:	4601      	mov	r1, r0
 8007d0e:	4847      	ldr	r0, [pc, #284]	; (8007e2c <main+0x218>)
 8007d10:	f000 fb8a 	bl	8008428 <iprintf>
 8007d14:	e005      	b.n	8007d22 <main+0x10e>
               MAC_Addr[4],
               MAC_Addr[5]);
    }
    else
    {
      TERMOUT("> ERROR : CANNOT get MAC address\n\r");
 8007d16:	4846      	ldr	r0, [pc, #280]	; (8007e30 <main+0x21c>)
 8007d18:	f000 fb86 	bl	8008428 <iprintf>
      BSP_LED_On(LED2);
 8007d1c:	2000      	movs	r0, #0
 8007d1e:	f7fa fbcb 	bl	80024b8 <BSP_LED_On>
    }

    if( WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 8007d22:	2203      	movs	r2, #3
 8007d24:	4943      	ldr	r1, [pc, #268]	; (8007e34 <main+0x220>)
 8007d26:	4844      	ldr	r0, [pc, #272]	; (8007e38 <main+0x224>)
 8007d28:	f7fa fae6 	bl	80022f8 <WIFI_Connect>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d161      	bne.n	8007df6 <main+0x1e2>
    {
      TERMOUT("> es-wifi module connected \n\r");
 8007d32:	4842      	ldr	r0, [pc, #264]	; (8007e3c <main+0x228>)
 8007d34:	f000 fb78 	bl	8008428 <iprintf>
      if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 8007d38:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7fa fb13 	bl	8002368 <WIFI_GetIP_Address>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d14f      	bne.n	8007de8 <main+0x1d4>
      {
        TERMOUT("> es-wifi module got IP Address : %d.%d.%d.%d\n\r",
 8007d48:	f897 3260 	ldrb.w	r3, [r7, #608]	; 0x260
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	f897 3261 	ldrb.w	r3, [r7, #609]	; 0x261
 8007d52:	461a      	mov	r2, r3
 8007d54:	f897 3262 	ldrb.w	r3, [r7, #610]	; 0x262
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f897 3263 	ldrb.w	r3, [r7, #611]	; 0x263
 8007d5e:	9300      	str	r3, [sp, #0]
 8007d60:	4603      	mov	r3, r0
 8007d62:	4837      	ldr	r0, [pc, #220]	; (8007e40 <main+0x22c>)
 8007d64:	f000 fb60 	bl	8008428 <iprintf>
               IP_Addr[0],
               IP_Addr[1],
               IP_Addr[2],
               IP_Addr[3]);

        TERMOUT("> Trying to connect to Server: %d.%d.%d.%d:%d ...\n\r",
 8007d68:	4b36      	ldr	r3, [pc, #216]	; (8007e44 <main+0x230>)
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	4b35      	ldr	r3, [pc, #212]	; (8007e44 <main+0x230>)
 8007d70:	785b      	ldrb	r3, [r3, #1]
 8007d72:	4618      	mov	r0, r3
 8007d74:	4b33      	ldr	r3, [pc, #204]	; (8007e44 <main+0x230>)
 8007d76:	789b      	ldrb	r3, [r3, #2]
 8007d78:	461c      	mov	r4, r3
 8007d7a:	4b32      	ldr	r3, [pc, #200]	; (8007e44 <main+0x230>)
 8007d7c:	78db      	ldrb	r3, [r3, #3]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	f641 7342 	movw	r3, #8002	; 0x1f42
 8007d84:	9301      	str	r3, [sp, #4]
 8007d86:	9200      	str	r2, [sp, #0]
 8007d88:	4623      	mov	r3, r4
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	482e      	ldr	r0, [pc, #184]	; (8007e48 <main+0x234>)
 8007d8e:	f000 fb4b 	bl	8008428 <iprintf>
               RemoteIP[1],
               RemoteIP[2],
               RemoteIP[3],
							 RemotePORT);

        while (Trials--)
 8007d92:	e014      	b.n	8007dbe <main+0x1aa>
        {
          if( WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", RemoteIP, RemotePORT, 0) == WIFI_STATUS_OK)
 8007d94:	2300      	movs	r3, #0
 8007d96:	9301      	str	r3, [sp, #4]
 8007d98:	f641 7342 	movw	r3, #8002	; 0x1f42
 8007d9c:	9300      	str	r3, [sp, #0]
 8007d9e:	4b29      	ldr	r3, [pc, #164]	; (8007e44 <main+0x230>)
 8007da0:	4a2a      	ldr	r2, [pc, #168]	; (8007e4c <main+0x238>)
 8007da2:	2100      	movs	r1, #0
 8007da4:	2000      	movs	r0, #0
 8007da6:	f7fa fafb 	bl	80023a0 <WIFI_OpenClientConnection>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d106      	bne.n	8007dbe <main+0x1aa>
          {
            TERMOUT("> TCP Connection opened successfully.\n\r");
 8007db0:	4827      	ldr	r0, [pc, #156]	; (8007e50 <main+0x23c>)
 8007db2:	f000 fb39 	bl	8008428 <iprintf>
            Socket = 0;
 8007db6:	2300      	movs	r3, #0
 8007db8:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
            break;
 8007dbc:	e008      	b.n	8007dd0 <main+0x1bc>
        while (Trials--)
 8007dbe:	f9b7 328a 	ldrsh.w	r3, [r7, #650]	; 0x28a
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	3a01      	subs	r2, #1
 8007dc6:	b292      	uxth	r2, r2
 8007dc8:	f8a7 228a 	strh.w	r2, [r7, #650]	; 0x28a
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d1e1      	bne.n	8007d94 <main+0x180>
          }
        }
        if(Socket == -1)
 8007dd0:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd8:	d148      	bne.n	8007e6c <main+0x258>
        {
          TERMOUT("> ERROR : Cannot open Connection\n\r");
 8007dda:	481e      	ldr	r0, [pc, #120]	; (8007e54 <main+0x240>)
 8007ddc:	f000 fb24 	bl	8008428 <iprintf>
          BSP_LED_On(LED2);
 8007de0:	2000      	movs	r0, #0
 8007de2:	f7fa fb69 	bl	80024b8 <BSP_LED_On>
 8007de6:	e041      	b.n	8007e6c <main+0x258>
        }
      }
      else
      {
        TERMOUT("> ERROR : es-wifi module CANNOT get IP address\n\r");
 8007de8:	481b      	ldr	r0, [pc, #108]	; (8007e58 <main+0x244>)
 8007dea:	f000 fb1d 	bl	8008428 <iprintf>
        BSP_LED_On(LED2);
 8007dee:	2000      	movs	r0, #0
 8007df0:	f7fa fb62 	bl	80024b8 <BSP_LED_On>
 8007df4:	e03a      	b.n	8007e6c <main+0x258>
      }
    }
    else
    {
      TERMOUT("> ERROR : es-wifi module NOT connected\n\r");
 8007df6:	4819      	ldr	r0, [pc, #100]	; (8007e5c <main+0x248>)
 8007df8:	f000 fb16 	bl	8008428 <iprintf>
      BSP_LED_On(LED2);
 8007dfc:	2000      	movs	r0, #0
 8007dfe:	f7fa fb5b 	bl	80024b8 <BSP_LED_On>
 8007e02:	e033      	b.n	8007e6c <main+0x258>
 8007e04:	20000a8c 	.word	0x20000a8c
 8007e08:	40013800 	.word	0x40013800
 8007e0c:	08009f64 	.word	0x08009f64
 8007e10:	08009fa4 	.word	0x08009fa4
 8007e14:	08009fc0 	.word	0x08009fc0
 8007e18:	0800a000 	.word	0x0800a000
 8007e1c:	0800a03c 	.word	0x0800a03c
 8007e20:	0800a080 	.word	0x0800a080
 8007e24:	0800a098 	.word	0x0800a098
 8007e28:	0800a0e4 	.word	0x0800a0e4
 8007e2c:	0800a104 	.word	0x0800a104
 8007e30:	0800a138 	.word	0x0800a138
 8007e34:	0800a15c 	.word	0x0800a15c
 8007e38:	0800a184 	.word	0x0800a184
 8007e3c:	0800a194 	.word	0x0800a194
 8007e40:	0800a1b4 	.word	0x0800a1b4
 8007e44:	20000040 	.word	0x20000040
 8007e48:	0800a1e4 	.word	0x0800a1e4
 8007e4c:	0800a218 	.word	0x0800a218
 8007e50:	0800a224 	.word	0x0800a224
 8007e54:	0800a24c 	.word	0x0800a24c
 8007e58:	0800a270 	.word	0x0800a270
 8007e5c:	0800a2a4 	.word	0x0800a2a4
    }
  }
  else
  {
    TERMOUT("> ERROR : WIFI Module cannot be initialized.\n\r");
 8007e60:	4893      	ldr	r0, [pc, #588]	; (80080b0 <main+0x49c>)
 8007e62:	f000 fae1 	bl	8008428 <iprintf>
    BSP_LED_On(LED2);
 8007e66:	2000      	movs	r0, #0
 8007e68:	f7fa fb26 	bl	80024b8 <BSP_LED_On>
  }
  /*Temperature sensor*/
  BSP_TSENSOR_Init();
 8007e6c:	f7fa fd4e 	bl	800290c <BSP_TSENSOR_Init>
  float temp_value = 0; // Measured temperature value
 8007e70:	f04f 0300 	mov.w	r3, #0
 8007e74:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
  char str_tmp[100] = ""; // Formatted message to display the temperature value
 8007e78:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8007e7c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8007e80:	2200      	movs	r2, #0
 8007e82:	601a      	str	r2, [r3, #0]
 8007e84:	3304      	adds	r3, #4
 8007e86:	2260      	movs	r2, #96	; 0x60
 8007e88:	2100      	movs	r1, #0
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f000 fac4 	bl	8008418 <memset>

  /*Humidity sensor*/
  BSP_HSENSOR_Init();
 8007e90:	f7fa fce4 	bl	800285c <BSP_HSENSOR_Init>
  float hum_value = 0; // Measured temperature value
 8007e94:	f04f 0300 	mov.w	r3, #0
 8007e98:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
  char str_hum[100] = ""; // Formatted message to display the temperature value
 8007e9c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8007ea0:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	601a      	str	r2, [r3, #0]
 8007ea8:	3304      	adds	r3, #4
 8007eaa:	2260      	movs	r2, #96	; 0x60
 8007eac:	2100      	movs	r1, #0
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f000 fab2 	bl	8008418 <memset>

  /*Pressure sensor*/
  BSP_PSENSOR_Init();
 8007eb4:	f7fa fcfe 	bl	80028b4 <BSP_PSENSOR_Init>
  float pressure_value = 0; // Measured temperature value
 8007eb8:	f04f 0300 	mov.w	r3, #0
 8007ebc:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
  char str_pressure[100] = ""; // Formatted message to display the temperature value
 8007ec0:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8007ec4:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8007ec8:	2200      	movs	r2, #0
 8007eca:	601a      	str	r2, [r3, #0]
 8007ecc:	3304      	adds	r3, #4
 8007ece:	2260      	movs	r2, #96	; 0x60
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f000 faa0 	bl	8008418 <memset>

  TERMOUT("> Temperature sensor is initialized\n\r");
 8007ed8:	4876      	ldr	r0, [pc, #472]	; (80080b4 <main+0x4a0>)
 8007eda:	f000 faa5 	bl	8008428 <iprintf>
////////////////////////////////////////Wile loop////////////////////////////////////////
  while(1)
  {
    if(Socket != -1)
 8007ede:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee6:	d0fa      	beq.n	8007ede <main+0x2ca>
    {
    	/*Get the temperature value*/
    	temp_value = BSP_TSENSOR_ReadTemp();
 8007ee8:	f7fa fd2c 	bl	8002944 <BSP_TSENSOR_ReadTemp>
 8007eec:	f8c7 0284 	str.w	r0, [r7, #644]	; 0x284
		int tmpInt1 = temp_value;
 8007ef0:	f8d7 0284 	ldr.w	r0, [r7, #644]	; 0x284
 8007ef4:	f7f8 fe7c 	bl	8000bf0 <__aeabi_f2iz>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
		float tmpFrac = temp_value - tmpInt1;
 8007efe:	f8d7 0278 	ldr.w	r0, [r7, #632]	; 0x278
 8007f02:	f7f8 fc5b 	bl	80007bc <__aeabi_i2f>
 8007f06:	4603      	mov	r3, r0
 8007f08:	4619      	mov	r1, r3
 8007f0a:	f8d7 0284 	ldr.w	r0, [r7, #644]	; 0x284
 8007f0e:	f7f8 fb9f 	bl	8000650 <__aeabi_fsub>
 8007f12:	4603      	mov	r3, r0
 8007f14:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
		int tmpInt2 = trunc(tmpFrac * 100);
 8007f18:	4967      	ldr	r1, [pc, #412]	; (80080b8 <main+0x4a4>)
 8007f1a:	f8d7 0274 	ldr.w	r0, [r7, #628]	; 0x274
 8007f1e:	f7f8 fca1 	bl	8000864 <__aeabi_fmul>
 8007f22:	4603      	mov	r3, r0
 8007f24:	4618      	mov	r0, r3
 8007f26:	f7f8 fb0f 	bl	8000548 <__aeabi_f2d>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	4610      	mov	r0, r2
 8007f30:	4619      	mov	r1, r3
 8007f32:	f001 fd81 	bl	8009a38 <trunc>
 8007f36:	4602      	mov	r2, r0
 8007f38:	460b      	mov	r3, r1
 8007f3a:	4610      	mov	r0, r2
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	f7f8 fb5b 	bl	80005f8 <__aeabi_d2iz>
 8007f42:	4603      	mov	r3, r0
 8007f44:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
		snprintf(str_tmp,100,"%d.%02d&", tmpInt1, tmpInt2);
 8007f48:	f107 00cc 	add.w	r0, r7, #204	; 0xcc
 8007f4c:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8007f50:	9300      	str	r3, [sp, #0]
 8007f52:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8007f56:	4a59      	ldr	r2, [pc, #356]	; (80080bc <main+0x4a8>)
 8007f58:	2164      	movs	r1, #100	; 0x64
 8007f5a:	f000 faf3 	bl	8008544 <sniprintf>

    	/*Get the Humidity value*/
		hum_value = BSP_HSENSOR_ReadHumidity();
 8007f5e:	f7fa fc9d 	bl	800289c <BSP_HSENSOR_ReadHumidity>
 8007f62:	f8c7 0280 	str.w	r0, [r7, #640]	; 0x280
		tmpInt1 = hum_value;
 8007f66:	f8d7 0280 	ldr.w	r0, [r7, #640]	; 0x280
 8007f6a:	f7f8 fe41 	bl	8000bf0 <__aeabi_f2iz>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
		tmpFrac = hum_value - tmpInt1;
 8007f74:	f8d7 0278 	ldr.w	r0, [r7, #632]	; 0x278
 8007f78:	f7f8 fc20 	bl	80007bc <__aeabi_i2f>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	4619      	mov	r1, r3
 8007f80:	f8d7 0280 	ldr.w	r0, [r7, #640]	; 0x280
 8007f84:	f7f8 fb64 	bl	8000650 <__aeabi_fsub>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
		tmpInt2 = trunc(tmpFrac * 100);
 8007f8e:	494a      	ldr	r1, [pc, #296]	; (80080b8 <main+0x4a4>)
 8007f90:	f8d7 0274 	ldr.w	r0, [r7, #628]	; 0x274
 8007f94:	f7f8 fc66 	bl	8000864 <__aeabi_fmul>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7f8 fad4 	bl	8000548 <__aeabi_f2d>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	4610      	mov	r0, r2
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	f001 fd46 	bl	8009a38 <trunc>
 8007fac:	4602      	mov	r2, r0
 8007fae:	460b      	mov	r3, r1
 8007fb0:	4610      	mov	r0, r2
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	f7f8 fb20 	bl	80005f8 <__aeabi_d2iz>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
		snprintf(str_hum,100,"%d.%02d&", tmpInt1, tmpInt2);
 8007fbe:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8007fc2:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8007fc6:	9300      	str	r3, [sp, #0]
 8007fc8:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8007fcc:	4a3b      	ldr	r2, [pc, #236]	; (80080bc <main+0x4a8>)
 8007fce:	2164      	movs	r1, #100	; 0x64
 8007fd0:	f000 fab8 	bl	8008544 <sniprintf>

    	/*Get the Pressure value*/
		pressure_value = BSP_PSENSOR_ReadPressure();
 8007fd4:	f7fa fc8e 	bl	80028f4 <BSP_PSENSOR_ReadPressure>
 8007fd8:	f8c7 027c 	str.w	r0, [r7, #636]	; 0x27c
		tmpInt1 = pressure_value;
 8007fdc:	f8d7 027c 	ldr.w	r0, [r7, #636]	; 0x27c
 8007fe0:	f7f8 fe06 	bl	8000bf0 <__aeabi_f2iz>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
		tmpFrac = pressure_value - tmpInt1;
 8007fea:	f8d7 0278 	ldr.w	r0, [r7, #632]	; 0x278
 8007fee:	f7f8 fbe5 	bl	80007bc <__aeabi_i2f>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	f8d7 027c 	ldr.w	r0, [r7, #636]	; 0x27c
 8007ffa:	f7f8 fb29 	bl	8000650 <__aeabi_fsub>
 8007ffe:	4603      	mov	r3, r0
 8008000:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
		tmpInt2 = trunc(tmpFrac * 100);
 8008004:	492c      	ldr	r1, [pc, #176]	; (80080b8 <main+0x4a4>)
 8008006:	f8d7 0274 	ldr.w	r0, [r7, #628]	; 0x274
 800800a:	f7f8 fc2b 	bl	8000864 <__aeabi_fmul>
 800800e:	4603      	mov	r3, r0
 8008010:	4618      	mov	r0, r3
 8008012:	f7f8 fa99 	bl	8000548 <__aeabi_f2d>
 8008016:	4602      	mov	r2, r0
 8008018:	460b      	mov	r3, r1
 800801a:	4610      	mov	r0, r2
 800801c:	4619      	mov	r1, r3
 800801e:	f001 fd0b 	bl	8009a38 <trunc>
 8008022:	4602      	mov	r2, r0
 8008024:	460b      	mov	r3, r1
 8008026:	4610      	mov	r0, r2
 8008028:	4619      	mov	r1, r3
 800802a:	f7f8 fae5 	bl	80005f8 <__aeabi_d2iz>
 800802e:	4603      	mov	r3, r0
 8008030:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
		snprintf(str_pressure,100,"%d.%02d", tmpInt1, tmpInt2);
 8008034:	1d38      	adds	r0, r7, #4
 8008036:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 800803a:	9300      	str	r3, [sp, #0]
 800803c:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8008040:	4a1f      	ldr	r2, [pc, #124]	; (80080c0 <main+0x4ac>)
 8008042:	2164      	movs	r1, #100	; 0x64
 8008044:	f000 fa7e 	bl	8008544 <sniprintf>

		/*Build the buffer to send with temperature, humidity ad pressure*/
		snprintf(TxData,300,"%s%s%s",str_tmp, str_hum,str_pressure);
 8008048:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 800804c:	f507 709a 	add.w	r0, r7, #308	; 0x134
 8008050:	1d3b      	adds	r3, r7, #4
 8008052:	9301      	str	r3, [sp, #4]
 8008054:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008058:	9300      	str	r3, [sp, #0]
 800805a:	4613      	mov	r3, r2
 800805c:	4a19      	ldr	r2, [pc, #100]	; (80080c4 <main+0x4b0>)
 800805e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8008062:	f000 fa6f 	bl	8008544 <sniprintf>

        ret = WIFI_SendData(Socket, TxData, sizeof(TxData), &Datalen, WIFI_WRITE_TIMEOUT);
 8008066:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800806a:	b2d8      	uxtb	r0, r3
 800806c:	f507 7399 	add.w	r3, r7, #306	; 0x132
 8008070:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8008074:	f242 7210 	movw	r2, #10000	; 0x2710
 8008078:	9200      	str	r2, [sp, #0]
 800807a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800807e:	f7fa f9c9 	bl	8002414 <WIFI_SendData>
 8008082:	4603      	mov	r3, r0
 8008084:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
        if (ret != WIFI_STATUS_OK)
 8008088:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 800808c:	2b00      	cmp	r3, #0
 800808e:	d003      	beq.n	8008098 <main+0x484>
        {
          TERMOUT("> ERROR : Failed to Send Data, connection closed\n\r");
 8008090:	480d      	ldr	r0, [pc, #52]	; (80080c8 <main+0x4b4>)
 8008092:	f000 f9c9 	bl	8008428 <iprintf>
          break;
 8008096:	e004      	b.n	80080a2 <main+0x48e>
        }

        HAL_Delay(3000);
 8008098:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800809c:	f7fa ff16 	bl	8002ecc <HAL_Delay>
    if(Socket != -1)
 80080a0:	e71d      	b.n	8007ede <main+0x2ca>
 80080a2:	2300      	movs	r3, #0
//        TERMOUT("> ERROR : Failed to Receive Data, connection closed\n\r");
//        break;
//      }
    }
  }
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	f507 7724 	add.w	r7, r7, #656	; 0x290
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bdb0      	pop	{r4, r5, r7, pc}
 80080ae:	bf00      	nop
 80080b0:	0800a2d0 	.word	0x0800a2d0
 80080b4:	0800a300 	.word	0x0800a300
 80080b8:	42c80000 	.word	0x42c80000
 80080bc:	0800a328 	.word	0x0800a328
 80080c0:	0800a334 	.word	0x0800a334
 80080c4:	0800a33c 	.word	0x0800a33c
 80080c8:	0800a344 	.word	0x0800a344

080080cc <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b096      	sub	sp, #88	; 0x58
 80080d0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80080d2:	2310      	movs	r3, #16
 80080d4:	603b      	str	r3, [r7, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80080d6:	2301      	movs	r3, #1
 80080d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80080da:	2360      	movs	r3, #96	; 0x60
 80080dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80080de:	2300      	movs	r3, #0
 80080e0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80080e2:	2302      	movs	r3, #2
 80080e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80080e6:	2301      	movs	r3, #1
 80080e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80080ea:	2301      	movs	r3, #1
 80080ec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 40;
 80080ee:	2328      	movs	r3, #40	; 0x28
 80080f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = 2;
 80080f2:	2302      	movs	r3, #2
 80080f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = 7;
 80080f6:	2307      	movs	r3, #7
 80080f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80080fa:	2304      	movs	r3, #4
 80080fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80080fe:	463b      	mov	r3, r7
 8008100:	4618      	mov	r0, r3
 8008102:	f7fc f813 	bl	800412c <HAL_RCC_OscConfig>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d000      	beq.n	800810e <SystemClock_Config+0x42>
  {
    /* Initialization Error */
    while(1);
 800810c:	e7fe      	b.n	800810c <SystemClock_Config+0x40>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800810e:	230f      	movs	r3, #15
 8008110:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008112:	2303      	movs	r3, #3
 8008114:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008116:	2300      	movs	r3, #0
 8008118:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800811a:	2300      	movs	r3, #0
 800811c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800811e:	2300      	movs	r3, #0
 8008120:	657b      	str	r3, [r7, #84]	; 0x54
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8008122:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008126:	2104      	movs	r1, #4
 8008128:	4618      	mov	r0, r3
 800812a:	f7fc fbe7 	bl	80048fc <HAL_RCC_ClockConfig>
 800812e:	4603      	mov	r3, r0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d000      	beq.n	8008136 <SystemClock_Config+0x6a>
  {
    /* Initialization Error */
    while(1);
 8008134:	e7fe      	b.n	8008134 <SystemClock_Config+0x68>
  }
}
 8008136:	bf00      	nop
 8008138:	3758      	adds	r7, #88	; 0x58
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
	...

08008140 <__io_putchar>:
  * @brief  Retargets the C library TERMOUT function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 8008148:	1d39      	adds	r1, r7, #4
 800814a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800814e:	2201      	movs	r2, #1
 8008150:	4803      	ldr	r0, [pc, #12]	; (8008160 <__io_putchar+0x20>)
 8008152:	f7ff f864 	bl	800721e <HAL_UART_Transmit>

  return ch;
 8008156:	687b      	ldr	r3, [r7, #4]
}
 8008158:	4618      	mov	r0, r3
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	20000a8c 	.word	0x20000a8c

08008164 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	4603      	mov	r3, r0
 800816c:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800816e:	88fb      	ldrh	r3, [r7, #6]
 8008170:	2b02      	cmp	r3, #2
 8008172:	d102      	bne.n	800817a <HAL_GPIO_EXTI_Callback+0x16>
  {
    case (GPIO_PIN_1):
    {
      SPI_WIFI_ISR();
 8008174:	f7fa f884 	bl	8002280 <SPI_WIFI_ISR>
      break;
 8008178:	e000      	b.n	800817c <HAL_GPIO_EXTI_Callback+0x18>
    }
    default:
    {
      break;
 800817a:	bf00      	nop
    }
  }
}
 800817c:	bf00      	nop
 800817e:	3708      	adds	r7, #8
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <SPI3_IRQHandler>:

void SPI3_IRQHandler(void)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8008188:	4802      	ldr	r0, [pc, #8]	; (8008194 <SPI3_IRQHandler+0x10>)
 800818a:	f7fd fe0f 	bl	8005dac <HAL_SPI_IRQHandler>
}
 800818e:	bf00      	nop
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	200000cc 	.word	0x200000cc

08008198 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8008198:	b480      	push	{r7}
 800819a:	af00      	add	r7, sp, #0
}
 800819c:	bf00      	nop
 800819e:	46bd      	mov	sp, r7
 80081a0:	bc80      	pop	{r7}
 80081a2:	4770      	bx	lr

080081a4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80081a4:	b480      	push	{r7}
 80081a6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80081a8:	e7fe      	b.n	80081a8 <HardFault_Handler+0x4>

080081aa <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80081aa:	b480      	push	{r7}
 80081ac:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80081ae:	e7fe      	b.n	80081ae <MemManage_Handler+0x4>

080081b0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80081b0:	b480      	push	{r7}
 80081b2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80081b4:	e7fe      	b.n	80081b4 <BusFault_Handler+0x4>

080081b6 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80081b6:	b480      	push	{r7}
 80081b8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80081ba:	e7fe      	b.n	80081ba <UsageFault_Handler+0x4>

080081bc <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80081bc:	b480      	push	{r7}
 80081be:	af00      	add	r7, sp, #0
}
 80081c0:	bf00      	nop
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bc80      	pop	{r7}
 80081c6:	4770      	bx	lr

080081c8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80081c8:	b480      	push	{r7}
 80081ca:	af00      	add	r7, sp, #0
}
 80081cc:	bf00      	nop
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bc80      	pop	{r7}
 80081d2:	4770      	bx	lr

080081d4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80081d4:	b480      	push	{r7}
 80081d6:	af00      	add	r7, sp, #0
}
 80081d8:	bf00      	nop
 80081da:	46bd      	mov	sp, r7
 80081dc:	bc80      	pop	{r7}
 80081de:	4770      	bx	lr

080081e0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80081e4:	f7fa fe56 	bl	8002e94 <HAL_IncTick>
}
 80081e8:	bf00      	nop
 80081ea:	bd80      	pop	{r7, pc}

080081ec <EXTI1_IRQHandler>:
  * @brief  This function handles external lines 1interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80081f0:	2002      	movs	r0, #2
 80081f2:	f7fb f985 	bl	8003500 <HAL_GPIO_EXTI_IRQHandler>
}
 80081f6:	bf00      	nop
 80081f8:	bd80      	pop	{r7, pc}

080081fa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80081fa:	b480      	push	{r7}
 80081fc:	af00      	add	r7, sp, #0
	return 1;
 80081fe:	2301      	movs	r3, #1
}
 8008200:	4618      	mov	r0, r3
 8008202:	46bd      	mov	sp, r7
 8008204:	bc80      	pop	{r7}
 8008206:	4770      	bx	lr

08008208 <_kill>:

int _kill(int pid, int sig)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8008212:	f000 f8c9 	bl	80083a8 <__errno>
 8008216:	4603      	mov	r3, r0
 8008218:	2216      	movs	r2, #22
 800821a:	601a      	str	r2, [r3, #0]
	return -1;
 800821c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008220:	4618      	mov	r0, r3
 8008222:	3708      	adds	r7, #8
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <_exit>:

void _exit (int status)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008230:	f04f 31ff 	mov.w	r1, #4294967295
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f7ff ffe7 	bl	8008208 <_kill>
	while (1) {}		/* Make sure we hang here */
 800823a:	e7fe      	b.n	800823a <_exit+0x12>

0800823c <_read>:
}

int _read (int file, char *ptr, int len)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	607a      	str	r2, [r7, #4]
	/* The I/O library uses an internal buffer */
	/* It asks for 1024 characters even if only getc() is used. */
	/* If we use a for(;;) loop on the number of characters requested, */
	/* the user is forced to enter the exact number requested, even if only one is needed. */
	/* So here we return only 1 character even if requested length is > 1 */
	*ptr = __io_getchar();
 8008248:	f3af 8000 	nop.w
 800824c:	4603      	mov	r3, r0
 800824e:	b2da      	uxtb	r2, r3
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	701a      	strb	r2, [r3, #0]

	return 1;
 8008254:	2301      	movs	r3, #1
}
 8008256:	4618      	mov	r0, r3
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <_write>:

int _write(int file, char *ptr, int len)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b086      	sub	sp, #24
 8008262:	af00      	add	r7, sp, #0
 8008264:	60f8      	str	r0, [r7, #12]
 8008266:	60b9      	str	r1, [r7, #8]
 8008268:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800826a:	2300      	movs	r3, #0
 800826c:	617b      	str	r3, [r7, #20]
 800826e:	e009      	b.n	8008284 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	1c5a      	adds	r2, r3, #1
 8008274:	60ba      	str	r2, [r7, #8]
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	4618      	mov	r0, r3
 800827a:	f7ff ff61 	bl	8008140 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	3301      	adds	r3, #1
 8008282:	617b      	str	r3, [r7, #20]
 8008284:	697a      	ldr	r2, [r7, #20]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	429a      	cmp	r2, r3
 800828a:	dbf1      	blt.n	8008270 <_write+0x12>
	}
	return len;
 800828c:	687b      	ldr	r3, [r7, #4]
}
 800828e:	4618      	mov	r0, r3
 8008290:	3718      	adds	r7, #24
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
	...

08008298 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80082a0:	4b11      	ldr	r3, [pc, #68]	; (80082e8 <_sbrk+0x50>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d102      	bne.n	80082ae <_sbrk+0x16>
		heap_end = &end;
 80082a8:	4b0f      	ldr	r3, [pc, #60]	; (80082e8 <_sbrk+0x50>)
 80082aa:	4a10      	ldr	r2, [pc, #64]	; (80082ec <_sbrk+0x54>)
 80082ac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80082ae:	4b0e      	ldr	r3, [pc, #56]	; (80082e8 <_sbrk+0x50>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80082b4:	4b0c      	ldr	r3, [pc, #48]	; (80082e8 <_sbrk+0x50>)
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4413      	add	r3, r2
 80082bc:	466a      	mov	r2, sp
 80082be:	4293      	cmp	r3, r2
 80082c0:	d907      	bls.n	80082d2 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80082c2:	f000 f871 	bl	80083a8 <__errno>
 80082c6:	4603      	mov	r3, r0
 80082c8:	220c      	movs	r2, #12
 80082ca:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80082cc:	f04f 33ff 	mov.w	r3, #4294967295
 80082d0:	e006      	b.n	80082e0 <_sbrk+0x48>
	}

	heap_end += incr;
 80082d2:	4b05      	ldr	r3, [pc, #20]	; (80082e8 <_sbrk+0x50>)
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4413      	add	r3, r2
 80082da:	4a03      	ldr	r2, [pc, #12]	; (80082e8 <_sbrk+0x50>)
 80082dc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80082de:	68fb      	ldr	r3, [r7, #12]
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3710      	adds	r7, #16
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	20000b6c 	.word	0x20000b6c
 80082ec:	20000b80 	.word	0x20000b80

080082f0 <_close>:

int _close(int file)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
	return -1;
 80082f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	bc80      	pop	{r7}
 8008304:	4770      	bx	lr

08008306 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008306:	b480      	push	{r7}
 8008308:	b083      	sub	sp, #12
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
 800830e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008316:	605a      	str	r2, [r3, #4]
	return 0;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	bc80      	pop	{r7}
 8008322:	4770      	bx	lr

08008324 <_isatty>:

int _isatty(int file)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
	return 1;
 800832c:	2301      	movs	r3, #1
}
 800832e:	4618      	mov	r0, r3
 8008330:	370c      	adds	r7, #12
 8008332:	46bd      	mov	sp, r7
 8008334:	bc80      	pop	{r7}
 8008336:	4770      	bx	lr

08008338 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008338:	b480      	push	{r7}
 800833a:	b085      	sub	sp, #20
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	607a      	str	r2, [r7, #4]
	return 0;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	3714      	adds	r7, #20
 800834a:	46bd      	mov	sp, r7
 800834c:	bc80      	pop	{r7}
 800834e:	4770      	bx	lr

08008350 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8008350:	b480      	push	{r7}
 8008352:	af00      	add	r7, sp, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8008354:	4b12      	ldr	r3, [pc, #72]	; (80083a0 <SystemInit+0x50>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a11      	ldr	r2, [pc, #68]	; (80083a0 <SystemInit+0x50>)
 800835a:	f043 0301 	orr.w	r3, r3, #1
 800835e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008360:	4b0f      	ldr	r3, [pc, #60]	; (80083a0 <SystemInit+0x50>)
 8008362:	2200      	movs	r2, #0
 8008364:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8008366:	4b0e      	ldr	r3, [pc, #56]	; (80083a0 <SystemInit+0x50>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a0d      	ldr	r2, [pc, #52]	; (80083a0 <SystemInit+0x50>)
 800836c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8008370:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8008374:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8008376:	4b0a      	ldr	r3, [pc, #40]	; (80083a0 <SystemInit+0x50>)
 8008378:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800837c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800837e:	4b08      	ldr	r3, [pc, #32]	; (80083a0 <SystemInit+0x50>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a07      	ldr	r2, [pc, #28]	; (80083a0 <SystemInit+0x50>)
 8008384:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008388:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800838a:	4b05      	ldr	r3, [pc, #20]	; (80083a0 <SystemInit+0x50>)
 800838c:	2200      	movs	r2, #0
 800838e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008390:	4b04      	ldr	r3, [pc, #16]	; (80083a4 <SystemInit+0x54>)
 8008392:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008396:	609a      	str	r2, [r3, #8]
#endif
}
 8008398:	bf00      	nop
 800839a:	46bd      	mov	sp, r7
 800839c:	bc80      	pop	{r7}
 800839e:	4770      	bx	lr
 80083a0:	40021000 	.word	0x40021000
 80083a4:	e000ed00 	.word	0xe000ed00

080083a8 <__errno>:
 80083a8:	4b01      	ldr	r3, [pc, #4]	; (80083b0 <__errno+0x8>)
 80083aa:	6818      	ldr	r0, [r3, #0]
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	20000048 	.word	0x20000048

080083b4 <__libc_init_array>:
 80083b4:	b570      	push	{r4, r5, r6, lr}
 80083b6:	4d0d      	ldr	r5, [pc, #52]	; (80083ec <__libc_init_array+0x38>)
 80083b8:	4c0d      	ldr	r4, [pc, #52]	; (80083f0 <__libc_init_array+0x3c>)
 80083ba:	1b64      	subs	r4, r4, r5
 80083bc:	10a4      	asrs	r4, r4, #2
 80083be:	2600      	movs	r6, #0
 80083c0:	42a6      	cmp	r6, r4
 80083c2:	d109      	bne.n	80083d8 <__libc_init_array+0x24>
 80083c4:	4d0b      	ldr	r5, [pc, #44]	; (80083f4 <__libc_init_array+0x40>)
 80083c6:	4c0c      	ldr	r4, [pc, #48]	; (80083f8 <__libc_init_array+0x44>)
 80083c8:	f001 fb66 	bl	8009a98 <_init>
 80083cc:	1b64      	subs	r4, r4, r5
 80083ce:	10a4      	asrs	r4, r4, #2
 80083d0:	2600      	movs	r6, #0
 80083d2:	42a6      	cmp	r6, r4
 80083d4:	d105      	bne.n	80083e2 <__libc_init_array+0x2e>
 80083d6:	bd70      	pop	{r4, r5, r6, pc}
 80083d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80083dc:	4798      	blx	r3
 80083de:	3601      	adds	r6, #1
 80083e0:	e7ee      	b.n	80083c0 <__libc_init_array+0xc>
 80083e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80083e6:	4798      	blx	r3
 80083e8:	3601      	adds	r6, #1
 80083ea:	e7f2      	b.n	80083d2 <__libc_init_array+0x1e>
 80083ec:	0800a510 	.word	0x0800a510
 80083f0:	0800a510 	.word	0x0800a510
 80083f4:	0800a510 	.word	0x0800a510
 80083f8:	0800a514 	.word	0x0800a514

080083fc <memcpy>:
 80083fc:	440a      	add	r2, r1
 80083fe:	4291      	cmp	r1, r2
 8008400:	f100 33ff 	add.w	r3, r0, #4294967295
 8008404:	d100      	bne.n	8008408 <memcpy+0xc>
 8008406:	4770      	bx	lr
 8008408:	b510      	push	{r4, lr}
 800840a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800840e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008412:	4291      	cmp	r1, r2
 8008414:	d1f9      	bne.n	800840a <memcpy+0xe>
 8008416:	bd10      	pop	{r4, pc}

08008418 <memset>:
 8008418:	4402      	add	r2, r0
 800841a:	4603      	mov	r3, r0
 800841c:	4293      	cmp	r3, r2
 800841e:	d100      	bne.n	8008422 <memset+0xa>
 8008420:	4770      	bx	lr
 8008422:	f803 1b01 	strb.w	r1, [r3], #1
 8008426:	e7f9      	b.n	800841c <memset+0x4>

08008428 <iprintf>:
 8008428:	b40f      	push	{r0, r1, r2, r3}
 800842a:	4b0a      	ldr	r3, [pc, #40]	; (8008454 <iprintf+0x2c>)
 800842c:	b513      	push	{r0, r1, r4, lr}
 800842e:	681c      	ldr	r4, [r3, #0]
 8008430:	b124      	cbz	r4, 800843c <iprintf+0x14>
 8008432:	69a3      	ldr	r3, [r4, #24]
 8008434:	b913      	cbnz	r3, 800843c <iprintf+0x14>
 8008436:	4620      	mov	r0, r4
 8008438:	f000 fb52 	bl	8008ae0 <__sinit>
 800843c:	ab05      	add	r3, sp, #20
 800843e:	9a04      	ldr	r2, [sp, #16]
 8008440:	68a1      	ldr	r1, [r4, #8]
 8008442:	9301      	str	r3, [sp, #4]
 8008444:	4620      	mov	r0, r4
 8008446:	f000 fecd 	bl	80091e4 <_vfiprintf_r>
 800844a:	b002      	add	sp, #8
 800844c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008450:	b004      	add	sp, #16
 8008452:	4770      	bx	lr
 8008454:	20000048 	.word	0x20000048

08008458 <_puts_r>:
 8008458:	b570      	push	{r4, r5, r6, lr}
 800845a:	460e      	mov	r6, r1
 800845c:	4605      	mov	r5, r0
 800845e:	b118      	cbz	r0, 8008468 <_puts_r+0x10>
 8008460:	6983      	ldr	r3, [r0, #24]
 8008462:	b90b      	cbnz	r3, 8008468 <_puts_r+0x10>
 8008464:	f000 fb3c 	bl	8008ae0 <__sinit>
 8008468:	69ab      	ldr	r3, [r5, #24]
 800846a:	68ac      	ldr	r4, [r5, #8]
 800846c:	b913      	cbnz	r3, 8008474 <_puts_r+0x1c>
 800846e:	4628      	mov	r0, r5
 8008470:	f000 fb36 	bl	8008ae0 <__sinit>
 8008474:	4b2c      	ldr	r3, [pc, #176]	; (8008528 <_puts_r+0xd0>)
 8008476:	429c      	cmp	r4, r3
 8008478:	d120      	bne.n	80084bc <_puts_r+0x64>
 800847a:	686c      	ldr	r4, [r5, #4]
 800847c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800847e:	07db      	lsls	r3, r3, #31
 8008480:	d405      	bmi.n	800848e <_puts_r+0x36>
 8008482:	89a3      	ldrh	r3, [r4, #12]
 8008484:	0598      	lsls	r0, r3, #22
 8008486:	d402      	bmi.n	800848e <_puts_r+0x36>
 8008488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800848a:	f000 fbd9 	bl	8008c40 <__retarget_lock_acquire_recursive>
 800848e:	89a3      	ldrh	r3, [r4, #12]
 8008490:	0719      	lsls	r1, r3, #28
 8008492:	d51d      	bpl.n	80084d0 <_puts_r+0x78>
 8008494:	6923      	ldr	r3, [r4, #16]
 8008496:	b1db      	cbz	r3, 80084d0 <_puts_r+0x78>
 8008498:	3e01      	subs	r6, #1
 800849a:	68a3      	ldr	r3, [r4, #8]
 800849c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80084a0:	3b01      	subs	r3, #1
 80084a2:	60a3      	str	r3, [r4, #8]
 80084a4:	bb39      	cbnz	r1, 80084f6 <_puts_r+0x9e>
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	da38      	bge.n	800851c <_puts_r+0xc4>
 80084aa:	4622      	mov	r2, r4
 80084ac:	210a      	movs	r1, #10
 80084ae:	4628      	mov	r0, r5
 80084b0:	f000 f922 	bl	80086f8 <__swbuf_r>
 80084b4:	3001      	adds	r0, #1
 80084b6:	d011      	beq.n	80084dc <_puts_r+0x84>
 80084b8:	250a      	movs	r5, #10
 80084ba:	e011      	b.n	80084e0 <_puts_r+0x88>
 80084bc:	4b1b      	ldr	r3, [pc, #108]	; (800852c <_puts_r+0xd4>)
 80084be:	429c      	cmp	r4, r3
 80084c0:	d101      	bne.n	80084c6 <_puts_r+0x6e>
 80084c2:	68ac      	ldr	r4, [r5, #8]
 80084c4:	e7da      	b.n	800847c <_puts_r+0x24>
 80084c6:	4b1a      	ldr	r3, [pc, #104]	; (8008530 <_puts_r+0xd8>)
 80084c8:	429c      	cmp	r4, r3
 80084ca:	bf08      	it	eq
 80084cc:	68ec      	ldreq	r4, [r5, #12]
 80084ce:	e7d5      	b.n	800847c <_puts_r+0x24>
 80084d0:	4621      	mov	r1, r4
 80084d2:	4628      	mov	r0, r5
 80084d4:	f000 f962 	bl	800879c <__swsetup_r>
 80084d8:	2800      	cmp	r0, #0
 80084da:	d0dd      	beq.n	8008498 <_puts_r+0x40>
 80084dc:	f04f 35ff 	mov.w	r5, #4294967295
 80084e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084e2:	07da      	lsls	r2, r3, #31
 80084e4:	d405      	bmi.n	80084f2 <_puts_r+0x9a>
 80084e6:	89a3      	ldrh	r3, [r4, #12]
 80084e8:	059b      	lsls	r3, r3, #22
 80084ea:	d402      	bmi.n	80084f2 <_puts_r+0x9a>
 80084ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084ee:	f000 fba8 	bl	8008c42 <__retarget_lock_release_recursive>
 80084f2:	4628      	mov	r0, r5
 80084f4:	bd70      	pop	{r4, r5, r6, pc}
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	da04      	bge.n	8008504 <_puts_r+0xac>
 80084fa:	69a2      	ldr	r2, [r4, #24]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	dc06      	bgt.n	800850e <_puts_r+0xb6>
 8008500:	290a      	cmp	r1, #10
 8008502:	d004      	beq.n	800850e <_puts_r+0xb6>
 8008504:	6823      	ldr	r3, [r4, #0]
 8008506:	1c5a      	adds	r2, r3, #1
 8008508:	6022      	str	r2, [r4, #0]
 800850a:	7019      	strb	r1, [r3, #0]
 800850c:	e7c5      	b.n	800849a <_puts_r+0x42>
 800850e:	4622      	mov	r2, r4
 8008510:	4628      	mov	r0, r5
 8008512:	f000 f8f1 	bl	80086f8 <__swbuf_r>
 8008516:	3001      	adds	r0, #1
 8008518:	d1bf      	bne.n	800849a <_puts_r+0x42>
 800851a:	e7df      	b.n	80084dc <_puts_r+0x84>
 800851c:	6823      	ldr	r3, [r4, #0]
 800851e:	250a      	movs	r5, #10
 8008520:	1c5a      	adds	r2, r3, #1
 8008522:	6022      	str	r2, [r4, #0]
 8008524:	701d      	strb	r5, [r3, #0]
 8008526:	e7db      	b.n	80084e0 <_puts_r+0x88>
 8008528:	0800a494 	.word	0x0800a494
 800852c:	0800a4b4 	.word	0x0800a4b4
 8008530:	0800a474 	.word	0x0800a474

08008534 <puts>:
 8008534:	4b02      	ldr	r3, [pc, #8]	; (8008540 <puts+0xc>)
 8008536:	4601      	mov	r1, r0
 8008538:	6818      	ldr	r0, [r3, #0]
 800853a:	f7ff bf8d 	b.w	8008458 <_puts_r>
 800853e:	bf00      	nop
 8008540:	20000048 	.word	0x20000048

08008544 <sniprintf>:
 8008544:	b40c      	push	{r2, r3}
 8008546:	b530      	push	{r4, r5, lr}
 8008548:	4b17      	ldr	r3, [pc, #92]	; (80085a8 <sniprintf+0x64>)
 800854a:	1e0c      	subs	r4, r1, #0
 800854c:	681d      	ldr	r5, [r3, #0]
 800854e:	b09d      	sub	sp, #116	; 0x74
 8008550:	da08      	bge.n	8008564 <sniprintf+0x20>
 8008552:	238b      	movs	r3, #139	; 0x8b
 8008554:	602b      	str	r3, [r5, #0]
 8008556:	f04f 30ff 	mov.w	r0, #4294967295
 800855a:	b01d      	add	sp, #116	; 0x74
 800855c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008560:	b002      	add	sp, #8
 8008562:	4770      	bx	lr
 8008564:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008568:	f8ad 3014 	strh.w	r3, [sp, #20]
 800856c:	bf14      	ite	ne
 800856e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008572:	4623      	moveq	r3, r4
 8008574:	9304      	str	r3, [sp, #16]
 8008576:	9307      	str	r3, [sp, #28]
 8008578:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800857c:	9002      	str	r0, [sp, #8]
 800857e:	9006      	str	r0, [sp, #24]
 8008580:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008584:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008586:	ab21      	add	r3, sp, #132	; 0x84
 8008588:	a902      	add	r1, sp, #8
 800858a:	4628      	mov	r0, r5
 800858c:	9301      	str	r3, [sp, #4]
 800858e:	f000 fd01 	bl	8008f94 <_svfiprintf_r>
 8008592:	1c43      	adds	r3, r0, #1
 8008594:	bfbc      	itt	lt
 8008596:	238b      	movlt	r3, #139	; 0x8b
 8008598:	602b      	strlt	r3, [r5, #0]
 800859a:	2c00      	cmp	r4, #0
 800859c:	d0dd      	beq.n	800855a <sniprintf+0x16>
 800859e:	9b02      	ldr	r3, [sp, #8]
 80085a0:	2200      	movs	r2, #0
 80085a2:	701a      	strb	r2, [r3, #0]
 80085a4:	e7d9      	b.n	800855a <sniprintf+0x16>
 80085a6:	bf00      	nop
 80085a8:	20000048 	.word	0x20000048

080085ac <siprintf>:
 80085ac:	b40e      	push	{r1, r2, r3}
 80085ae:	b500      	push	{lr}
 80085b0:	b09c      	sub	sp, #112	; 0x70
 80085b2:	ab1d      	add	r3, sp, #116	; 0x74
 80085b4:	9002      	str	r0, [sp, #8]
 80085b6:	9006      	str	r0, [sp, #24]
 80085b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80085bc:	4809      	ldr	r0, [pc, #36]	; (80085e4 <siprintf+0x38>)
 80085be:	9107      	str	r1, [sp, #28]
 80085c0:	9104      	str	r1, [sp, #16]
 80085c2:	4909      	ldr	r1, [pc, #36]	; (80085e8 <siprintf+0x3c>)
 80085c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80085c8:	9105      	str	r1, [sp, #20]
 80085ca:	6800      	ldr	r0, [r0, #0]
 80085cc:	9301      	str	r3, [sp, #4]
 80085ce:	a902      	add	r1, sp, #8
 80085d0:	f000 fce0 	bl	8008f94 <_svfiprintf_r>
 80085d4:	9b02      	ldr	r3, [sp, #8]
 80085d6:	2200      	movs	r2, #0
 80085d8:	701a      	strb	r2, [r3, #0]
 80085da:	b01c      	add	sp, #112	; 0x70
 80085dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80085e0:	b003      	add	sp, #12
 80085e2:	4770      	bx	lr
 80085e4:	20000048 	.word	0x20000048
 80085e8:	ffff0208 	.word	0xffff0208

080085ec <strncpy>:
 80085ec:	b510      	push	{r4, lr}
 80085ee:	3901      	subs	r1, #1
 80085f0:	4603      	mov	r3, r0
 80085f2:	b132      	cbz	r2, 8008602 <strncpy+0x16>
 80085f4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80085f8:	f803 4b01 	strb.w	r4, [r3], #1
 80085fc:	3a01      	subs	r2, #1
 80085fe:	2c00      	cmp	r4, #0
 8008600:	d1f7      	bne.n	80085f2 <strncpy+0x6>
 8008602:	441a      	add	r2, r3
 8008604:	2100      	movs	r1, #0
 8008606:	4293      	cmp	r3, r2
 8008608:	d100      	bne.n	800860c <strncpy+0x20>
 800860a:	bd10      	pop	{r4, pc}
 800860c:	f803 1b01 	strb.w	r1, [r3], #1
 8008610:	e7f9      	b.n	8008606 <strncpy+0x1a>

08008612 <strstr>:
 8008612:	780a      	ldrb	r2, [r1, #0]
 8008614:	b570      	push	{r4, r5, r6, lr}
 8008616:	b96a      	cbnz	r2, 8008634 <strstr+0x22>
 8008618:	bd70      	pop	{r4, r5, r6, pc}
 800861a:	429a      	cmp	r2, r3
 800861c:	d109      	bne.n	8008632 <strstr+0x20>
 800861e:	460c      	mov	r4, r1
 8008620:	4605      	mov	r5, r0
 8008622:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008626:	2b00      	cmp	r3, #0
 8008628:	d0f6      	beq.n	8008618 <strstr+0x6>
 800862a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800862e:	429e      	cmp	r6, r3
 8008630:	d0f7      	beq.n	8008622 <strstr+0x10>
 8008632:	3001      	adds	r0, #1
 8008634:	7803      	ldrb	r3, [r0, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d1ef      	bne.n	800861a <strstr+0x8>
 800863a:	4618      	mov	r0, r3
 800863c:	e7ec      	b.n	8008618 <strstr+0x6>
	...

08008640 <strtok>:
 8008640:	4b16      	ldr	r3, [pc, #88]	; (800869c <strtok+0x5c>)
 8008642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008646:	681f      	ldr	r7, [r3, #0]
 8008648:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800864a:	4605      	mov	r5, r0
 800864c:	460e      	mov	r6, r1
 800864e:	b9ec      	cbnz	r4, 800868c <strtok+0x4c>
 8008650:	2050      	movs	r0, #80	; 0x50
 8008652:	f000 fb5d 	bl	8008d10 <malloc>
 8008656:	4602      	mov	r2, r0
 8008658:	65b8      	str	r0, [r7, #88]	; 0x58
 800865a:	b920      	cbnz	r0, 8008666 <strtok+0x26>
 800865c:	4b10      	ldr	r3, [pc, #64]	; (80086a0 <strtok+0x60>)
 800865e:	4811      	ldr	r0, [pc, #68]	; (80086a4 <strtok+0x64>)
 8008660:	2157      	movs	r1, #87	; 0x57
 8008662:	f000 f909 	bl	8008878 <__assert_func>
 8008666:	e9c0 4400 	strd	r4, r4, [r0]
 800866a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800866e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008672:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008676:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800867a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800867e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008682:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008686:	6184      	str	r4, [r0, #24]
 8008688:	7704      	strb	r4, [r0, #28]
 800868a:	6244      	str	r4, [r0, #36]	; 0x24
 800868c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800868e:	4631      	mov	r1, r6
 8008690:	4628      	mov	r0, r5
 8008692:	2301      	movs	r3, #1
 8008694:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008698:	f000 b806 	b.w	80086a8 <__strtok_r>
 800869c:	20000048 	.word	0x20000048
 80086a0:	0800a3c4 	.word	0x0800a3c4
 80086a4:	0800a3db 	.word	0x0800a3db

080086a8 <__strtok_r>:
 80086a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086aa:	b908      	cbnz	r0, 80086b0 <__strtok_r+0x8>
 80086ac:	6810      	ldr	r0, [r2, #0]
 80086ae:	b188      	cbz	r0, 80086d4 <__strtok_r+0x2c>
 80086b0:	4604      	mov	r4, r0
 80086b2:	4620      	mov	r0, r4
 80086b4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80086b8:	460f      	mov	r7, r1
 80086ba:	f817 6b01 	ldrb.w	r6, [r7], #1
 80086be:	b91e      	cbnz	r6, 80086c8 <__strtok_r+0x20>
 80086c0:	b965      	cbnz	r5, 80086dc <__strtok_r+0x34>
 80086c2:	6015      	str	r5, [r2, #0]
 80086c4:	4628      	mov	r0, r5
 80086c6:	e005      	b.n	80086d4 <__strtok_r+0x2c>
 80086c8:	42b5      	cmp	r5, r6
 80086ca:	d1f6      	bne.n	80086ba <__strtok_r+0x12>
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d1f0      	bne.n	80086b2 <__strtok_r+0xa>
 80086d0:	6014      	str	r4, [r2, #0]
 80086d2:	7003      	strb	r3, [r0, #0]
 80086d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086d6:	461c      	mov	r4, r3
 80086d8:	e00c      	b.n	80086f4 <__strtok_r+0x4c>
 80086da:	b915      	cbnz	r5, 80086e2 <__strtok_r+0x3a>
 80086dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80086e0:	460e      	mov	r6, r1
 80086e2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80086e6:	42ab      	cmp	r3, r5
 80086e8:	d1f7      	bne.n	80086da <__strtok_r+0x32>
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d0f3      	beq.n	80086d6 <__strtok_r+0x2e>
 80086ee:	2300      	movs	r3, #0
 80086f0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80086f4:	6014      	str	r4, [r2, #0]
 80086f6:	e7ed      	b.n	80086d4 <__strtok_r+0x2c>

080086f8 <__swbuf_r>:
 80086f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086fa:	460e      	mov	r6, r1
 80086fc:	4614      	mov	r4, r2
 80086fe:	4605      	mov	r5, r0
 8008700:	b118      	cbz	r0, 800870a <__swbuf_r+0x12>
 8008702:	6983      	ldr	r3, [r0, #24]
 8008704:	b90b      	cbnz	r3, 800870a <__swbuf_r+0x12>
 8008706:	f000 f9eb 	bl	8008ae0 <__sinit>
 800870a:	4b21      	ldr	r3, [pc, #132]	; (8008790 <__swbuf_r+0x98>)
 800870c:	429c      	cmp	r4, r3
 800870e:	d12b      	bne.n	8008768 <__swbuf_r+0x70>
 8008710:	686c      	ldr	r4, [r5, #4]
 8008712:	69a3      	ldr	r3, [r4, #24]
 8008714:	60a3      	str	r3, [r4, #8]
 8008716:	89a3      	ldrh	r3, [r4, #12]
 8008718:	071a      	lsls	r2, r3, #28
 800871a:	d52f      	bpl.n	800877c <__swbuf_r+0x84>
 800871c:	6923      	ldr	r3, [r4, #16]
 800871e:	b36b      	cbz	r3, 800877c <__swbuf_r+0x84>
 8008720:	6923      	ldr	r3, [r4, #16]
 8008722:	6820      	ldr	r0, [r4, #0]
 8008724:	1ac0      	subs	r0, r0, r3
 8008726:	6963      	ldr	r3, [r4, #20]
 8008728:	b2f6      	uxtb	r6, r6
 800872a:	4283      	cmp	r3, r0
 800872c:	4637      	mov	r7, r6
 800872e:	dc04      	bgt.n	800873a <__swbuf_r+0x42>
 8008730:	4621      	mov	r1, r4
 8008732:	4628      	mov	r0, r5
 8008734:	f000 f940 	bl	80089b8 <_fflush_r>
 8008738:	bb30      	cbnz	r0, 8008788 <__swbuf_r+0x90>
 800873a:	68a3      	ldr	r3, [r4, #8]
 800873c:	3b01      	subs	r3, #1
 800873e:	60a3      	str	r3, [r4, #8]
 8008740:	6823      	ldr	r3, [r4, #0]
 8008742:	1c5a      	adds	r2, r3, #1
 8008744:	6022      	str	r2, [r4, #0]
 8008746:	701e      	strb	r6, [r3, #0]
 8008748:	6963      	ldr	r3, [r4, #20]
 800874a:	3001      	adds	r0, #1
 800874c:	4283      	cmp	r3, r0
 800874e:	d004      	beq.n	800875a <__swbuf_r+0x62>
 8008750:	89a3      	ldrh	r3, [r4, #12]
 8008752:	07db      	lsls	r3, r3, #31
 8008754:	d506      	bpl.n	8008764 <__swbuf_r+0x6c>
 8008756:	2e0a      	cmp	r6, #10
 8008758:	d104      	bne.n	8008764 <__swbuf_r+0x6c>
 800875a:	4621      	mov	r1, r4
 800875c:	4628      	mov	r0, r5
 800875e:	f000 f92b 	bl	80089b8 <_fflush_r>
 8008762:	b988      	cbnz	r0, 8008788 <__swbuf_r+0x90>
 8008764:	4638      	mov	r0, r7
 8008766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008768:	4b0a      	ldr	r3, [pc, #40]	; (8008794 <__swbuf_r+0x9c>)
 800876a:	429c      	cmp	r4, r3
 800876c:	d101      	bne.n	8008772 <__swbuf_r+0x7a>
 800876e:	68ac      	ldr	r4, [r5, #8]
 8008770:	e7cf      	b.n	8008712 <__swbuf_r+0x1a>
 8008772:	4b09      	ldr	r3, [pc, #36]	; (8008798 <__swbuf_r+0xa0>)
 8008774:	429c      	cmp	r4, r3
 8008776:	bf08      	it	eq
 8008778:	68ec      	ldreq	r4, [r5, #12]
 800877a:	e7ca      	b.n	8008712 <__swbuf_r+0x1a>
 800877c:	4621      	mov	r1, r4
 800877e:	4628      	mov	r0, r5
 8008780:	f000 f80c 	bl	800879c <__swsetup_r>
 8008784:	2800      	cmp	r0, #0
 8008786:	d0cb      	beq.n	8008720 <__swbuf_r+0x28>
 8008788:	f04f 37ff 	mov.w	r7, #4294967295
 800878c:	e7ea      	b.n	8008764 <__swbuf_r+0x6c>
 800878e:	bf00      	nop
 8008790:	0800a494 	.word	0x0800a494
 8008794:	0800a4b4 	.word	0x0800a4b4
 8008798:	0800a474 	.word	0x0800a474

0800879c <__swsetup_r>:
 800879c:	4b32      	ldr	r3, [pc, #200]	; (8008868 <__swsetup_r+0xcc>)
 800879e:	b570      	push	{r4, r5, r6, lr}
 80087a0:	681d      	ldr	r5, [r3, #0]
 80087a2:	4606      	mov	r6, r0
 80087a4:	460c      	mov	r4, r1
 80087a6:	b125      	cbz	r5, 80087b2 <__swsetup_r+0x16>
 80087a8:	69ab      	ldr	r3, [r5, #24]
 80087aa:	b913      	cbnz	r3, 80087b2 <__swsetup_r+0x16>
 80087ac:	4628      	mov	r0, r5
 80087ae:	f000 f997 	bl	8008ae0 <__sinit>
 80087b2:	4b2e      	ldr	r3, [pc, #184]	; (800886c <__swsetup_r+0xd0>)
 80087b4:	429c      	cmp	r4, r3
 80087b6:	d10f      	bne.n	80087d8 <__swsetup_r+0x3c>
 80087b8:	686c      	ldr	r4, [r5, #4]
 80087ba:	89a3      	ldrh	r3, [r4, #12]
 80087bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087c0:	0719      	lsls	r1, r3, #28
 80087c2:	d42c      	bmi.n	800881e <__swsetup_r+0x82>
 80087c4:	06dd      	lsls	r5, r3, #27
 80087c6:	d411      	bmi.n	80087ec <__swsetup_r+0x50>
 80087c8:	2309      	movs	r3, #9
 80087ca:	6033      	str	r3, [r6, #0]
 80087cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80087d0:	81a3      	strh	r3, [r4, #12]
 80087d2:	f04f 30ff 	mov.w	r0, #4294967295
 80087d6:	e03e      	b.n	8008856 <__swsetup_r+0xba>
 80087d8:	4b25      	ldr	r3, [pc, #148]	; (8008870 <__swsetup_r+0xd4>)
 80087da:	429c      	cmp	r4, r3
 80087dc:	d101      	bne.n	80087e2 <__swsetup_r+0x46>
 80087de:	68ac      	ldr	r4, [r5, #8]
 80087e0:	e7eb      	b.n	80087ba <__swsetup_r+0x1e>
 80087e2:	4b24      	ldr	r3, [pc, #144]	; (8008874 <__swsetup_r+0xd8>)
 80087e4:	429c      	cmp	r4, r3
 80087e6:	bf08      	it	eq
 80087e8:	68ec      	ldreq	r4, [r5, #12]
 80087ea:	e7e6      	b.n	80087ba <__swsetup_r+0x1e>
 80087ec:	0758      	lsls	r0, r3, #29
 80087ee:	d512      	bpl.n	8008816 <__swsetup_r+0x7a>
 80087f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087f2:	b141      	cbz	r1, 8008806 <__swsetup_r+0x6a>
 80087f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087f8:	4299      	cmp	r1, r3
 80087fa:	d002      	beq.n	8008802 <__swsetup_r+0x66>
 80087fc:	4630      	mov	r0, r6
 80087fe:	f000 fa8f 	bl	8008d20 <_free_r>
 8008802:	2300      	movs	r3, #0
 8008804:	6363      	str	r3, [r4, #52]	; 0x34
 8008806:	89a3      	ldrh	r3, [r4, #12]
 8008808:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800880c:	81a3      	strh	r3, [r4, #12]
 800880e:	2300      	movs	r3, #0
 8008810:	6063      	str	r3, [r4, #4]
 8008812:	6923      	ldr	r3, [r4, #16]
 8008814:	6023      	str	r3, [r4, #0]
 8008816:	89a3      	ldrh	r3, [r4, #12]
 8008818:	f043 0308 	orr.w	r3, r3, #8
 800881c:	81a3      	strh	r3, [r4, #12]
 800881e:	6923      	ldr	r3, [r4, #16]
 8008820:	b94b      	cbnz	r3, 8008836 <__swsetup_r+0x9a>
 8008822:	89a3      	ldrh	r3, [r4, #12]
 8008824:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800882c:	d003      	beq.n	8008836 <__swsetup_r+0x9a>
 800882e:	4621      	mov	r1, r4
 8008830:	4630      	mov	r0, r6
 8008832:	f000 fa2d 	bl	8008c90 <__smakebuf_r>
 8008836:	89a0      	ldrh	r0, [r4, #12]
 8008838:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800883c:	f010 0301 	ands.w	r3, r0, #1
 8008840:	d00a      	beq.n	8008858 <__swsetup_r+0xbc>
 8008842:	2300      	movs	r3, #0
 8008844:	60a3      	str	r3, [r4, #8]
 8008846:	6963      	ldr	r3, [r4, #20]
 8008848:	425b      	negs	r3, r3
 800884a:	61a3      	str	r3, [r4, #24]
 800884c:	6923      	ldr	r3, [r4, #16]
 800884e:	b943      	cbnz	r3, 8008862 <__swsetup_r+0xc6>
 8008850:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008854:	d1ba      	bne.n	80087cc <__swsetup_r+0x30>
 8008856:	bd70      	pop	{r4, r5, r6, pc}
 8008858:	0781      	lsls	r1, r0, #30
 800885a:	bf58      	it	pl
 800885c:	6963      	ldrpl	r3, [r4, #20]
 800885e:	60a3      	str	r3, [r4, #8]
 8008860:	e7f4      	b.n	800884c <__swsetup_r+0xb0>
 8008862:	2000      	movs	r0, #0
 8008864:	e7f7      	b.n	8008856 <__swsetup_r+0xba>
 8008866:	bf00      	nop
 8008868:	20000048 	.word	0x20000048
 800886c:	0800a494 	.word	0x0800a494
 8008870:	0800a4b4 	.word	0x0800a4b4
 8008874:	0800a474 	.word	0x0800a474

08008878 <__assert_func>:
 8008878:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800887a:	4614      	mov	r4, r2
 800887c:	461a      	mov	r2, r3
 800887e:	4b09      	ldr	r3, [pc, #36]	; (80088a4 <__assert_func+0x2c>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4605      	mov	r5, r0
 8008884:	68d8      	ldr	r0, [r3, #12]
 8008886:	b14c      	cbz	r4, 800889c <__assert_func+0x24>
 8008888:	4b07      	ldr	r3, [pc, #28]	; (80088a8 <__assert_func+0x30>)
 800888a:	9100      	str	r1, [sp, #0]
 800888c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008890:	4906      	ldr	r1, [pc, #24]	; (80088ac <__assert_func+0x34>)
 8008892:	462b      	mov	r3, r5
 8008894:	f000 f9a2 	bl	8008bdc <fiprintf>
 8008898:	f000 ffce 	bl	8009838 <abort>
 800889c:	4b04      	ldr	r3, [pc, #16]	; (80088b0 <__assert_func+0x38>)
 800889e:	461c      	mov	r4, r3
 80088a0:	e7f3      	b.n	800888a <__assert_func+0x12>
 80088a2:	bf00      	nop
 80088a4:	20000048 	.word	0x20000048
 80088a8:	0800a438 	.word	0x0800a438
 80088ac:	0800a445 	.word	0x0800a445
 80088b0:	0800a473 	.word	0x0800a473

080088b4 <__sflush_r>:
 80088b4:	898a      	ldrh	r2, [r1, #12]
 80088b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088b8:	4605      	mov	r5, r0
 80088ba:	0710      	lsls	r0, r2, #28
 80088bc:	460c      	mov	r4, r1
 80088be:	d457      	bmi.n	8008970 <__sflush_r+0xbc>
 80088c0:	684b      	ldr	r3, [r1, #4]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	dc04      	bgt.n	80088d0 <__sflush_r+0x1c>
 80088c6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	dc01      	bgt.n	80088d0 <__sflush_r+0x1c>
 80088cc:	2000      	movs	r0, #0
 80088ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088d2:	2e00      	cmp	r6, #0
 80088d4:	d0fa      	beq.n	80088cc <__sflush_r+0x18>
 80088d6:	2300      	movs	r3, #0
 80088d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80088dc:	682f      	ldr	r7, [r5, #0]
 80088de:	602b      	str	r3, [r5, #0]
 80088e0:	d032      	beq.n	8008948 <__sflush_r+0x94>
 80088e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80088e4:	89a3      	ldrh	r3, [r4, #12]
 80088e6:	075a      	lsls	r2, r3, #29
 80088e8:	d505      	bpl.n	80088f6 <__sflush_r+0x42>
 80088ea:	6863      	ldr	r3, [r4, #4]
 80088ec:	1ac0      	subs	r0, r0, r3
 80088ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088f0:	b10b      	cbz	r3, 80088f6 <__sflush_r+0x42>
 80088f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088f4:	1ac0      	subs	r0, r0, r3
 80088f6:	2300      	movs	r3, #0
 80088f8:	4602      	mov	r2, r0
 80088fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088fc:	6a21      	ldr	r1, [r4, #32]
 80088fe:	4628      	mov	r0, r5
 8008900:	47b0      	blx	r6
 8008902:	1c43      	adds	r3, r0, #1
 8008904:	89a3      	ldrh	r3, [r4, #12]
 8008906:	d106      	bne.n	8008916 <__sflush_r+0x62>
 8008908:	6829      	ldr	r1, [r5, #0]
 800890a:	291d      	cmp	r1, #29
 800890c:	d82c      	bhi.n	8008968 <__sflush_r+0xb4>
 800890e:	4a29      	ldr	r2, [pc, #164]	; (80089b4 <__sflush_r+0x100>)
 8008910:	40ca      	lsrs	r2, r1
 8008912:	07d6      	lsls	r6, r2, #31
 8008914:	d528      	bpl.n	8008968 <__sflush_r+0xb4>
 8008916:	2200      	movs	r2, #0
 8008918:	6062      	str	r2, [r4, #4]
 800891a:	04d9      	lsls	r1, r3, #19
 800891c:	6922      	ldr	r2, [r4, #16]
 800891e:	6022      	str	r2, [r4, #0]
 8008920:	d504      	bpl.n	800892c <__sflush_r+0x78>
 8008922:	1c42      	adds	r2, r0, #1
 8008924:	d101      	bne.n	800892a <__sflush_r+0x76>
 8008926:	682b      	ldr	r3, [r5, #0]
 8008928:	b903      	cbnz	r3, 800892c <__sflush_r+0x78>
 800892a:	6560      	str	r0, [r4, #84]	; 0x54
 800892c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800892e:	602f      	str	r7, [r5, #0]
 8008930:	2900      	cmp	r1, #0
 8008932:	d0cb      	beq.n	80088cc <__sflush_r+0x18>
 8008934:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008938:	4299      	cmp	r1, r3
 800893a:	d002      	beq.n	8008942 <__sflush_r+0x8e>
 800893c:	4628      	mov	r0, r5
 800893e:	f000 f9ef 	bl	8008d20 <_free_r>
 8008942:	2000      	movs	r0, #0
 8008944:	6360      	str	r0, [r4, #52]	; 0x34
 8008946:	e7c2      	b.n	80088ce <__sflush_r+0x1a>
 8008948:	6a21      	ldr	r1, [r4, #32]
 800894a:	2301      	movs	r3, #1
 800894c:	4628      	mov	r0, r5
 800894e:	47b0      	blx	r6
 8008950:	1c41      	adds	r1, r0, #1
 8008952:	d1c7      	bne.n	80088e4 <__sflush_r+0x30>
 8008954:	682b      	ldr	r3, [r5, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d0c4      	beq.n	80088e4 <__sflush_r+0x30>
 800895a:	2b1d      	cmp	r3, #29
 800895c:	d001      	beq.n	8008962 <__sflush_r+0xae>
 800895e:	2b16      	cmp	r3, #22
 8008960:	d101      	bne.n	8008966 <__sflush_r+0xb2>
 8008962:	602f      	str	r7, [r5, #0]
 8008964:	e7b2      	b.n	80088cc <__sflush_r+0x18>
 8008966:	89a3      	ldrh	r3, [r4, #12]
 8008968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800896c:	81a3      	strh	r3, [r4, #12]
 800896e:	e7ae      	b.n	80088ce <__sflush_r+0x1a>
 8008970:	690f      	ldr	r7, [r1, #16]
 8008972:	2f00      	cmp	r7, #0
 8008974:	d0aa      	beq.n	80088cc <__sflush_r+0x18>
 8008976:	0793      	lsls	r3, r2, #30
 8008978:	680e      	ldr	r6, [r1, #0]
 800897a:	bf08      	it	eq
 800897c:	694b      	ldreq	r3, [r1, #20]
 800897e:	600f      	str	r7, [r1, #0]
 8008980:	bf18      	it	ne
 8008982:	2300      	movne	r3, #0
 8008984:	1bf6      	subs	r6, r6, r7
 8008986:	608b      	str	r3, [r1, #8]
 8008988:	2e00      	cmp	r6, #0
 800898a:	dd9f      	ble.n	80088cc <__sflush_r+0x18>
 800898c:	6a21      	ldr	r1, [r4, #32]
 800898e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008992:	4633      	mov	r3, r6
 8008994:	463a      	mov	r2, r7
 8008996:	4628      	mov	r0, r5
 8008998:	47e0      	blx	ip
 800899a:	2800      	cmp	r0, #0
 800899c:	dc06      	bgt.n	80089ac <__sflush_r+0xf8>
 800899e:	89a3      	ldrh	r3, [r4, #12]
 80089a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089a4:	81a3      	strh	r3, [r4, #12]
 80089a6:	f04f 30ff 	mov.w	r0, #4294967295
 80089aa:	e790      	b.n	80088ce <__sflush_r+0x1a>
 80089ac:	4407      	add	r7, r0
 80089ae:	1a36      	subs	r6, r6, r0
 80089b0:	e7ea      	b.n	8008988 <__sflush_r+0xd4>
 80089b2:	bf00      	nop
 80089b4:	20400001 	.word	0x20400001

080089b8 <_fflush_r>:
 80089b8:	b538      	push	{r3, r4, r5, lr}
 80089ba:	690b      	ldr	r3, [r1, #16]
 80089bc:	4605      	mov	r5, r0
 80089be:	460c      	mov	r4, r1
 80089c0:	b913      	cbnz	r3, 80089c8 <_fflush_r+0x10>
 80089c2:	2500      	movs	r5, #0
 80089c4:	4628      	mov	r0, r5
 80089c6:	bd38      	pop	{r3, r4, r5, pc}
 80089c8:	b118      	cbz	r0, 80089d2 <_fflush_r+0x1a>
 80089ca:	6983      	ldr	r3, [r0, #24]
 80089cc:	b90b      	cbnz	r3, 80089d2 <_fflush_r+0x1a>
 80089ce:	f000 f887 	bl	8008ae0 <__sinit>
 80089d2:	4b14      	ldr	r3, [pc, #80]	; (8008a24 <_fflush_r+0x6c>)
 80089d4:	429c      	cmp	r4, r3
 80089d6:	d11b      	bne.n	8008a10 <_fflush_r+0x58>
 80089d8:	686c      	ldr	r4, [r5, #4]
 80089da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d0ef      	beq.n	80089c2 <_fflush_r+0xa>
 80089e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80089e4:	07d0      	lsls	r0, r2, #31
 80089e6:	d404      	bmi.n	80089f2 <_fflush_r+0x3a>
 80089e8:	0599      	lsls	r1, r3, #22
 80089ea:	d402      	bmi.n	80089f2 <_fflush_r+0x3a>
 80089ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089ee:	f000 f927 	bl	8008c40 <__retarget_lock_acquire_recursive>
 80089f2:	4628      	mov	r0, r5
 80089f4:	4621      	mov	r1, r4
 80089f6:	f7ff ff5d 	bl	80088b4 <__sflush_r>
 80089fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089fc:	07da      	lsls	r2, r3, #31
 80089fe:	4605      	mov	r5, r0
 8008a00:	d4e0      	bmi.n	80089c4 <_fflush_r+0xc>
 8008a02:	89a3      	ldrh	r3, [r4, #12]
 8008a04:	059b      	lsls	r3, r3, #22
 8008a06:	d4dd      	bmi.n	80089c4 <_fflush_r+0xc>
 8008a08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a0a:	f000 f91a 	bl	8008c42 <__retarget_lock_release_recursive>
 8008a0e:	e7d9      	b.n	80089c4 <_fflush_r+0xc>
 8008a10:	4b05      	ldr	r3, [pc, #20]	; (8008a28 <_fflush_r+0x70>)
 8008a12:	429c      	cmp	r4, r3
 8008a14:	d101      	bne.n	8008a1a <_fflush_r+0x62>
 8008a16:	68ac      	ldr	r4, [r5, #8]
 8008a18:	e7df      	b.n	80089da <_fflush_r+0x22>
 8008a1a:	4b04      	ldr	r3, [pc, #16]	; (8008a2c <_fflush_r+0x74>)
 8008a1c:	429c      	cmp	r4, r3
 8008a1e:	bf08      	it	eq
 8008a20:	68ec      	ldreq	r4, [r5, #12]
 8008a22:	e7da      	b.n	80089da <_fflush_r+0x22>
 8008a24:	0800a494 	.word	0x0800a494
 8008a28:	0800a4b4 	.word	0x0800a4b4
 8008a2c:	0800a474 	.word	0x0800a474

08008a30 <std>:
 8008a30:	2300      	movs	r3, #0
 8008a32:	b510      	push	{r4, lr}
 8008a34:	4604      	mov	r4, r0
 8008a36:	e9c0 3300 	strd	r3, r3, [r0]
 8008a3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a3e:	6083      	str	r3, [r0, #8]
 8008a40:	8181      	strh	r1, [r0, #12]
 8008a42:	6643      	str	r3, [r0, #100]	; 0x64
 8008a44:	81c2      	strh	r2, [r0, #14]
 8008a46:	6183      	str	r3, [r0, #24]
 8008a48:	4619      	mov	r1, r3
 8008a4a:	2208      	movs	r2, #8
 8008a4c:	305c      	adds	r0, #92	; 0x5c
 8008a4e:	f7ff fce3 	bl	8008418 <memset>
 8008a52:	4b05      	ldr	r3, [pc, #20]	; (8008a68 <std+0x38>)
 8008a54:	6263      	str	r3, [r4, #36]	; 0x24
 8008a56:	4b05      	ldr	r3, [pc, #20]	; (8008a6c <std+0x3c>)
 8008a58:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a5a:	4b05      	ldr	r3, [pc, #20]	; (8008a70 <std+0x40>)
 8008a5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a5e:	4b05      	ldr	r3, [pc, #20]	; (8008a74 <std+0x44>)
 8008a60:	6224      	str	r4, [r4, #32]
 8008a62:	6323      	str	r3, [r4, #48]	; 0x30
 8008a64:	bd10      	pop	{r4, pc}
 8008a66:	bf00      	nop
 8008a68:	0800978d 	.word	0x0800978d
 8008a6c:	080097af 	.word	0x080097af
 8008a70:	080097e7 	.word	0x080097e7
 8008a74:	0800980b 	.word	0x0800980b

08008a78 <_cleanup_r>:
 8008a78:	4901      	ldr	r1, [pc, #4]	; (8008a80 <_cleanup_r+0x8>)
 8008a7a:	f000 b8c1 	b.w	8008c00 <_fwalk_reent>
 8008a7e:	bf00      	nop
 8008a80:	080089b9 	.word	0x080089b9

08008a84 <__sfmoreglue>:
 8008a84:	b570      	push	{r4, r5, r6, lr}
 8008a86:	2268      	movs	r2, #104	; 0x68
 8008a88:	1e4d      	subs	r5, r1, #1
 8008a8a:	4355      	muls	r5, r2
 8008a8c:	460e      	mov	r6, r1
 8008a8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008a92:	f000 f9af 	bl	8008df4 <_malloc_r>
 8008a96:	4604      	mov	r4, r0
 8008a98:	b140      	cbz	r0, 8008aac <__sfmoreglue+0x28>
 8008a9a:	2100      	movs	r1, #0
 8008a9c:	e9c0 1600 	strd	r1, r6, [r0]
 8008aa0:	300c      	adds	r0, #12
 8008aa2:	60a0      	str	r0, [r4, #8]
 8008aa4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008aa8:	f7ff fcb6 	bl	8008418 <memset>
 8008aac:	4620      	mov	r0, r4
 8008aae:	bd70      	pop	{r4, r5, r6, pc}

08008ab0 <__sfp_lock_acquire>:
 8008ab0:	4801      	ldr	r0, [pc, #4]	; (8008ab8 <__sfp_lock_acquire+0x8>)
 8008ab2:	f000 b8c5 	b.w	8008c40 <__retarget_lock_acquire_recursive>
 8008ab6:	bf00      	nop
 8008ab8:	20000b71 	.word	0x20000b71

08008abc <__sfp_lock_release>:
 8008abc:	4801      	ldr	r0, [pc, #4]	; (8008ac4 <__sfp_lock_release+0x8>)
 8008abe:	f000 b8c0 	b.w	8008c42 <__retarget_lock_release_recursive>
 8008ac2:	bf00      	nop
 8008ac4:	20000b71 	.word	0x20000b71

08008ac8 <__sinit_lock_acquire>:
 8008ac8:	4801      	ldr	r0, [pc, #4]	; (8008ad0 <__sinit_lock_acquire+0x8>)
 8008aca:	f000 b8b9 	b.w	8008c40 <__retarget_lock_acquire_recursive>
 8008ace:	bf00      	nop
 8008ad0:	20000b72 	.word	0x20000b72

08008ad4 <__sinit_lock_release>:
 8008ad4:	4801      	ldr	r0, [pc, #4]	; (8008adc <__sinit_lock_release+0x8>)
 8008ad6:	f000 b8b4 	b.w	8008c42 <__retarget_lock_release_recursive>
 8008ada:	bf00      	nop
 8008adc:	20000b72 	.word	0x20000b72

08008ae0 <__sinit>:
 8008ae0:	b510      	push	{r4, lr}
 8008ae2:	4604      	mov	r4, r0
 8008ae4:	f7ff fff0 	bl	8008ac8 <__sinit_lock_acquire>
 8008ae8:	69a3      	ldr	r3, [r4, #24]
 8008aea:	b11b      	cbz	r3, 8008af4 <__sinit+0x14>
 8008aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008af0:	f7ff bff0 	b.w	8008ad4 <__sinit_lock_release>
 8008af4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008af8:	6523      	str	r3, [r4, #80]	; 0x50
 8008afa:	4b13      	ldr	r3, [pc, #76]	; (8008b48 <__sinit+0x68>)
 8008afc:	4a13      	ldr	r2, [pc, #76]	; (8008b4c <__sinit+0x6c>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	62a2      	str	r2, [r4, #40]	; 0x28
 8008b02:	42a3      	cmp	r3, r4
 8008b04:	bf04      	itt	eq
 8008b06:	2301      	moveq	r3, #1
 8008b08:	61a3      	streq	r3, [r4, #24]
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	f000 f820 	bl	8008b50 <__sfp>
 8008b10:	6060      	str	r0, [r4, #4]
 8008b12:	4620      	mov	r0, r4
 8008b14:	f000 f81c 	bl	8008b50 <__sfp>
 8008b18:	60a0      	str	r0, [r4, #8]
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	f000 f818 	bl	8008b50 <__sfp>
 8008b20:	2200      	movs	r2, #0
 8008b22:	60e0      	str	r0, [r4, #12]
 8008b24:	2104      	movs	r1, #4
 8008b26:	6860      	ldr	r0, [r4, #4]
 8008b28:	f7ff ff82 	bl	8008a30 <std>
 8008b2c:	68a0      	ldr	r0, [r4, #8]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	2109      	movs	r1, #9
 8008b32:	f7ff ff7d 	bl	8008a30 <std>
 8008b36:	68e0      	ldr	r0, [r4, #12]
 8008b38:	2202      	movs	r2, #2
 8008b3a:	2112      	movs	r1, #18
 8008b3c:	f7ff ff78 	bl	8008a30 <std>
 8008b40:	2301      	movs	r3, #1
 8008b42:	61a3      	str	r3, [r4, #24]
 8008b44:	e7d2      	b.n	8008aec <__sinit+0xc>
 8008b46:	bf00      	nop
 8008b48:	0800a3c0 	.word	0x0800a3c0
 8008b4c:	08008a79 	.word	0x08008a79

08008b50 <__sfp>:
 8008b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b52:	4607      	mov	r7, r0
 8008b54:	f7ff ffac 	bl	8008ab0 <__sfp_lock_acquire>
 8008b58:	4b1e      	ldr	r3, [pc, #120]	; (8008bd4 <__sfp+0x84>)
 8008b5a:	681e      	ldr	r6, [r3, #0]
 8008b5c:	69b3      	ldr	r3, [r6, #24]
 8008b5e:	b913      	cbnz	r3, 8008b66 <__sfp+0x16>
 8008b60:	4630      	mov	r0, r6
 8008b62:	f7ff ffbd 	bl	8008ae0 <__sinit>
 8008b66:	3648      	adds	r6, #72	; 0x48
 8008b68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	d503      	bpl.n	8008b78 <__sfp+0x28>
 8008b70:	6833      	ldr	r3, [r6, #0]
 8008b72:	b30b      	cbz	r3, 8008bb8 <__sfp+0x68>
 8008b74:	6836      	ldr	r6, [r6, #0]
 8008b76:	e7f7      	b.n	8008b68 <__sfp+0x18>
 8008b78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008b7c:	b9d5      	cbnz	r5, 8008bb4 <__sfp+0x64>
 8008b7e:	4b16      	ldr	r3, [pc, #88]	; (8008bd8 <__sfp+0x88>)
 8008b80:	60e3      	str	r3, [r4, #12]
 8008b82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b86:	6665      	str	r5, [r4, #100]	; 0x64
 8008b88:	f000 f859 	bl	8008c3e <__retarget_lock_init_recursive>
 8008b8c:	f7ff ff96 	bl	8008abc <__sfp_lock_release>
 8008b90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008b94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008b98:	6025      	str	r5, [r4, #0]
 8008b9a:	61a5      	str	r5, [r4, #24]
 8008b9c:	2208      	movs	r2, #8
 8008b9e:	4629      	mov	r1, r5
 8008ba0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008ba4:	f7ff fc38 	bl	8008418 <memset>
 8008ba8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008bac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bb4:	3468      	adds	r4, #104	; 0x68
 8008bb6:	e7d9      	b.n	8008b6c <__sfp+0x1c>
 8008bb8:	2104      	movs	r1, #4
 8008bba:	4638      	mov	r0, r7
 8008bbc:	f7ff ff62 	bl	8008a84 <__sfmoreglue>
 8008bc0:	4604      	mov	r4, r0
 8008bc2:	6030      	str	r0, [r6, #0]
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	d1d5      	bne.n	8008b74 <__sfp+0x24>
 8008bc8:	f7ff ff78 	bl	8008abc <__sfp_lock_release>
 8008bcc:	230c      	movs	r3, #12
 8008bce:	603b      	str	r3, [r7, #0]
 8008bd0:	e7ee      	b.n	8008bb0 <__sfp+0x60>
 8008bd2:	bf00      	nop
 8008bd4:	0800a3c0 	.word	0x0800a3c0
 8008bd8:	ffff0001 	.word	0xffff0001

08008bdc <fiprintf>:
 8008bdc:	b40e      	push	{r1, r2, r3}
 8008bde:	b503      	push	{r0, r1, lr}
 8008be0:	4601      	mov	r1, r0
 8008be2:	ab03      	add	r3, sp, #12
 8008be4:	4805      	ldr	r0, [pc, #20]	; (8008bfc <fiprintf+0x20>)
 8008be6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bea:	6800      	ldr	r0, [r0, #0]
 8008bec:	9301      	str	r3, [sp, #4]
 8008bee:	f000 faf9 	bl	80091e4 <_vfiprintf_r>
 8008bf2:	b002      	add	sp, #8
 8008bf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bf8:	b003      	add	sp, #12
 8008bfa:	4770      	bx	lr
 8008bfc:	20000048 	.word	0x20000048

08008c00 <_fwalk_reent>:
 8008c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c04:	4606      	mov	r6, r0
 8008c06:	4688      	mov	r8, r1
 8008c08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008c0c:	2700      	movs	r7, #0
 8008c0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c12:	f1b9 0901 	subs.w	r9, r9, #1
 8008c16:	d505      	bpl.n	8008c24 <_fwalk_reent+0x24>
 8008c18:	6824      	ldr	r4, [r4, #0]
 8008c1a:	2c00      	cmp	r4, #0
 8008c1c:	d1f7      	bne.n	8008c0e <_fwalk_reent+0xe>
 8008c1e:	4638      	mov	r0, r7
 8008c20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c24:	89ab      	ldrh	r3, [r5, #12]
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d907      	bls.n	8008c3a <_fwalk_reent+0x3a>
 8008c2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c2e:	3301      	adds	r3, #1
 8008c30:	d003      	beq.n	8008c3a <_fwalk_reent+0x3a>
 8008c32:	4629      	mov	r1, r5
 8008c34:	4630      	mov	r0, r6
 8008c36:	47c0      	blx	r8
 8008c38:	4307      	orrs	r7, r0
 8008c3a:	3568      	adds	r5, #104	; 0x68
 8008c3c:	e7e9      	b.n	8008c12 <_fwalk_reent+0x12>

08008c3e <__retarget_lock_init_recursive>:
 8008c3e:	4770      	bx	lr

08008c40 <__retarget_lock_acquire_recursive>:
 8008c40:	4770      	bx	lr

08008c42 <__retarget_lock_release_recursive>:
 8008c42:	4770      	bx	lr

08008c44 <__swhatbuf_r>:
 8008c44:	b570      	push	{r4, r5, r6, lr}
 8008c46:	460e      	mov	r6, r1
 8008c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c4c:	2900      	cmp	r1, #0
 8008c4e:	b096      	sub	sp, #88	; 0x58
 8008c50:	4614      	mov	r4, r2
 8008c52:	461d      	mov	r5, r3
 8008c54:	da08      	bge.n	8008c68 <__swhatbuf_r+0x24>
 8008c56:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	602a      	str	r2, [r5, #0]
 8008c5e:	061a      	lsls	r2, r3, #24
 8008c60:	d410      	bmi.n	8008c84 <__swhatbuf_r+0x40>
 8008c62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c66:	e00e      	b.n	8008c86 <__swhatbuf_r+0x42>
 8008c68:	466a      	mov	r2, sp
 8008c6a:	f000 fdfd 	bl	8009868 <_fstat_r>
 8008c6e:	2800      	cmp	r0, #0
 8008c70:	dbf1      	blt.n	8008c56 <__swhatbuf_r+0x12>
 8008c72:	9a01      	ldr	r2, [sp, #4]
 8008c74:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c78:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c7c:	425a      	negs	r2, r3
 8008c7e:	415a      	adcs	r2, r3
 8008c80:	602a      	str	r2, [r5, #0]
 8008c82:	e7ee      	b.n	8008c62 <__swhatbuf_r+0x1e>
 8008c84:	2340      	movs	r3, #64	; 0x40
 8008c86:	2000      	movs	r0, #0
 8008c88:	6023      	str	r3, [r4, #0]
 8008c8a:	b016      	add	sp, #88	; 0x58
 8008c8c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008c90 <__smakebuf_r>:
 8008c90:	898b      	ldrh	r3, [r1, #12]
 8008c92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c94:	079d      	lsls	r5, r3, #30
 8008c96:	4606      	mov	r6, r0
 8008c98:	460c      	mov	r4, r1
 8008c9a:	d507      	bpl.n	8008cac <__smakebuf_r+0x1c>
 8008c9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ca0:	6023      	str	r3, [r4, #0]
 8008ca2:	6123      	str	r3, [r4, #16]
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	6163      	str	r3, [r4, #20]
 8008ca8:	b002      	add	sp, #8
 8008caa:	bd70      	pop	{r4, r5, r6, pc}
 8008cac:	ab01      	add	r3, sp, #4
 8008cae:	466a      	mov	r2, sp
 8008cb0:	f7ff ffc8 	bl	8008c44 <__swhatbuf_r>
 8008cb4:	9900      	ldr	r1, [sp, #0]
 8008cb6:	4605      	mov	r5, r0
 8008cb8:	4630      	mov	r0, r6
 8008cba:	f000 f89b 	bl	8008df4 <_malloc_r>
 8008cbe:	b948      	cbnz	r0, 8008cd4 <__smakebuf_r+0x44>
 8008cc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cc4:	059a      	lsls	r2, r3, #22
 8008cc6:	d4ef      	bmi.n	8008ca8 <__smakebuf_r+0x18>
 8008cc8:	f023 0303 	bic.w	r3, r3, #3
 8008ccc:	f043 0302 	orr.w	r3, r3, #2
 8008cd0:	81a3      	strh	r3, [r4, #12]
 8008cd2:	e7e3      	b.n	8008c9c <__smakebuf_r+0xc>
 8008cd4:	4b0d      	ldr	r3, [pc, #52]	; (8008d0c <__smakebuf_r+0x7c>)
 8008cd6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008cd8:	89a3      	ldrh	r3, [r4, #12]
 8008cda:	6020      	str	r0, [r4, #0]
 8008cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ce0:	81a3      	strh	r3, [r4, #12]
 8008ce2:	9b00      	ldr	r3, [sp, #0]
 8008ce4:	6163      	str	r3, [r4, #20]
 8008ce6:	9b01      	ldr	r3, [sp, #4]
 8008ce8:	6120      	str	r0, [r4, #16]
 8008cea:	b15b      	cbz	r3, 8008d04 <__smakebuf_r+0x74>
 8008cec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cf0:	4630      	mov	r0, r6
 8008cf2:	f000 fdcb 	bl	800988c <_isatty_r>
 8008cf6:	b128      	cbz	r0, 8008d04 <__smakebuf_r+0x74>
 8008cf8:	89a3      	ldrh	r3, [r4, #12]
 8008cfa:	f023 0303 	bic.w	r3, r3, #3
 8008cfe:	f043 0301 	orr.w	r3, r3, #1
 8008d02:	81a3      	strh	r3, [r4, #12]
 8008d04:	89a0      	ldrh	r0, [r4, #12]
 8008d06:	4305      	orrs	r5, r0
 8008d08:	81a5      	strh	r5, [r4, #12]
 8008d0a:	e7cd      	b.n	8008ca8 <__smakebuf_r+0x18>
 8008d0c:	08008a79 	.word	0x08008a79

08008d10 <malloc>:
 8008d10:	4b02      	ldr	r3, [pc, #8]	; (8008d1c <malloc+0xc>)
 8008d12:	4601      	mov	r1, r0
 8008d14:	6818      	ldr	r0, [r3, #0]
 8008d16:	f000 b86d 	b.w	8008df4 <_malloc_r>
 8008d1a:	bf00      	nop
 8008d1c:	20000048 	.word	0x20000048

08008d20 <_free_r>:
 8008d20:	b538      	push	{r3, r4, r5, lr}
 8008d22:	4605      	mov	r5, r0
 8008d24:	2900      	cmp	r1, #0
 8008d26:	d041      	beq.n	8008dac <_free_r+0x8c>
 8008d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d2c:	1f0c      	subs	r4, r1, #4
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	bfb8      	it	lt
 8008d32:	18e4      	addlt	r4, r4, r3
 8008d34:	f000 fde6 	bl	8009904 <__malloc_lock>
 8008d38:	4a1d      	ldr	r2, [pc, #116]	; (8008db0 <_free_r+0x90>)
 8008d3a:	6813      	ldr	r3, [r2, #0]
 8008d3c:	b933      	cbnz	r3, 8008d4c <_free_r+0x2c>
 8008d3e:	6063      	str	r3, [r4, #4]
 8008d40:	6014      	str	r4, [r2, #0]
 8008d42:	4628      	mov	r0, r5
 8008d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d48:	f000 bde2 	b.w	8009910 <__malloc_unlock>
 8008d4c:	42a3      	cmp	r3, r4
 8008d4e:	d908      	bls.n	8008d62 <_free_r+0x42>
 8008d50:	6820      	ldr	r0, [r4, #0]
 8008d52:	1821      	adds	r1, r4, r0
 8008d54:	428b      	cmp	r3, r1
 8008d56:	bf01      	itttt	eq
 8008d58:	6819      	ldreq	r1, [r3, #0]
 8008d5a:	685b      	ldreq	r3, [r3, #4]
 8008d5c:	1809      	addeq	r1, r1, r0
 8008d5e:	6021      	streq	r1, [r4, #0]
 8008d60:	e7ed      	b.n	8008d3e <_free_r+0x1e>
 8008d62:	461a      	mov	r2, r3
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	b10b      	cbz	r3, 8008d6c <_free_r+0x4c>
 8008d68:	42a3      	cmp	r3, r4
 8008d6a:	d9fa      	bls.n	8008d62 <_free_r+0x42>
 8008d6c:	6811      	ldr	r1, [r2, #0]
 8008d6e:	1850      	adds	r0, r2, r1
 8008d70:	42a0      	cmp	r0, r4
 8008d72:	d10b      	bne.n	8008d8c <_free_r+0x6c>
 8008d74:	6820      	ldr	r0, [r4, #0]
 8008d76:	4401      	add	r1, r0
 8008d78:	1850      	adds	r0, r2, r1
 8008d7a:	4283      	cmp	r3, r0
 8008d7c:	6011      	str	r1, [r2, #0]
 8008d7e:	d1e0      	bne.n	8008d42 <_free_r+0x22>
 8008d80:	6818      	ldr	r0, [r3, #0]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	6053      	str	r3, [r2, #4]
 8008d86:	4401      	add	r1, r0
 8008d88:	6011      	str	r1, [r2, #0]
 8008d8a:	e7da      	b.n	8008d42 <_free_r+0x22>
 8008d8c:	d902      	bls.n	8008d94 <_free_r+0x74>
 8008d8e:	230c      	movs	r3, #12
 8008d90:	602b      	str	r3, [r5, #0]
 8008d92:	e7d6      	b.n	8008d42 <_free_r+0x22>
 8008d94:	6820      	ldr	r0, [r4, #0]
 8008d96:	1821      	adds	r1, r4, r0
 8008d98:	428b      	cmp	r3, r1
 8008d9a:	bf04      	itt	eq
 8008d9c:	6819      	ldreq	r1, [r3, #0]
 8008d9e:	685b      	ldreq	r3, [r3, #4]
 8008da0:	6063      	str	r3, [r4, #4]
 8008da2:	bf04      	itt	eq
 8008da4:	1809      	addeq	r1, r1, r0
 8008da6:	6021      	streq	r1, [r4, #0]
 8008da8:	6054      	str	r4, [r2, #4]
 8008daa:	e7ca      	b.n	8008d42 <_free_r+0x22>
 8008dac:	bd38      	pop	{r3, r4, r5, pc}
 8008dae:	bf00      	nop
 8008db0:	20000b74 	.word	0x20000b74

08008db4 <sbrk_aligned>:
 8008db4:	b570      	push	{r4, r5, r6, lr}
 8008db6:	4e0e      	ldr	r6, [pc, #56]	; (8008df0 <sbrk_aligned+0x3c>)
 8008db8:	460c      	mov	r4, r1
 8008dba:	6831      	ldr	r1, [r6, #0]
 8008dbc:	4605      	mov	r5, r0
 8008dbe:	b911      	cbnz	r1, 8008dc6 <sbrk_aligned+0x12>
 8008dc0:	f000 fcd4 	bl	800976c <_sbrk_r>
 8008dc4:	6030      	str	r0, [r6, #0]
 8008dc6:	4621      	mov	r1, r4
 8008dc8:	4628      	mov	r0, r5
 8008dca:	f000 fccf 	bl	800976c <_sbrk_r>
 8008dce:	1c43      	adds	r3, r0, #1
 8008dd0:	d00a      	beq.n	8008de8 <sbrk_aligned+0x34>
 8008dd2:	1cc4      	adds	r4, r0, #3
 8008dd4:	f024 0403 	bic.w	r4, r4, #3
 8008dd8:	42a0      	cmp	r0, r4
 8008dda:	d007      	beq.n	8008dec <sbrk_aligned+0x38>
 8008ddc:	1a21      	subs	r1, r4, r0
 8008dde:	4628      	mov	r0, r5
 8008de0:	f000 fcc4 	bl	800976c <_sbrk_r>
 8008de4:	3001      	adds	r0, #1
 8008de6:	d101      	bne.n	8008dec <sbrk_aligned+0x38>
 8008de8:	f04f 34ff 	mov.w	r4, #4294967295
 8008dec:	4620      	mov	r0, r4
 8008dee:	bd70      	pop	{r4, r5, r6, pc}
 8008df0:	20000b78 	.word	0x20000b78

08008df4 <_malloc_r>:
 8008df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008df8:	1ccd      	adds	r5, r1, #3
 8008dfa:	f025 0503 	bic.w	r5, r5, #3
 8008dfe:	3508      	adds	r5, #8
 8008e00:	2d0c      	cmp	r5, #12
 8008e02:	bf38      	it	cc
 8008e04:	250c      	movcc	r5, #12
 8008e06:	2d00      	cmp	r5, #0
 8008e08:	4607      	mov	r7, r0
 8008e0a:	db01      	blt.n	8008e10 <_malloc_r+0x1c>
 8008e0c:	42a9      	cmp	r1, r5
 8008e0e:	d905      	bls.n	8008e1c <_malloc_r+0x28>
 8008e10:	230c      	movs	r3, #12
 8008e12:	603b      	str	r3, [r7, #0]
 8008e14:	2600      	movs	r6, #0
 8008e16:	4630      	mov	r0, r6
 8008e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e1c:	4e2e      	ldr	r6, [pc, #184]	; (8008ed8 <_malloc_r+0xe4>)
 8008e1e:	f000 fd71 	bl	8009904 <__malloc_lock>
 8008e22:	6833      	ldr	r3, [r6, #0]
 8008e24:	461c      	mov	r4, r3
 8008e26:	bb34      	cbnz	r4, 8008e76 <_malloc_r+0x82>
 8008e28:	4629      	mov	r1, r5
 8008e2a:	4638      	mov	r0, r7
 8008e2c:	f7ff ffc2 	bl	8008db4 <sbrk_aligned>
 8008e30:	1c43      	adds	r3, r0, #1
 8008e32:	4604      	mov	r4, r0
 8008e34:	d14d      	bne.n	8008ed2 <_malloc_r+0xde>
 8008e36:	6834      	ldr	r4, [r6, #0]
 8008e38:	4626      	mov	r6, r4
 8008e3a:	2e00      	cmp	r6, #0
 8008e3c:	d140      	bne.n	8008ec0 <_malloc_r+0xcc>
 8008e3e:	6823      	ldr	r3, [r4, #0]
 8008e40:	4631      	mov	r1, r6
 8008e42:	4638      	mov	r0, r7
 8008e44:	eb04 0803 	add.w	r8, r4, r3
 8008e48:	f000 fc90 	bl	800976c <_sbrk_r>
 8008e4c:	4580      	cmp	r8, r0
 8008e4e:	d13a      	bne.n	8008ec6 <_malloc_r+0xd2>
 8008e50:	6821      	ldr	r1, [r4, #0]
 8008e52:	3503      	adds	r5, #3
 8008e54:	1a6d      	subs	r5, r5, r1
 8008e56:	f025 0503 	bic.w	r5, r5, #3
 8008e5a:	3508      	adds	r5, #8
 8008e5c:	2d0c      	cmp	r5, #12
 8008e5e:	bf38      	it	cc
 8008e60:	250c      	movcc	r5, #12
 8008e62:	4629      	mov	r1, r5
 8008e64:	4638      	mov	r0, r7
 8008e66:	f7ff ffa5 	bl	8008db4 <sbrk_aligned>
 8008e6a:	3001      	adds	r0, #1
 8008e6c:	d02b      	beq.n	8008ec6 <_malloc_r+0xd2>
 8008e6e:	6823      	ldr	r3, [r4, #0]
 8008e70:	442b      	add	r3, r5
 8008e72:	6023      	str	r3, [r4, #0]
 8008e74:	e00e      	b.n	8008e94 <_malloc_r+0xa0>
 8008e76:	6822      	ldr	r2, [r4, #0]
 8008e78:	1b52      	subs	r2, r2, r5
 8008e7a:	d41e      	bmi.n	8008eba <_malloc_r+0xc6>
 8008e7c:	2a0b      	cmp	r2, #11
 8008e7e:	d916      	bls.n	8008eae <_malloc_r+0xba>
 8008e80:	1961      	adds	r1, r4, r5
 8008e82:	42a3      	cmp	r3, r4
 8008e84:	6025      	str	r5, [r4, #0]
 8008e86:	bf18      	it	ne
 8008e88:	6059      	strne	r1, [r3, #4]
 8008e8a:	6863      	ldr	r3, [r4, #4]
 8008e8c:	bf08      	it	eq
 8008e8e:	6031      	streq	r1, [r6, #0]
 8008e90:	5162      	str	r2, [r4, r5]
 8008e92:	604b      	str	r3, [r1, #4]
 8008e94:	4638      	mov	r0, r7
 8008e96:	f104 060b 	add.w	r6, r4, #11
 8008e9a:	f000 fd39 	bl	8009910 <__malloc_unlock>
 8008e9e:	f026 0607 	bic.w	r6, r6, #7
 8008ea2:	1d23      	adds	r3, r4, #4
 8008ea4:	1af2      	subs	r2, r6, r3
 8008ea6:	d0b6      	beq.n	8008e16 <_malloc_r+0x22>
 8008ea8:	1b9b      	subs	r3, r3, r6
 8008eaa:	50a3      	str	r3, [r4, r2]
 8008eac:	e7b3      	b.n	8008e16 <_malloc_r+0x22>
 8008eae:	6862      	ldr	r2, [r4, #4]
 8008eb0:	42a3      	cmp	r3, r4
 8008eb2:	bf0c      	ite	eq
 8008eb4:	6032      	streq	r2, [r6, #0]
 8008eb6:	605a      	strne	r2, [r3, #4]
 8008eb8:	e7ec      	b.n	8008e94 <_malloc_r+0xa0>
 8008eba:	4623      	mov	r3, r4
 8008ebc:	6864      	ldr	r4, [r4, #4]
 8008ebe:	e7b2      	b.n	8008e26 <_malloc_r+0x32>
 8008ec0:	4634      	mov	r4, r6
 8008ec2:	6876      	ldr	r6, [r6, #4]
 8008ec4:	e7b9      	b.n	8008e3a <_malloc_r+0x46>
 8008ec6:	230c      	movs	r3, #12
 8008ec8:	603b      	str	r3, [r7, #0]
 8008eca:	4638      	mov	r0, r7
 8008ecc:	f000 fd20 	bl	8009910 <__malloc_unlock>
 8008ed0:	e7a1      	b.n	8008e16 <_malloc_r+0x22>
 8008ed2:	6025      	str	r5, [r4, #0]
 8008ed4:	e7de      	b.n	8008e94 <_malloc_r+0xa0>
 8008ed6:	bf00      	nop
 8008ed8:	20000b74 	.word	0x20000b74

08008edc <__ssputs_r>:
 8008edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ee0:	688e      	ldr	r6, [r1, #8]
 8008ee2:	429e      	cmp	r6, r3
 8008ee4:	4682      	mov	sl, r0
 8008ee6:	460c      	mov	r4, r1
 8008ee8:	4690      	mov	r8, r2
 8008eea:	461f      	mov	r7, r3
 8008eec:	d838      	bhi.n	8008f60 <__ssputs_r+0x84>
 8008eee:	898a      	ldrh	r2, [r1, #12]
 8008ef0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ef4:	d032      	beq.n	8008f5c <__ssputs_r+0x80>
 8008ef6:	6825      	ldr	r5, [r4, #0]
 8008ef8:	6909      	ldr	r1, [r1, #16]
 8008efa:	eba5 0901 	sub.w	r9, r5, r1
 8008efe:	6965      	ldr	r5, [r4, #20]
 8008f00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f08:	3301      	adds	r3, #1
 8008f0a:	444b      	add	r3, r9
 8008f0c:	106d      	asrs	r5, r5, #1
 8008f0e:	429d      	cmp	r5, r3
 8008f10:	bf38      	it	cc
 8008f12:	461d      	movcc	r5, r3
 8008f14:	0553      	lsls	r3, r2, #21
 8008f16:	d531      	bpl.n	8008f7c <__ssputs_r+0xa0>
 8008f18:	4629      	mov	r1, r5
 8008f1a:	f7ff ff6b 	bl	8008df4 <_malloc_r>
 8008f1e:	4606      	mov	r6, r0
 8008f20:	b950      	cbnz	r0, 8008f38 <__ssputs_r+0x5c>
 8008f22:	230c      	movs	r3, #12
 8008f24:	f8ca 3000 	str.w	r3, [sl]
 8008f28:	89a3      	ldrh	r3, [r4, #12]
 8008f2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f2e:	81a3      	strh	r3, [r4, #12]
 8008f30:	f04f 30ff 	mov.w	r0, #4294967295
 8008f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f38:	6921      	ldr	r1, [r4, #16]
 8008f3a:	464a      	mov	r2, r9
 8008f3c:	f7ff fa5e 	bl	80083fc <memcpy>
 8008f40:	89a3      	ldrh	r3, [r4, #12]
 8008f42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f4a:	81a3      	strh	r3, [r4, #12]
 8008f4c:	6126      	str	r6, [r4, #16]
 8008f4e:	6165      	str	r5, [r4, #20]
 8008f50:	444e      	add	r6, r9
 8008f52:	eba5 0509 	sub.w	r5, r5, r9
 8008f56:	6026      	str	r6, [r4, #0]
 8008f58:	60a5      	str	r5, [r4, #8]
 8008f5a:	463e      	mov	r6, r7
 8008f5c:	42be      	cmp	r6, r7
 8008f5e:	d900      	bls.n	8008f62 <__ssputs_r+0x86>
 8008f60:	463e      	mov	r6, r7
 8008f62:	6820      	ldr	r0, [r4, #0]
 8008f64:	4632      	mov	r2, r6
 8008f66:	4641      	mov	r1, r8
 8008f68:	f000 fcb2 	bl	80098d0 <memmove>
 8008f6c:	68a3      	ldr	r3, [r4, #8]
 8008f6e:	1b9b      	subs	r3, r3, r6
 8008f70:	60a3      	str	r3, [r4, #8]
 8008f72:	6823      	ldr	r3, [r4, #0]
 8008f74:	4433      	add	r3, r6
 8008f76:	6023      	str	r3, [r4, #0]
 8008f78:	2000      	movs	r0, #0
 8008f7a:	e7db      	b.n	8008f34 <__ssputs_r+0x58>
 8008f7c:	462a      	mov	r2, r5
 8008f7e:	f000 fccd 	bl	800991c <_realloc_r>
 8008f82:	4606      	mov	r6, r0
 8008f84:	2800      	cmp	r0, #0
 8008f86:	d1e1      	bne.n	8008f4c <__ssputs_r+0x70>
 8008f88:	6921      	ldr	r1, [r4, #16]
 8008f8a:	4650      	mov	r0, sl
 8008f8c:	f7ff fec8 	bl	8008d20 <_free_r>
 8008f90:	e7c7      	b.n	8008f22 <__ssputs_r+0x46>
	...

08008f94 <_svfiprintf_r>:
 8008f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f98:	4698      	mov	r8, r3
 8008f9a:	898b      	ldrh	r3, [r1, #12]
 8008f9c:	061b      	lsls	r3, r3, #24
 8008f9e:	b09d      	sub	sp, #116	; 0x74
 8008fa0:	4607      	mov	r7, r0
 8008fa2:	460d      	mov	r5, r1
 8008fa4:	4614      	mov	r4, r2
 8008fa6:	d50e      	bpl.n	8008fc6 <_svfiprintf_r+0x32>
 8008fa8:	690b      	ldr	r3, [r1, #16]
 8008faa:	b963      	cbnz	r3, 8008fc6 <_svfiprintf_r+0x32>
 8008fac:	2140      	movs	r1, #64	; 0x40
 8008fae:	f7ff ff21 	bl	8008df4 <_malloc_r>
 8008fb2:	6028      	str	r0, [r5, #0]
 8008fb4:	6128      	str	r0, [r5, #16]
 8008fb6:	b920      	cbnz	r0, 8008fc2 <_svfiprintf_r+0x2e>
 8008fb8:	230c      	movs	r3, #12
 8008fba:	603b      	str	r3, [r7, #0]
 8008fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc0:	e0d1      	b.n	8009166 <_svfiprintf_r+0x1d2>
 8008fc2:	2340      	movs	r3, #64	; 0x40
 8008fc4:	616b      	str	r3, [r5, #20]
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	9309      	str	r3, [sp, #36]	; 0x24
 8008fca:	2320      	movs	r3, #32
 8008fcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fd4:	2330      	movs	r3, #48	; 0x30
 8008fd6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009180 <_svfiprintf_r+0x1ec>
 8008fda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fde:	f04f 0901 	mov.w	r9, #1
 8008fe2:	4623      	mov	r3, r4
 8008fe4:	469a      	mov	sl, r3
 8008fe6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fea:	b10a      	cbz	r2, 8008ff0 <_svfiprintf_r+0x5c>
 8008fec:	2a25      	cmp	r2, #37	; 0x25
 8008fee:	d1f9      	bne.n	8008fe4 <_svfiprintf_r+0x50>
 8008ff0:	ebba 0b04 	subs.w	fp, sl, r4
 8008ff4:	d00b      	beq.n	800900e <_svfiprintf_r+0x7a>
 8008ff6:	465b      	mov	r3, fp
 8008ff8:	4622      	mov	r2, r4
 8008ffa:	4629      	mov	r1, r5
 8008ffc:	4638      	mov	r0, r7
 8008ffe:	f7ff ff6d 	bl	8008edc <__ssputs_r>
 8009002:	3001      	adds	r0, #1
 8009004:	f000 80aa 	beq.w	800915c <_svfiprintf_r+0x1c8>
 8009008:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800900a:	445a      	add	r2, fp
 800900c:	9209      	str	r2, [sp, #36]	; 0x24
 800900e:	f89a 3000 	ldrb.w	r3, [sl]
 8009012:	2b00      	cmp	r3, #0
 8009014:	f000 80a2 	beq.w	800915c <_svfiprintf_r+0x1c8>
 8009018:	2300      	movs	r3, #0
 800901a:	f04f 32ff 	mov.w	r2, #4294967295
 800901e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009022:	f10a 0a01 	add.w	sl, sl, #1
 8009026:	9304      	str	r3, [sp, #16]
 8009028:	9307      	str	r3, [sp, #28]
 800902a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800902e:	931a      	str	r3, [sp, #104]	; 0x68
 8009030:	4654      	mov	r4, sl
 8009032:	2205      	movs	r2, #5
 8009034:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009038:	4851      	ldr	r0, [pc, #324]	; (8009180 <_svfiprintf_r+0x1ec>)
 800903a:	f7f7 f8d1 	bl	80001e0 <memchr>
 800903e:	9a04      	ldr	r2, [sp, #16]
 8009040:	b9d8      	cbnz	r0, 800907a <_svfiprintf_r+0xe6>
 8009042:	06d0      	lsls	r0, r2, #27
 8009044:	bf44      	itt	mi
 8009046:	2320      	movmi	r3, #32
 8009048:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800904c:	0711      	lsls	r1, r2, #28
 800904e:	bf44      	itt	mi
 8009050:	232b      	movmi	r3, #43	; 0x2b
 8009052:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009056:	f89a 3000 	ldrb.w	r3, [sl]
 800905a:	2b2a      	cmp	r3, #42	; 0x2a
 800905c:	d015      	beq.n	800908a <_svfiprintf_r+0xf6>
 800905e:	9a07      	ldr	r2, [sp, #28]
 8009060:	4654      	mov	r4, sl
 8009062:	2000      	movs	r0, #0
 8009064:	f04f 0c0a 	mov.w	ip, #10
 8009068:	4621      	mov	r1, r4
 800906a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800906e:	3b30      	subs	r3, #48	; 0x30
 8009070:	2b09      	cmp	r3, #9
 8009072:	d94e      	bls.n	8009112 <_svfiprintf_r+0x17e>
 8009074:	b1b0      	cbz	r0, 80090a4 <_svfiprintf_r+0x110>
 8009076:	9207      	str	r2, [sp, #28]
 8009078:	e014      	b.n	80090a4 <_svfiprintf_r+0x110>
 800907a:	eba0 0308 	sub.w	r3, r0, r8
 800907e:	fa09 f303 	lsl.w	r3, r9, r3
 8009082:	4313      	orrs	r3, r2
 8009084:	9304      	str	r3, [sp, #16]
 8009086:	46a2      	mov	sl, r4
 8009088:	e7d2      	b.n	8009030 <_svfiprintf_r+0x9c>
 800908a:	9b03      	ldr	r3, [sp, #12]
 800908c:	1d19      	adds	r1, r3, #4
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	9103      	str	r1, [sp, #12]
 8009092:	2b00      	cmp	r3, #0
 8009094:	bfbb      	ittet	lt
 8009096:	425b      	neglt	r3, r3
 8009098:	f042 0202 	orrlt.w	r2, r2, #2
 800909c:	9307      	strge	r3, [sp, #28]
 800909e:	9307      	strlt	r3, [sp, #28]
 80090a0:	bfb8      	it	lt
 80090a2:	9204      	strlt	r2, [sp, #16]
 80090a4:	7823      	ldrb	r3, [r4, #0]
 80090a6:	2b2e      	cmp	r3, #46	; 0x2e
 80090a8:	d10c      	bne.n	80090c4 <_svfiprintf_r+0x130>
 80090aa:	7863      	ldrb	r3, [r4, #1]
 80090ac:	2b2a      	cmp	r3, #42	; 0x2a
 80090ae:	d135      	bne.n	800911c <_svfiprintf_r+0x188>
 80090b0:	9b03      	ldr	r3, [sp, #12]
 80090b2:	1d1a      	adds	r2, r3, #4
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	9203      	str	r2, [sp, #12]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	bfb8      	it	lt
 80090bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80090c0:	3402      	adds	r4, #2
 80090c2:	9305      	str	r3, [sp, #20]
 80090c4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009184 <_svfiprintf_r+0x1f0>
 80090c8:	7821      	ldrb	r1, [r4, #0]
 80090ca:	2203      	movs	r2, #3
 80090cc:	4650      	mov	r0, sl
 80090ce:	f7f7 f887 	bl	80001e0 <memchr>
 80090d2:	b140      	cbz	r0, 80090e6 <_svfiprintf_r+0x152>
 80090d4:	2340      	movs	r3, #64	; 0x40
 80090d6:	eba0 000a 	sub.w	r0, r0, sl
 80090da:	fa03 f000 	lsl.w	r0, r3, r0
 80090de:	9b04      	ldr	r3, [sp, #16]
 80090e0:	4303      	orrs	r3, r0
 80090e2:	3401      	adds	r4, #1
 80090e4:	9304      	str	r3, [sp, #16]
 80090e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090ea:	4827      	ldr	r0, [pc, #156]	; (8009188 <_svfiprintf_r+0x1f4>)
 80090ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090f0:	2206      	movs	r2, #6
 80090f2:	f7f7 f875 	bl	80001e0 <memchr>
 80090f6:	2800      	cmp	r0, #0
 80090f8:	d038      	beq.n	800916c <_svfiprintf_r+0x1d8>
 80090fa:	4b24      	ldr	r3, [pc, #144]	; (800918c <_svfiprintf_r+0x1f8>)
 80090fc:	bb1b      	cbnz	r3, 8009146 <_svfiprintf_r+0x1b2>
 80090fe:	9b03      	ldr	r3, [sp, #12]
 8009100:	3307      	adds	r3, #7
 8009102:	f023 0307 	bic.w	r3, r3, #7
 8009106:	3308      	adds	r3, #8
 8009108:	9303      	str	r3, [sp, #12]
 800910a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800910c:	4433      	add	r3, r6
 800910e:	9309      	str	r3, [sp, #36]	; 0x24
 8009110:	e767      	b.n	8008fe2 <_svfiprintf_r+0x4e>
 8009112:	fb0c 3202 	mla	r2, ip, r2, r3
 8009116:	460c      	mov	r4, r1
 8009118:	2001      	movs	r0, #1
 800911a:	e7a5      	b.n	8009068 <_svfiprintf_r+0xd4>
 800911c:	2300      	movs	r3, #0
 800911e:	3401      	adds	r4, #1
 8009120:	9305      	str	r3, [sp, #20]
 8009122:	4619      	mov	r1, r3
 8009124:	f04f 0c0a 	mov.w	ip, #10
 8009128:	4620      	mov	r0, r4
 800912a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800912e:	3a30      	subs	r2, #48	; 0x30
 8009130:	2a09      	cmp	r2, #9
 8009132:	d903      	bls.n	800913c <_svfiprintf_r+0x1a8>
 8009134:	2b00      	cmp	r3, #0
 8009136:	d0c5      	beq.n	80090c4 <_svfiprintf_r+0x130>
 8009138:	9105      	str	r1, [sp, #20]
 800913a:	e7c3      	b.n	80090c4 <_svfiprintf_r+0x130>
 800913c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009140:	4604      	mov	r4, r0
 8009142:	2301      	movs	r3, #1
 8009144:	e7f0      	b.n	8009128 <_svfiprintf_r+0x194>
 8009146:	ab03      	add	r3, sp, #12
 8009148:	9300      	str	r3, [sp, #0]
 800914a:	462a      	mov	r2, r5
 800914c:	4b10      	ldr	r3, [pc, #64]	; (8009190 <_svfiprintf_r+0x1fc>)
 800914e:	a904      	add	r1, sp, #16
 8009150:	4638      	mov	r0, r7
 8009152:	f3af 8000 	nop.w
 8009156:	1c42      	adds	r2, r0, #1
 8009158:	4606      	mov	r6, r0
 800915a:	d1d6      	bne.n	800910a <_svfiprintf_r+0x176>
 800915c:	89ab      	ldrh	r3, [r5, #12]
 800915e:	065b      	lsls	r3, r3, #25
 8009160:	f53f af2c 	bmi.w	8008fbc <_svfiprintf_r+0x28>
 8009164:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009166:	b01d      	add	sp, #116	; 0x74
 8009168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800916c:	ab03      	add	r3, sp, #12
 800916e:	9300      	str	r3, [sp, #0]
 8009170:	462a      	mov	r2, r5
 8009172:	4b07      	ldr	r3, [pc, #28]	; (8009190 <_svfiprintf_r+0x1fc>)
 8009174:	a904      	add	r1, sp, #16
 8009176:	4638      	mov	r0, r7
 8009178:	f000 f9d2 	bl	8009520 <_printf_i>
 800917c:	e7eb      	b.n	8009156 <_svfiprintf_r+0x1c2>
 800917e:	bf00      	nop
 8009180:	0800a4d4 	.word	0x0800a4d4
 8009184:	0800a4da 	.word	0x0800a4da
 8009188:	0800a4de 	.word	0x0800a4de
 800918c:	00000000 	.word	0x00000000
 8009190:	08008edd 	.word	0x08008edd

08009194 <__sfputc_r>:
 8009194:	6893      	ldr	r3, [r2, #8]
 8009196:	3b01      	subs	r3, #1
 8009198:	2b00      	cmp	r3, #0
 800919a:	b410      	push	{r4}
 800919c:	6093      	str	r3, [r2, #8]
 800919e:	da07      	bge.n	80091b0 <__sfputc_r+0x1c>
 80091a0:	6994      	ldr	r4, [r2, #24]
 80091a2:	42a3      	cmp	r3, r4
 80091a4:	db01      	blt.n	80091aa <__sfputc_r+0x16>
 80091a6:	290a      	cmp	r1, #10
 80091a8:	d102      	bne.n	80091b0 <__sfputc_r+0x1c>
 80091aa:	bc10      	pop	{r4}
 80091ac:	f7ff baa4 	b.w	80086f8 <__swbuf_r>
 80091b0:	6813      	ldr	r3, [r2, #0]
 80091b2:	1c58      	adds	r0, r3, #1
 80091b4:	6010      	str	r0, [r2, #0]
 80091b6:	7019      	strb	r1, [r3, #0]
 80091b8:	4608      	mov	r0, r1
 80091ba:	bc10      	pop	{r4}
 80091bc:	4770      	bx	lr

080091be <__sfputs_r>:
 80091be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091c0:	4606      	mov	r6, r0
 80091c2:	460f      	mov	r7, r1
 80091c4:	4614      	mov	r4, r2
 80091c6:	18d5      	adds	r5, r2, r3
 80091c8:	42ac      	cmp	r4, r5
 80091ca:	d101      	bne.n	80091d0 <__sfputs_r+0x12>
 80091cc:	2000      	movs	r0, #0
 80091ce:	e007      	b.n	80091e0 <__sfputs_r+0x22>
 80091d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091d4:	463a      	mov	r2, r7
 80091d6:	4630      	mov	r0, r6
 80091d8:	f7ff ffdc 	bl	8009194 <__sfputc_r>
 80091dc:	1c43      	adds	r3, r0, #1
 80091de:	d1f3      	bne.n	80091c8 <__sfputs_r+0xa>
 80091e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080091e4 <_vfiprintf_r>:
 80091e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e8:	460d      	mov	r5, r1
 80091ea:	b09d      	sub	sp, #116	; 0x74
 80091ec:	4614      	mov	r4, r2
 80091ee:	4698      	mov	r8, r3
 80091f0:	4606      	mov	r6, r0
 80091f2:	b118      	cbz	r0, 80091fc <_vfiprintf_r+0x18>
 80091f4:	6983      	ldr	r3, [r0, #24]
 80091f6:	b90b      	cbnz	r3, 80091fc <_vfiprintf_r+0x18>
 80091f8:	f7ff fc72 	bl	8008ae0 <__sinit>
 80091fc:	4b89      	ldr	r3, [pc, #548]	; (8009424 <_vfiprintf_r+0x240>)
 80091fe:	429d      	cmp	r5, r3
 8009200:	d11b      	bne.n	800923a <_vfiprintf_r+0x56>
 8009202:	6875      	ldr	r5, [r6, #4]
 8009204:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009206:	07d9      	lsls	r1, r3, #31
 8009208:	d405      	bmi.n	8009216 <_vfiprintf_r+0x32>
 800920a:	89ab      	ldrh	r3, [r5, #12]
 800920c:	059a      	lsls	r2, r3, #22
 800920e:	d402      	bmi.n	8009216 <_vfiprintf_r+0x32>
 8009210:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009212:	f7ff fd15 	bl	8008c40 <__retarget_lock_acquire_recursive>
 8009216:	89ab      	ldrh	r3, [r5, #12]
 8009218:	071b      	lsls	r3, r3, #28
 800921a:	d501      	bpl.n	8009220 <_vfiprintf_r+0x3c>
 800921c:	692b      	ldr	r3, [r5, #16]
 800921e:	b9eb      	cbnz	r3, 800925c <_vfiprintf_r+0x78>
 8009220:	4629      	mov	r1, r5
 8009222:	4630      	mov	r0, r6
 8009224:	f7ff faba 	bl	800879c <__swsetup_r>
 8009228:	b1c0      	cbz	r0, 800925c <_vfiprintf_r+0x78>
 800922a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800922c:	07dc      	lsls	r4, r3, #31
 800922e:	d50e      	bpl.n	800924e <_vfiprintf_r+0x6a>
 8009230:	f04f 30ff 	mov.w	r0, #4294967295
 8009234:	b01d      	add	sp, #116	; 0x74
 8009236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800923a:	4b7b      	ldr	r3, [pc, #492]	; (8009428 <_vfiprintf_r+0x244>)
 800923c:	429d      	cmp	r5, r3
 800923e:	d101      	bne.n	8009244 <_vfiprintf_r+0x60>
 8009240:	68b5      	ldr	r5, [r6, #8]
 8009242:	e7df      	b.n	8009204 <_vfiprintf_r+0x20>
 8009244:	4b79      	ldr	r3, [pc, #484]	; (800942c <_vfiprintf_r+0x248>)
 8009246:	429d      	cmp	r5, r3
 8009248:	bf08      	it	eq
 800924a:	68f5      	ldreq	r5, [r6, #12]
 800924c:	e7da      	b.n	8009204 <_vfiprintf_r+0x20>
 800924e:	89ab      	ldrh	r3, [r5, #12]
 8009250:	0598      	lsls	r0, r3, #22
 8009252:	d4ed      	bmi.n	8009230 <_vfiprintf_r+0x4c>
 8009254:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009256:	f7ff fcf4 	bl	8008c42 <__retarget_lock_release_recursive>
 800925a:	e7e9      	b.n	8009230 <_vfiprintf_r+0x4c>
 800925c:	2300      	movs	r3, #0
 800925e:	9309      	str	r3, [sp, #36]	; 0x24
 8009260:	2320      	movs	r3, #32
 8009262:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009266:	f8cd 800c 	str.w	r8, [sp, #12]
 800926a:	2330      	movs	r3, #48	; 0x30
 800926c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009430 <_vfiprintf_r+0x24c>
 8009270:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009274:	f04f 0901 	mov.w	r9, #1
 8009278:	4623      	mov	r3, r4
 800927a:	469a      	mov	sl, r3
 800927c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009280:	b10a      	cbz	r2, 8009286 <_vfiprintf_r+0xa2>
 8009282:	2a25      	cmp	r2, #37	; 0x25
 8009284:	d1f9      	bne.n	800927a <_vfiprintf_r+0x96>
 8009286:	ebba 0b04 	subs.w	fp, sl, r4
 800928a:	d00b      	beq.n	80092a4 <_vfiprintf_r+0xc0>
 800928c:	465b      	mov	r3, fp
 800928e:	4622      	mov	r2, r4
 8009290:	4629      	mov	r1, r5
 8009292:	4630      	mov	r0, r6
 8009294:	f7ff ff93 	bl	80091be <__sfputs_r>
 8009298:	3001      	adds	r0, #1
 800929a:	f000 80aa 	beq.w	80093f2 <_vfiprintf_r+0x20e>
 800929e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092a0:	445a      	add	r2, fp
 80092a2:	9209      	str	r2, [sp, #36]	; 0x24
 80092a4:	f89a 3000 	ldrb.w	r3, [sl]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	f000 80a2 	beq.w	80093f2 <_vfiprintf_r+0x20e>
 80092ae:	2300      	movs	r3, #0
 80092b0:	f04f 32ff 	mov.w	r2, #4294967295
 80092b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092b8:	f10a 0a01 	add.w	sl, sl, #1
 80092bc:	9304      	str	r3, [sp, #16]
 80092be:	9307      	str	r3, [sp, #28]
 80092c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092c4:	931a      	str	r3, [sp, #104]	; 0x68
 80092c6:	4654      	mov	r4, sl
 80092c8:	2205      	movs	r2, #5
 80092ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092ce:	4858      	ldr	r0, [pc, #352]	; (8009430 <_vfiprintf_r+0x24c>)
 80092d0:	f7f6 ff86 	bl	80001e0 <memchr>
 80092d4:	9a04      	ldr	r2, [sp, #16]
 80092d6:	b9d8      	cbnz	r0, 8009310 <_vfiprintf_r+0x12c>
 80092d8:	06d1      	lsls	r1, r2, #27
 80092da:	bf44      	itt	mi
 80092dc:	2320      	movmi	r3, #32
 80092de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092e2:	0713      	lsls	r3, r2, #28
 80092e4:	bf44      	itt	mi
 80092e6:	232b      	movmi	r3, #43	; 0x2b
 80092e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092ec:	f89a 3000 	ldrb.w	r3, [sl]
 80092f0:	2b2a      	cmp	r3, #42	; 0x2a
 80092f2:	d015      	beq.n	8009320 <_vfiprintf_r+0x13c>
 80092f4:	9a07      	ldr	r2, [sp, #28]
 80092f6:	4654      	mov	r4, sl
 80092f8:	2000      	movs	r0, #0
 80092fa:	f04f 0c0a 	mov.w	ip, #10
 80092fe:	4621      	mov	r1, r4
 8009300:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009304:	3b30      	subs	r3, #48	; 0x30
 8009306:	2b09      	cmp	r3, #9
 8009308:	d94e      	bls.n	80093a8 <_vfiprintf_r+0x1c4>
 800930a:	b1b0      	cbz	r0, 800933a <_vfiprintf_r+0x156>
 800930c:	9207      	str	r2, [sp, #28]
 800930e:	e014      	b.n	800933a <_vfiprintf_r+0x156>
 8009310:	eba0 0308 	sub.w	r3, r0, r8
 8009314:	fa09 f303 	lsl.w	r3, r9, r3
 8009318:	4313      	orrs	r3, r2
 800931a:	9304      	str	r3, [sp, #16]
 800931c:	46a2      	mov	sl, r4
 800931e:	e7d2      	b.n	80092c6 <_vfiprintf_r+0xe2>
 8009320:	9b03      	ldr	r3, [sp, #12]
 8009322:	1d19      	adds	r1, r3, #4
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	9103      	str	r1, [sp, #12]
 8009328:	2b00      	cmp	r3, #0
 800932a:	bfbb      	ittet	lt
 800932c:	425b      	neglt	r3, r3
 800932e:	f042 0202 	orrlt.w	r2, r2, #2
 8009332:	9307      	strge	r3, [sp, #28]
 8009334:	9307      	strlt	r3, [sp, #28]
 8009336:	bfb8      	it	lt
 8009338:	9204      	strlt	r2, [sp, #16]
 800933a:	7823      	ldrb	r3, [r4, #0]
 800933c:	2b2e      	cmp	r3, #46	; 0x2e
 800933e:	d10c      	bne.n	800935a <_vfiprintf_r+0x176>
 8009340:	7863      	ldrb	r3, [r4, #1]
 8009342:	2b2a      	cmp	r3, #42	; 0x2a
 8009344:	d135      	bne.n	80093b2 <_vfiprintf_r+0x1ce>
 8009346:	9b03      	ldr	r3, [sp, #12]
 8009348:	1d1a      	adds	r2, r3, #4
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	9203      	str	r2, [sp, #12]
 800934e:	2b00      	cmp	r3, #0
 8009350:	bfb8      	it	lt
 8009352:	f04f 33ff 	movlt.w	r3, #4294967295
 8009356:	3402      	adds	r4, #2
 8009358:	9305      	str	r3, [sp, #20]
 800935a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009434 <_vfiprintf_r+0x250>
 800935e:	7821      	ldrb	r1, [r4, #0]
 8009360:	2203      	movs	r2, #3
 8009362:	4650      	mov	r0, sl
 8009364:	f7f6 ff3c 	bl	80001e0 <memchr>
 8009368:	b140      	cbz	r0, 800937c <_vfiprintf_r+0x198>
 800936a:	2340      	movs	r3, #64	; 0x40
 800936c:	eba0 000a 	sub.w	r0, r0, sl
 8009370:	fa03 f000 	lsl.w	r0, r3, r0
 8009374:	9b04      	ldr	r3, [sp, #16]
 8009376:	4303      	orrs	r3, r0
 8009378:	3401      	adds	r4, #1
 800937a:	9304      	str	r3, [sp, #16]
 800937c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009380:	482d      	ldr	r0, [pc, #180]	; (8009438 <_vfiprintf_r+0x254>)
 8009382:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009386:	2206      	movs	r2, #6
 8009388:	f7f6 ff2a 	bl	80001e0 <memchr>
 800938c:	2800      	cmp	r0, #0
 800938e:	d03f      	beq.n	8009410 <_vfiprintf_r+0x22c>
 8009390:	4b2a      	ldr	r3, [pc, #168]	; (800943c <_vfiprintf_r+0x258>)
 8009392:	bb1b      	cbnz	r3, 80093dc <_vfiprintf_r+0x1f8>
 8009394:	9b03      	ldr	r3, [sp, #12]
 8009396:	3307      	adds	r3, #7
 8009398:	f023 0307 	bic.w	r3, r3, #7
 800939c:	3308      	adds	r3, #8
 800939e:	9303      	str	r3, [sp, #12]
 80093a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093a2:	443b      	add	r3, r7
 80093a4:	9309      	str	r3, [sp, #36]	; 0x24
 80093a6:	e767      	b.n	8009278 <_vfiprintf_r+0x94>
 80093a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80093ac:	460c      	mov	r4, r1
 80093ae:	2001      	movs	r0, #1
 80093b0:	e7a5      	b.n	80092fe <_vfiprintf_r+0x11a>
 80093b2:	2300      	movs	r3, #0
 80093b4:	3401      	adds	r4, #1
 80093b6:	9305      	str	r3, [sp, #20]
 80093b8:	4619      	mov	r1, r3
 80093ba:	f04f 0c0a 	mov.w	ip, #10
 80093be:	4620      	mov	r0, r4
 80093c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093c4:	3a30      	subs	r2, #48	; 0x30
 80093c6:	2a09      	cmp	r2, #9
 80093c8:	d903      	bls.n	80093d2 <_vfiprintf_r+0x1ee>
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d0c5      	beq.n	800935a <_vfiprintf_r+0x176>
 80093ce:	9105      	str	r1, [sp, #20]
 80093d0:	e7c3      	b.n	800935a <_vfiprintf_r+0x176>
 80093d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80093d6:	4604      	mov	r4, r0
 80093d8:	2301      	movs	r3, #1
 80093da:	e7f0      	b.n	80093be <_vfiprintf_r+0x1da>
 80093dc:	ab03      	add	r3, sp, #12
 80093de:	9300      	str	r3, [sp, #0]
 80093e0:	462a      	mov	r2, r5
 80093e2:	4b17      	ldr	r3, [pc, #92]	; (8009440 <_vfiprintf_r+0x25c>)
 80093e4:	a904      	add	r1, sp, #16
 80093e6:	4630      	mov	r0, r6
 80093e8:	f3af 8000 	nop.w
 80093ec:	4607      	mov	r7, r0
 80093ee:	1c78      	adds	r0, r7, #1
 80093f0:	d1d6      	bne.n	80093a0 <_vfiprintf_r+0x1bc>
 80093f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093f4:	07d9      	lsls	r1, r3, #31
 80093f6:	d405      	bmi.n	8009404 <_vfiprintf_r+0x220>
 80093f8:	89ab      	ldrh	r3, [r5, #12]
 80093fa:	059a      	lsls	r2, r3, #22
 80093fc:	d402      	bmi.n	8009404 <_vfiprintf_r+0x220>
 80093fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009400:	f7ff fc1f 	bl	8008c42 <__retarget_lock_release_recursive>
 8009404:	89ab      	ldrh	r3, [r5, #12]
 8009406:	065b      	lsls	r3, r3, #25
 8009408:	f53f af12 	bmi.w	8009230 <_vfiprintf_r+0x4c>
 800940c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800940e:	e711      	b.n	8009234 <_vfiprintf_r+0x50>
 8009410:	ab03      	add	r3, sp, #12
 8009412:	9300      	str	r3, [sp, #0]
 8009414:	462a      	mov	r2, r5
 8009416:	4b0a      	ldr	r3, [pc, #40]	; (8009440 <_vfiprintf_r+0x25c>)
 8009418:	a904      	add	r1, sp, #16
 800941a:	4630      	mov	r0, r6
 800941c:	f000 f880 	bl	8009520 <_printf_i>
 8009420:	e7e4      	b.n	80093ec <_vfiprintf_r+0x208>
 8009422:	bf00      	nop
 8009424:	0800a494 	.word	0x0800a494
 8009428:	0800a4b4 	.word	0x0800a4b4
 800942c:	0800a474 	.word	0x0800a474
 8009430:	0800a4d4 	.word	0x0800a4d4
 8009434:	0800a4da 	.word	0x0800a4da
 8009438:	0800a4de 	.word	0x0800a4de
 800943c:	00000000 	.word	0x00000000
 8009440:	080091bf 	.word	0x080091bf

08009444 <_printf_common>:
 8009444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009448:	4616      	mov	r6, r2
 800944a:	4699      	mov	r9, r3
 800944c:	688a      	ldr	r2, [r1, #8]
 800944e:	690b      	ldr	r3, [r1, #16]
 8009450:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009454:	4293      	cmp	r3, r2
 8009456:	bfb8      	it	lt
 8009458:	4613      	movlt	r3, r2
 800945a:	6033      	str	r3, [r6, #0]
 800945c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009460:	4607      	mov	r7, r0
 8009462:	460c      	mov	r4, r1
 8009464:	b10a      	cbz	r2, 800946a <_printf_common+0x26>
 8009466:	3301      	adds	r3, #1
 8009468:	6033      	str	r3, [r6, #0]
 800946a:	6823      	ldr	r3, [r4, #0]
 800946c:	0699      	lsls	r1, r3, #26
 800946e:	bf42      	ittt	mi
 8009470:	6833      	ldrmi	r3, [r6, #0]
 8009472:	3302      	addmi	r3, #2
 8009474:	6033      	strmi	r3, [r6, #0]
 8009476:	6825      	ldr	r5, [r4, #0]
 8009478:	f015 0506 	ands.w	r5, r5, #6
 800947c:	d106      	bne.n	800948c <_printf_common+0x48>
 800947e:	f104 0a19 	add.w	sl, r4, #25
 8009482:	68e3      	ldr	r3, [r4, #12]
 8009484:	6832      	ldr	r2, [r6, #0]
 8009486:	1a9b      	subs	r3, r3, r2
 8009488:	42ab      	cmp	r3, r5
 800948a:	dc26      	bgt.n	80094da <_printf_common+0x96>
 800948c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009490:	1e13      	subs	r3, r2, #0
 8009492:	6822      	ldr	r2, [r4, #0]
 8009494:	bf18      	it	ne
 8009496:	2301      	movne	r3, #1
 8009498:	0692      	lsls	r2, r2, #26
 800949a:	d42b      	bmi.n	80094f4 <_printf_common+0xb0>
 800949c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80094a0:	4649      	mov	r1, r9
 80094a2:	4638      	mov	r0, r7
 80094a4:	47c0      	blx	r8
 80094a6:	3001      	adds	r0, #1
 80094a8:	d01e      	beq.n	80094e8 <_printf_common+0xa4>
 80094aa:	6823      	ldr	r3, [r4, #0]
 80094ac:	68e5      	ldr	r5, [r4, #12]
 80094ae:	6832      	ldr	r2, [r6, #0]
 80094b0:	f003 0306 	and.w	r3, r3, #6
 80094b4:	2b04      	cmp	r3, #4
 80094b6:	bf08      	it	eq
 80094b8:	1aad      	subeq	r5, r5, r2
 80094ba:	68a3      	ldr	r3, [r4, #8]
 80094bc:	6922      	ldr	r2, [r4, #16]
 80094be:	bf0c      	ite	eq
 80094c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094c4:	2500      	movne	r5, #0
 80094c6:	4293      	cmp	r3, r2
 80094c8:	bfc4      	itt	gt
 80094ca:	1a9b      	subgt	r3, r3, r2
 80094cc:	18ed      	addgt	r5, r5, r3
 80094ce:	2600      	movs	r6, #0
 80094d0:	341a      	adds	r4, #26
 80094d2:	42b5      	cmp	r5, r6
 80094d4:	d11a      	bne.n	800950c <_printf_common+0xc8>
 80094d6:	2000      	movs	r0, #0
 80094d8:	e008      	b.n	80094ec <_printf_common+0xa8>
 80094da:	2301      	movs	r3, #1
 80094dc:	4652      	mov	r2, sl
 80094de:	4649      	mov	r1, r9
 80094e0:	4638      	mov	r0, r7
 80094e2:	47c0      	blx	r8
 80094e4:	3001      	adds	r0, #1
 80094e6:	d103      	bne.n	80094f0 <_printf_common+0xac>
 80094e8:	f04f 30ff 	mov.w	r0, #4294967295
 80094ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094f0:	3501      	adds	r5, #1
 80094f2:	e7c6      	b.n	8009482 <_printf_common+0x3e>
 80094f4:	18e1      	adds	r1, r4, r3
 80094f6:	1c5a      	adds	r2, r3, #1
 80094f8:	2030      	movs	r0, #48	; 0x30
 80094fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80094fe:	4422      	add	r2, r4
 8009500:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009504:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009508:	3302      	adds	r3, #2
 800950a:	e7c7      	b.n	800949c <_printf_common+0x58>
 800950c:	2301      	movs	r3, #1
 800950e:	4622      	mov	r2, r4
 8009510:	4649      	mov	r1, r9
 8009512:	4638      	mov	r0, r7
 8009514:	47c0      	blx	r8
 8009516:	3001      	adds	r0, #1
 8009518:	d0e6      	beq.n	80094e8 <_printf_common+0xa4>
 800951a:	3601      	adds	r6, #1
 800951c:	e7d9      	b.n	80094d2 <_printf_common+0x8e>
	...

08009520 <_printf_i>:
 8009520:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009524:	7e0f      	ldrb	r7, [r1, #24]
 8009526:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009528:	2f78      	cmp	r7, #120	; 0x78
 800952a:	4691      	mov	r9, r2
 800952c:	4680      	mov	r8, r0
 800952e:	460c      	mov	r4, r1
 8009530:	469a      	mov	sl, r3
 8009532:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009536:	d807      	bhi.n	8009548 <_printf_i+0x28>
 8009538:	2f62      	cmp	r7, #98	; 0x62
 800953a:	d80a      	bhi.n	8009552 <_printf_i+0x32>
 800953c:	2f00      	cmp	r7, #0
 800953e:	f000 80d8 	beq.w	80096f2 <_printf_i+0x1d2>
 8009542:	2f58      	cmp	r7, #88	; 0x58
 8009544:	f000 80a3 	beq.w	800968e <_printf_i+0x16e>
 8009548:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800954c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009550:	e03a      	b.n	80095c8 <_printf_i+0xa8>
 8009552:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009556:	2b15      	cmp	r3, #21
 8009558:	d8f6      	bhi.n	8009548 <_printf_i+0x28>
 800955a:	a101      	add	r1, pc, #4	; (adr r1, 8009560 <_printf_i+0x40>)
 800955c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009560:	080095b9 	.word	0x080095b9
 8009564:	080095cd 	.word	0x080095cd
 8009568:	08009549 	.word	0x08009549
 800956c:	08009549 	.word	0x08009549
 8009570:	08009549 	.word	0x08009549
 8009574:	08009549 	.word	0x08009549
 8009578:	080095cd 	.word	0x080095cd
 800957c:	08009549 	.word	0x08009549
 8009580:	08009549 	.word	0x08009549
 8009584:	08009549 	.word	0x08009549
 8009588:	08009549 	.word	0x08009549
 800958c:	080096d9 	.word	0x080096d9
 8009590:	080095fd 	.word	0x080095fd
 8009594:	080096bb 	.word	0x080096bb
 8009598:	08009549 	.word	0x08009549
 800959c:	08009549 	.word	0x08009549
 80095a0:	080096fb 	.word	0x080096fb
 80095a4:	08009549 	.word	0x08009549
 80095a8:	080095fd 	.word	0x080095fd
 80095ac:	08009549 	.word	0x08009549
 80095b0:	08009549 	.word	0x08009549
 80095b4:	080096c3 	.word	0x080096c3
 80095b8:	682b      	ldr	r3, [r5, #0]
 80095ba:	1d1a      	adds	r2, r3, #4
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	602a      	str	r2, [r5, #0]
 80095c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80095c8:	2301      	movs	r3, #1
 80095ca:	e0a3      	b.n	8009714 <_printf_i+0x1f4>
 80095cc:	6820      	ldr	r0, [r4, #0]
 80095ce:	6829      	ldr	r1, [r5, #0]
 80095d0:	0606      	lsls	r6, r0, #24
 80095d2:	f101 0304 	add.w	r3, r1, #4
 80095d6:	d50a      	bpl.n	80095ee <_printf_i+0xce>
 80095d8:	680e      	ldr	r6, [r1, #0]
 80095da:	602b      	str	r3, [r5, #0]
 80095dc:	2e00      	cmp	r6, #0
 80095de:	da03      	bge.n	80095e8 <_printf_i+0xc8>
 80095e0:	232d      	movs	r3, #45	; 0x2d
 80095e2:	4276      	negs	r6, r6
 80095e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095e8:	485e      	ldr	r0, [pc, #376]	; (8009764 <_printf_i+0x244>)
 80095ea:	230a      	movs	r3, #10
 80095ec:	e019      	b.n	8009622 <_printf_i+0x102>
 80095ee:	680e      	ldr	r6, [r1, #0]
 80095f0:	602b      	str	r3, [r5, #0]
 80095f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80095f6:	bf18      	it	ne
 80095f8:	b236      	sxthne	r6, r6
 80095fa:	e7ef      	b.n	80095dc <_printf_i+0xbc>
 80095fc:	682b      	ldr	r3, [r5, #0]
 80095fe:	6820      	ldr	r0, [r4, #0]
 8009600:	1d19      	adds	r1, r3, #4
 8009602:	6029      	str	r1, [r5, #0]
 8009604:	0601      	lsls	r1, r0, #24
 8009606:	d501      	bpl.n	800960c <_printf_i+0xec>
 8009608:	681e      	ldr	r6, [r3, #0]
 800960a:	e002      	b.n	8009612 <_printf_i+0xf2>
 800960c:	0646      	lsls	r6, r0, #25
 800960e:	d5fb      	bpl.n	8009608 <_printf_i+0xe8>
 8009610:	881e      	ldrh	r6, [r3, #0]
 8009612:	4854      	ldr	r0, [pc, #336]	; (8009764 <_printf_i+0x244>)
 8009614:	2f6f      	cmp	r7, #111	; 0x6f
 8009616:	bf0c      	ite	eq
 8009618:	2308      	moveq	r3, #8
 800961a:	230a      	movne	r3, #10
 800961c:	2100      	movs	r1, #0
 800961e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009622:	6865      	ldr	r5, [r4, #4]
 8009624:	60a5      	str	r5, [r4, #8]
 8009626:	2d00      	cmp	r5, #0
 8009628:	bfa2      	ittt	ge
 800962a:	6821      	ldrge	r1, [r4, #0]
 800962c:	f021 0104 	bicge.w	r1, r1, #4
 8009630:	6021      	strge	r1, [r4, #0]
 8009632:	b90e      	cbnz	r6, 8009638 <_printf_i+0x118>
 8009634:	2d00      	cmp	r5, #0
 8009636:	d04d      	beq.n	80096d4 <_printf_i+0x1b4>
 8009638:	4615      	mov	r5, r2
 800963a:	fbb6 f1f3 	udiv	r1, r6, r3
 800963e:	fb03 6711 	mls	r7, r3, r1, r6
 8009642:	5dc7      	ldrb	r7, [r0, r7]
 8009644:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009648:	4637      	mov	r7, r6
 800964a:	42bb      	cmp	r3, r7
 800964c:	460e      	mov	r6, r1
 800964e:	d9f4      	bls.n	800963a <_printf_i+0x11a>
 8009650:	2b08      	cmp	r3, #8
 8009652:	d10b      	bne.n	800966c <_printf_i+0x14c>
 8009654:	6823      	ldr	r3, [r4, #0]
 8009656:	07de      	lsls	r6, r3, #31
 8009658:	d508      	bpl.n	800966c <_printf_i+0x14c>
 800965a:	6923      	ldr	r3, [r4, #16]
 800965c:	6861      	ldr	r1, [r4, #4]
 800965e:	4299      	cmp	r1, r3
 8009660:	bfde      	ittt	le
 8009662:	2330      	movle	r3, #48	; 0x30
 8009664:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009668:	f105 35ff 	addle.w	r5, r5, #4294967295
 800966c:	1b52      	subs	r2, r2, r5
 800966e:	6122      	str	r2, [r4, #16]
 8009670:	f8cd a000 	str.w	sl, [sp]
 8009674:	464b      	mov	r3, r9
 8009676:	aa03      	add	r2, sp, #12
 8009678:	4621      	mov	r1, r4
 800967a:	4640      	mov	r0, r8
 800967c:	f7ff fee2 	bl	8009444 <_printf_common>
 8009680:	3001      	adds	r0, #1
 8009682:	d14c      	bne.n	800971e <_printf_i+0x1fe>
 8009684:	f04f 30ff 	mov.w	r0, #4294967295
 8009688:	b004      	add	sp, #16
 800968a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800968e:	4835      	ldr	r0, [pc, #212]	; (8009764 <_printf_i+0x244>)
 8009690:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009694:	6829      	ldr	r1, [r5, #0]
 8009696:	6823      	ldr	r3, [r4, #0]
 8009698:	f851 6b04 	ldr.w	r6, [r1], #4
 800969c:	6029      	str	r1, [r5, #0]
 800969e:	061d      	lsls	r5, r3, #24
 80096a0:	d514      	bpl.n	80096cc <_printf_i+0x1ac>
 80096a2:	07df      	lsls	r7, r3, #31
 80096a4:	bf44      	itt	mi
 80096a6:	f043 0320 	orrmi.w	r3, r3, #32
 80096aa:	6023      	strmi	r3, [r4, #0]
 80096ac:	b91e      	cbnz	r6, 80096b6 <_printf_i+0x196>
 80096ae:	6823      	ldr	r3, [r4, #0]
 80096b0:	f023 0320 	bic.w	r3, r3, #32
 80096b4:	6023      	str	r3, [r4, #0]
 80096b6:	2310      	movs	r3, #16
 80096b8:	e7b0      	b.n	800961c <_printf_i+0xfc>
 80096ba:	6823      	ldr	r3, [r4, #0]
 80096bc:	f043 0320 	orr.w	r3, r3, #32
 80096c0:	6023      	str	r3, [r4, #0]
 80096c2:	2378      	movs	r3, #120	; 0x78
 80096c4:	4828      	ldr	r0, [pc, #160]	; (8009768 <_printf_i+0x248>)
 80096c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80096ca:	e7e3      	b.n	8009694 <_printf_i+0x174>
 80096cc:	0659      	lsls	r1, r3, #25
 80096ce:	bf48      	it	mi
 80096d0:	b2b6      	uxthmi	r6, r6
 80096d2:	e7e6      	b.n	80096a2 <_printf_i+0x182>
 80096d4:	4615      	mov	r5, r2
 80096d6:	e7bb      	b.n	8009650 <_printf_i+0x130>
 80096d8:	682b      	ldr	r3, [r5, #0]
 80096da:	6826      	ldr	r6, [r4, #0]
 80096dc:	6961      	ldr	r1, [r4, #20]
 80096de:	1d18      	adds	r0, r3, #4
 80096e0:	6028      	str	r0, [r5, #0]
 80096e2:	0635      	lsls	r5, r6, #24
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	d501      	bpl.n	80096ec <_printf_i+0x1cc>
 80096e8:	6019      	str	r1, [r3, #0]
 80096ea:	e002      	b.n	80096f2 <_printf_i+0x1d2>
 80096ec:	0670      	lsls	r0, r6, #25
 80096ee:	d5fb      	bpl.n	80096e8 <_printf_i+0x1c8>
 80096f0:	8019      	strh	r1, [r3, #0]
 80096f2:	2300      	movs	r3, #0
 80096f4:	6123      	str	r3, [r4, #16]
 80096f6:	4615      	mov	r5, r2
 80096f8:	e7ba      	b.n	8009670 <_printf_i+0x150>
 80096fa:	682b      	ldr	r3, [r5, #0]
 80096fc:	1d1a      	adds	r2, r3, #4
 80096fe:	602a      	str	r2, [r5, #0]
 8009700:	681d      	ldr	r5, [r3, #0]
 8009702:	6862      	ldr	r2, [r4, #4]
 8009704:	2100      	movs	r1, #0
 8009706:	4628      	mov	r0, r5
 8009708:	f7f6 fd6a 	bl	80001e0 <memchr>
 800970c:	b108      	cbz	r0, 8009712 <_printf_i+0x1f2>
 800970e:	1b40      	subs	r0, r0, r5
 8009710:	6060      	str	r0, [r4, #4]
 8009712:	6863      	ldr	r3, [r4, #4]
 8009714:	6123      	str	r3, [r4, #16]
 8009716:	2300      	movs	r3, #0
 8009718:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800971c:	e7a8      	b.n	8009670 <_printf_i+0x150>
 800971e:	6923      	ldr	r3, [r4, #16]
 8009720:	462a      	mov	r2, r5
 8009722:	4649      	mov	r1, r9
 8009724:	4640      	mov	r0, r8
 8009726:	47d0      	blx	sl
 8009728:	3001      	adds	r0, #1
 800972a:	d0ab      	beq.n	8009684 <_printf_i+0x164>
 800972c:	6823      	ldr	r3, [r4, #0]
 800972e:	079b      	lsls	r3, r3, #30
 8009730:	d413      	bmi.n	800975a <_printf_i+0x23a>
 8009732:	68e0      	ldr	r0, [r4, #12]
 8009734:	9b03      	ldr	r3, [sp, #12]
 8009736:	4298      	cmp	r0, r3
 8009738:	bfb8      	it	lt
 800973a:	4618      	movlt	r0, r3
 800973c:	e7a4      	b.n	8009688 <_printf_i+0x168>
 800973e:	2301      	movs	r3, #1
 8009740:	4632      	mov	r2, r6
 8009742:	4649      	mov	r1, r9
 8009744:	4640      	mov	r0, r8
 8009746:	47d0      	blx	sl
 8009748:	3001      	adds	r0, #1
 800974a:	d09b      	beq.n	8009684 <_printf_i+0x164>
 800974c:	3501      	adds	r5, #1
 800974e:	68e3      	ldr	r3, [r4, #12]
 8009750:	9903      	ldr	r1, [sp, #12]
 8009752:	1a5b      	subs	r3, r3, r1
 8009754:	42ab      	cmp	r3, r5
 8009756:	dcf2      	bgt.n	800973e <_printf_i+0x21e>
 8009758:	e7eb      	b.n	8009732 <_printf_i+0x212>
 800975a:	2500      	movs	r5, #0
 800975c:	f104 0619 	add.w	r6, r4, #25
 8009760:	e7f5      	b.n	800974e <_printf_i+0x22e>
 8009762:	bf00      	nop
 8009764:	0800a4e5 	.word	0x0800a4e5
 8009768:	0800a4f6 	.word	0x0800a4f6

0800976c <_sbrk_r>:
 800976c:	b538      	push	{r3, r4, r5, lr}
 800976e:	4d06      	ldr	r5, [pc, #24]	; (8009788 <_sbrk_r+0x1c>)
 8009770:	2300      	movs	r3, #0
 8009772:	4604      	mov	r4, r0
 8009774:	4608      	mov	r0, r1
 8009776:	602b      	str	r3, [r5, #0]
 8009778:	f7fe fd8e 	bl	8008298 <_sbrk>
 800977c:	1c43      	adds	r3, r0, #1
 800977e:	d102      	bne.n	8009786 <_sbrk_r+0x1a>
 8009780:	682b      	ldr	r3, [r5, #0]
 8009782:	b103      	cbz	r3, 8009786 <_sbrk_r+0x1a>
 8009784:	6023      	str	r3, [r4, #0]
 8009786:	bd38      	pop	{r3, r4, r5, pc}
 8009788:	20000b7c 	.word	0x20000b7c

0800978c <__sread>:
 800978c:	b510      	push	{r4, lr}
 800978e:	460c      	mov	r4, r1
 8009790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009794:	f000 f8f2 	bl	800997c <_read_r>
 8009798:	2800      	cmp	r0, #0
 800979a:	bfab      	itete	ge
 800979c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800979e:	89a3      	ldrhlt	r3, [r4, #12]
 80097a0:	181b      	addge	r3, r3, r0
 80097a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80097a6:	bfac      	ite	ge
 80097a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80097aa:	81a3      	strhlt	r3, [r4, #12]
 80097ac:	bd10      	pop	{r4, pc}

080097ae <__swrite>:
 80097ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097b2:	461f      	mov	r7, r3
 80097b4:	898b      	ldrh	r3, [r1, #12]
 80097b6:	05db      	lsls	r3, r3, #23
 80097b8:	4605      	mov	r5, r0
 80097ba:	460c      	mov	r4, r1
 80097bc:	4616      	mov	r6, r2
 80097be:	d505      	bpl.n	80097cc <__swrite+0x1e>
 80097c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097c4:	2302      	movs	r3, #2
 80097c6:	2200      	movs	r2, #0
 80097c8:	f000 f870 	bl	80098ac <_lseek_r>
 80097cc:	89a3      	ldrh	r3, [r4, #12]
 80097ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097d6:	81a3      	strh	r3, [r4, #12]
 80097d8:	4632      	mov	r2, r6
 80097da:	463b      	mov	r3, r7
 80097dc:	4628      	mov	r0, r5
 80097de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097e2:	f000 b817 	b.w	8009814 <_write_r>

080097e6 <__sseek>:
 80097e6:	b510      	push	{r4, lr}
 80097e8:	460c      	mov	r4, r1
 80097ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097ee:	f000 f85d 	bl	80098ac <_lseek_r>
 80097f2:	1c43      	adds	r3, r0, #1
 80097f4:	89a3      	ldrh	r3, [r4, #12]
 80097f6:	bf15      	itete	ne
 80097f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80097fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80097fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009802:	81a3      	strheq	r3, [r4, #12]
 8009804:	bf18      	it	ne
 8009806:	81a3      	strhne	r3, [r4, #12]
 8009808:	bd10      	pop	{r4, pc}

0800980a <__sclose>:
 800980a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800980e:	f000 b81b 	b.w	8009848 <_close_r>
	...

08009814 <_write_r>:
 8009814:	b538      	push	{r3, r4, r5, lr}
 8009816:	4d07      	ldr	r5, [pc, #28]	; (8009834 <_write_r+0x20>)
 8009818:	4604      	mov	r4, r0
 800981a:	4608      	mov	r0, r1
 800981c:	4611      	mov	r1, r2
 800981e:	2200      	movs	r2, #0
 8009820:	602a      	str	r2, [r5, #0]
 8009822:	461a      	mov	r2, r3
 8009824:	f7fe fd1b 	bl	800825e <_write>
 8009828:	1c43      	adds	r3, r0, #1
 800982a:	d102      	bne.n	8009832 <_write_r+0x1e>
 800982c:	682b      	ldr	r3, [r5, #0]
 800982e:	b103      	cbz	r3, 8009832 <_write_r+0x1e>
 8009830:	6023      	str	r3, [r4, #0]
 8009832:	bd38      	pop	{r3, r4, r5, pc}
 8009834:	20000b7c 	.word	0x20000b7c

08009838 <abort>:
 8009838:	b508      	push	{r3, lr}
 800983a:	2006      	movs	r0, #6
 800983c:	f000 f8d8 	bl	80099f0 <raise>
 8009840:	2001      	movs	r0, #1
 8009842:	f7fe fcf1 	bl	8008228 <_exit>
	...

08009848 <_close_r>:
 8009848:	b538      	push	{r3, r4, r5, lr}
 800984a:	4d06      	ldr	r5, [pc, #24]	; (8009864 <_close_r+0x1c>)
 800984c:	2300      	movs	r3, #0
 800984e:	4604      	mov	r4, r0
 8009850:	4608      	mov	r0, r1
 8009852:	602b      	str	r3, [r5, #0]
 8009854:	f7fe fd4c 	bl	80082f0 <_close>
 8009858:	1c43      	adds	r3, r0, #1
 800985a:	d102      	bne.n	8009862 <_close_r+0x1a>
 800985c:	682b      	ldr	r3, [r5, #0]
 800985e:	b103      	cbz	r3, 8009862 <_close_r+0x1a>
 8009860:	6023      	str	r3, [r4, #0]
 8009862:	bd38      	pop	{r3, r4, r5, pc}
 8009864:	20000b7c 	.word	0x20000b7c

08009868 <_fstat_r>:
 8009868:	b538      	push	{r3, r4, r5, lr}
 800986a:	4d07      	ldr	r5, [pc, #28]	; (8009888 <_fstat_r+0x20>)
 800986c:	2300      	movs	r3, #0
 800986e:	4604      	mov	r4, r0
 8009870:	4608      	mov	r0, r1
 8009872:	4611      	mov	r1, r2
 8009874:	602b      	str	r3, [r5, #0]
 8009876:	f7fe fd46 	bl	8008306 <_fstat>
 800987a:	1c43      	adds	r3, r0, #1
 800987c:	d102      	bne.n	8009884 <_fstat_r+0x1c>
 800987e:	682b      	ldr	r3, [r5, #0]
 8009880:	b103      	cbz	r3, 8009884 <_fstat_r+0x1c>
 8009882:	6023      	str	r3, [r4, #0]
 8009884:	bd38      	pop	{r3, r4, r5, pc}
 8009886:	bf00      	nop
 8009888:	20000b7c 	.word	0x20000b7c

0800988c <_isatty_r>:
 800988c:	b538      	push	{r3, r4, r5, lr}
 800988e:	4d06      	ldr	r5, [pc, #24]	; (80098a8 <_isatty_r+0x1c>)
 8009890:	2300      	movs	r3, #0
 8009892:	4604      	mov	r4, r0
 8009894:	4608      	mov	r0, r1
 8009896:	602b      	str	r3, [r5, #0]
 8009898:	f7fe fd44 	bl	8008324 <_isatty>
 800989c:	1c43      	adds	r3, r0, #1
 800989e:	d102      	bne.n	80098a6 <_isatty_r+0x1a>
 80098a0:	682b      	ldr	r3, [r5, #0]
 80098a2:	b103      	cbz	r3, 80098a6 <_isatty_r+0x1a>
 80098a4:	6023      	str	r3, [r4, #0]
 80098a6:	bd38      	pop	{r3, r4, r5, pc}
 80098a8:	20000b7c 	.word	0x20000b7c

080098ac <_lseek_r>:
 80098ac:	b538      	push	{r3, r4, r5, lr}
 80098ae:	4d07      	ldr	r5, [pc, #28]	; (80098cc <_lseek_r+0x20>)
 80098b0:	4604      	mov	r4, r0
 80098b2:	4608      	mov	r0, r1
 80098b4:	4611      	mov	r1, r2
 80098b6:	2200      	movs	r2, #0
 80098b8:	602a      	str	r2, [r5, #0]
 80098ba:	461a      	mov	r2, r3
 80098bc:	f7fe fd3c 	bl	8008338 <_lseek>
 80098c0:	1c43      	adds	r3, r0, #1
 80098c2:	d102      	bne.n	80098ca <_lseek_r+0x1e>
 80098c4:	682b      	ldr	r3, [r5, #0]
 80098c6:	b103      	cbz	r3, 80098ca <_lseek_r+0x1e>
 80098c8:	6023      	str	r3, [r4, #0]
 80098ca:	bd38      	pop	{r3, r4, r5, pc}
 80098cc:	20000b7c 	.word	0x20000b7c

080098d0 <memmove>:
 80098d0:	4288      	cmp	r0, r1
 80098d2:	b510      	push	{r4, lr}
 80098d4:	eb01 0402 	add.w	r4, r1, r2
 80098d8:	d902      	bls.n	80098e0 <memmove+0x10>
 80098da:	4284      	cmp	r4, r0
 80098dc:	4623      	mov	r3, r4
 80098de:	d807      	bhi.n	80098f0 <memmove+0x20>
 80098e0:	1e43      	subs	r3, r0, #1
 80098e2:	42a1      	cmp	r1, r4
 80098e4:	d008      	beq.n	80098f8 <memmove+0x28>
 80098e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80098ee:	e7f8      	b.n	80098e2 <memmove+0x12>
 80098f0:	4402      	add	r2, r0
 80098f2:	4601      	mov	r1, r0
 80098f4:	428a      	cmp	r2, r1
 80098f6:	d100      	bne.n	80098fa <memmove+0x2a>
 80098f8:	bd10      	pop	{r4, pc}
 80098fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80098fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009902:	e7f7      	b.n	80098f4 <memmove+0x24>

08009904 <__malloc_lock>:
 8009904:	4801      	ldr	r0, [pc, #4]	; (800990c <__malloc_lock+0x8>)
 8009906:	f7ff b99b 	b.w	8008c40 <__retarget_lock_acquire_recursive>
 800990a:	bf00      	nop
 800990c:	20000b70 	.word	0x20000b70

08009910 <__malloc_unlock>:
 8009910:	4801      	ldr	r0, [pc, #4]	; (8009918 <__malloc_unlock+0x8>)
 8009912:	f7ff b996 	b.w	8008c42 <__retarget_lock_release_recursive>
 8009916:	bf00      	nop
 8009918:	20000b70 	.word	0x20000b70

0800991c <_realloc_r>:
 800991c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009920:	4680      	mov	r8, r0
 8009922:	4614      	mov	r4, r2
 8009924:	460e      	mov	r6, r1
 8009926:	b921      	cbnz	r1, 8009932 <_realloc_r+0x16>
 8009928:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800992c:	4611      	mov	r1, r2
 800992e:	f7ff ba61 	b.w	8008df4 <_malloc_r>
 8009932:	b92a      	cbnz	r2, 8009940 <_realloc_r+0x24>
 8009934:	f7ff f9f4 	bl	8008d20 <_free_r>
 8009938:	4625      	mov	r5, r4
 800993a:	4628      	mov	r0, r5
 800993c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009940:	f000 f872 	bl	8009a28 <_malloc_usable_size_r>
 8009944:	4284      	cmp	r4, r0
 8009946:	4607      	mov	r7, r0
 8009948:	d802      	bhi.n	8009950 <_realloc_r+0x34>
 800994a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800994e:	d812      	bhi.n	8009976 <_realloc_r+0x5a>
 8009950:	4621      	mov	r1, r4
 8009952:	4640      	mov	r0, r8
 8009954:	f7ff fa4e 	bl	8008df4 <_malloc_r>
 8009958:	4605      	mov	r5, r0
 800995a:	2800      	cmp	r0, #0
 800995c:	d0ed      	beq.n	800993a <_realloc_r+0x1e>
 800995e:	42bc      	cmp	r4, r7
 8009960:	4622      	mov	r2, r4
 8009962:	4631      	mov	r1, r6
 8009964:	bf28      	it	cs
 8009966:	463a      	movcs	r2, r7
 8009968:	f7fe fd48 	bl	80083fc <memcpy>
 800996c:	4631      	mov	r1, r6
 800996e:	4640      	mov	r0, r8
 8009970:	f7ff f9d6 	bl	8008d20 <_free_r>
 8009974:	e7e1      	b.n	800993a <_realloc_r+0x1e>
 8009976:	4635      	mov	r5, r6
 8009978:	e7df      	b.n	800993a <_realloc_r+0x1e>
	...

0800997c <_read_r>:
 800997c:	b538      	push	{r3, r4, r5, lr}
 800997e:	4d07      	ldr	r5, [pc, #28]	; (800999c <_read_r+0x20>)
 8009980:	4604      	mov	r4, r0
 8009982:	4608      	mov	r0, r1
 8009984:	4611      	mov	r1, r2
 8009986:	2200      	movs	r2, #0
 8009988:	602a      	str	r2, [r5, #0]
 800998a:	461a      	mov	r2, r3
 800998c:	f7fe fc56 	bl	800823c <_read>
 8009990:	1c43      	adds	r3, r0, #1
 8009992:	d102      	bne.n	800999a <_read_r+0x1e>
 8009994:	682b      	ldr	r3, [r5, #0]
 8009996:	b103      	cbz	r3, 800999a <_read_r+0x1e>
 8009998:	6023      	str	r3, [r4, #0]
 800999a:	bd38      	pop	{r3, r4, r5, pc}
 800999c:	20000b7c 	.word	0x20000b7c

080099a0 <_raise_r>:
 80099a0:	291f      	cmp	r1, #31
 80099a2:	b538      	push	{r3, r4, r5, lr}
 80099a4:	4604      	mov	r4, r0
 80099a6:	460d      	mov	r5, r1
 80099a8:	d904      	bls.n	80099b4 <_raise_r+0x14>
 80099aa:	2316      	movs	r3, #22
 80099ac:	6003      	str	r3, [r0, #0]
 80099ae:	f04f 30ff 	mov.w	r0, #4294967295
 80099b2:	bd38      	pop	{r3, r4, r5, pc}
 80099b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80099b6:	b112      	cbz	r2, 80099be <_raise_r+0x1e>
 80099b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80099bc:	b94b      	cbnz	r3, 80099d2 <_raise_r+0x32>
 80099be:	4620      	mov	r0, r4
 80099c0:	f000 f830 	bl	8009a24 <_getpid_r>
 80099c4:	462a      	mov	r2, r5
 80099c6:	4601      	mov	r1, r0
 80099c8:	4620      	mov	r0, r4
 80099ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099ce:	f000 b817 	b.w	8009a00 <_kill_r>
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d00a      	beq.n	80099ec <_raise_r+0x4c>
 80099d6:	1c59      	adds	r1, r3, #1
 80099d8:	d103      	bne.n	80099e2 <_raise_r+0x42>
 80099da:	2316      	movs	r3, #22
 80099dc:	6003      	str	r3, [r0, #0]
 80099de:	2001      	movs	r0, #1
 80099e0:	e7e7      	b.n	80099b2 <_raise_r+0x12>
 80099e2:	2400      	movs	r4, #0
 80099e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80099e8:	4628      	mov	r0, r5
 80099ea:	4798      	blx	r3
 80099ec:	2000      	movs	r0, #0
 80099ee:	e7e0      	b.n	80099b2 <_raise_r+0x12>

080099f0 <raise>:
 80099f0:	4b02      	ldr	r3, [pc, #8]	; (80099fc <raise+0xc>)
 80099f2:	4601      	mov	r1, r0
 80099f4:	6818      	ldr	r0, [r3, #0]
 80099f6:	f7ff bfd3 	b.w	80099a0 <_raise_r>
 80099fa:	bf00      	nop
 80099fc:	20000048 	.word	0x20000048

08009a00 <_kill_r>:
 8009a00:	b538      	push	{r3, r4, r5, lr}
 8009a02:	4d07      	ldr	r5, [pc, #28]	; (8009a20 <_kill_r+0x20>)
 8009a04:	2300      	movs	r3, #0
 8009a06:	4604      	mov	r4, r0
 8009a08:	4608      	mov	r0, r1
 8009a0a:	4611      	mov	r1, r2
 8009a0c:	602b      	str	r3, [r5, #0]
 8009a0e:	f7fe fbfb 	bl	8008208 <_kill>
 8009a12:	1c43      	adds	r3, r0, #1
 8009a14:	d102      	bne.n	8009a1c <_kill_r+0x1c>
 8009a16:	682b      	ldr	r3, [r5, #0]
 8009a18:	b103      	cbz	r3, 8009a1c <_kill_r+0x1c>
 8009a1a:	6023      	str	r3, [r4, #0]
 8009a1c:	bd38      	pop	{r3, r4, r5, pc}
 8009a1e:	bf00      	nop
 8009a20:	20000b7c 	.word	0x20000b7c

08009a24 <_getpid_r>:
 8009a24:	f7fe bbe9 	b.w	80081fa <_getpid>

08009a28 <_malloc_usable_size_r>:
 8009a28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a2c:	1f18      	subs	r0, r3, #4
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	bfbc      	itt	lt
 8009a32:	580b      	ldrlt	r3, [r1, r0]
 8009a34:	18c0      	addlt	r0, r0, r3
 8009a36:	4770      	bx	lr

08009a38 <trunc>:
 8009a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a3a:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8009a3e:	f2a5 32ff 	subw	r2, r5, #1023	; 0x3ff
 8009a42:	2a13      	cmp	r2, #19
 8009a44:	4603      	mov	r3, r0
 8009a46:	460c      	mov	r4, r1
 8009a48:	dc10      	bgt.n	8009a6c <trunc+0x34>
 8009a4a:	2a00      	cmp	r2, #0
 8009a4c:	bfa7      	ittee	ge
 8009a4e:	4b11      	ldrge	r3, [pc, #68]	; (8009a94 <trunc+0x5c>)
 8009a50:	fa43 f202 	asrge.w	r2, r3, r2
 8009a54:	2000      	movlt	r0, #0
 8009a56:	f001 4100 	andlt.w	r1, r1, #2147483648	; 0x80000000
 8009a5a:	bfa4      	itt	ge
 8009a5c:	2000      	movge	r0, #0
 8009a5e:	ea24 0102 	bicge.w	r1, r4, r2
 8009a62:	4603      	mov	r3, r0
 8009a64:	460c      	mov	r4, r1
 8009a66:	4618      	mov	r0, r3
 8009a68:	4621      	mov	r1, r4
 8009a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a6c:	2a33      	cmp	r2, #51	; 0x33
 8009a6e:	dd07      	ble.n	8009a80 <trunc+0x48>
 8009a70:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8009a74:	d1f7      	bne.n	8009a66 <trunc+0x2e>
 8009a76:	4602      	mov	r2, r0
 8009a78:	460b      	mov	r3, r1
 8009a7a:	f7f6 fc07 	bl	800028c <__adddf3>
 8009a7e:	e7f0      	b.n	8009a62 <trunc+0x2a>
 8009a80:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 8009a84:	f04f 32ff 	mov.w	r2, #4294967295
 8009a88:	fa22 f505 	lsr.w	r5, r2, r5
 8009a8c:	ea20 0005 	bic.w	r0, r0, r5
 8009a90:	e7e7      	b.n	8009a62 <trunc+0x2a>
 8009a92:	bf00      	nop
 8009a94:	000fffff 	.word	0x000fffff

08009a98 <_init>:
 8009a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a9a:	bf00      	nop
 8009a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a9e:	bc08      	pop	{r3}
 8009aa0:	469e      	mov	lr, r3
 8009aa2:	4770      	bx	lr

08009aa4 <_fini>:
 8009aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aa6:	bf00      	nop
 8009aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aaa:	bc08      	pop	{r3}
 8009aac:	469e      	mov	lr, r3
 8009aae:	4770      	bx	lr
